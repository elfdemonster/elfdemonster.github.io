<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的2019</title>
    <url>/2019/12/27/%E6%88%91%E7%9A%842019/</url>
    <content><![CDATA[<p>时间总是让人捉摸不定，有时候它如蜗牛，总是过不去，有时候它如猎豹，转瞬即逝。但无论怎样，他都会离我们而去，而且无论怎么努力也没法让它再回来，哪怕是一秒钟！</p>
<p>2019列车的终点眼看就要到了，一路上我焦虑过也开心过，愤怒过也淡然过。</p>
<p>年初上车时，给自己定了不少目标，做了不少计划，临到终点回头看，各站有各站回忆。</p>
<a id="more"></a>
<h2><span id="gong-zuo">工作</span><a href="#gong-zuo" class="header-anchor">#</a></h2><p>第一个必须要做的事是换工作，在原来的单位做的工作其实没多少挑战，也不是自己想做的，薪资也不满意，当然也不是没有好处，比如自由，有事情的时候甚至可能一天都不来了，但是这种状态却是我有很强烈的危机感，这个团队本身是一个远程团队，3年时间下来，没有任何发展壮大的趋势，倒是减少了2个人，同时干的也很不爽，整天都在煎熬，那么无论如何一定要换换。</p>
<p>离职之前领导突然让去出差，于是乎本着站好左后一班岗的态度去出差，而这次出差可能是目前为止工作强度最大的一段时间。到目的地当天晚上下班凌晨一点多，从此之后的二十多天休息了一天外，基本都是在凌晨两三点下班！但做到有始有终，项目成功上线！</p>
<p>5月中旬离职加入一家央企，本来还是满怀期望的，然而终归还是想的太简单。这里有些人一脸严肃，从不见笑脸，他们是领导；有些人总在提自己多厉害，比如马化腾的姐姐是他朋友，抖音的某个高管是他的联系人等等，还有这个行业是如何的厉害，没有这个行业其他行业都是零；还有些人总喜欢告诉大家自己的资历有多高，从部分成立至今，他一直在如何如何；当然这里也有好处，比如午饭免费还好吃（偷笑）。这里的工作感觉主要是扯皮，推动事情太难，没有见过也不知道对方是谁，对方也不一定知道是个什么事，给一个电话号码让去打，让去跟踪，而对方可能根本就不会理你！一个月的时间，我深刻的认识到自己不适合这里，需要尽早离开。</p>
<p>当然下这个决心也是因为我认为发来offer的银行业更好！</p>
<p>7月下旬辗转进入银行，满心欢喜，然而很快就发现自己欢喜的太早了。兜兜转转，依然进入了自己挖好的坑。<br>首先工资只发一半，让生活压力陡然增大（这个在入职前是没有告知过的）同时发现这个地方工作七八年的人跟应届毕业生级别一样，工资待遇一样，但是工作内容却绝不一样。其次自己一直不愿意出差，然而到这儿的第二个星期就安排半年的出差！</p>
<p><img src="/2019/12/27/我的2019/4.jpg" alt></p>
<p><img src="/2019/12/27/我的2019/5.jpg" alt></p>
<p>但是因为生活压力太大，又没有其他准备，只能硬着头皮坚持了。</p>
<h2><span id="xue-xi">学习</span><a href="#xue-xi" class="header-anchor">#</a></h2><p>因为出差的原因，基本再也没有上过MBA的课程，似乎浪费了钱却没有提升自己的能力。组织补考的时候由于自己在外地，而公司又不允许回去，只能自己买票周末偷偷的回去考试了。</p>
<p>毕业论文开题答辩已经过去了，因为出差问题，开题答辩没时间准备，只能在工作之余抽时间去做，好在最终开题答辩通过，需要开始准备论文了，发现自己的知识面是如此的狭窄，无法很好的完成，每天看一看却觉得自己完全没什么想法，无法写出有效的内容。</p>
<p>今年考取的证件也只有3月份的PMI-ACP，原计划的PBA或者PGMP都没能够报考。</p>
<p><img src="/2019/12/27/我的2019/acp.png" alt></p>
<p>一年下来也算看了有十几本书，时间如果能充分利用的话应该可以看更多的书。</p>
<h3><span id="kan-de-shu">看的书</span><a href="#kan-de-shu" class="header-anchor">#</a></h3><p>《中央帝国的财政密码》</p>
<p>具体内容已经记不清了，但绝对是一本不错的书。</p>
<p>《白鹿原》</p>
<p>白嘉轩的坚持，朱先生的通透，鹿兆鹏、百灵的牺牲值得敬仰；鹿子霖的两面三刀、表里不令人不耻；田小娥伸出乱世的身不由己让人无奈。</p>
<p>《围城》</p>
<p>每个人都深处自己的围城，方鸿渐的结局令人唏嘘，只要在该努力的时候努力，懂得珍惜，珍惜自己、珍惜时间、珍惜身边人，控制自己的欲望，知足常乐。</p>
<p>《中央帝国的哲学密码》</p>
<p>同样是郭建龙写的系列书，却总是感觉没有《中央帝国的财政密码》那么吸引人，最后还是没能看读完。</p>
<p>《月亮与六便士》</p>
<p>这本书的触动很大，思特里克兰德是一个勇士，值得所有人敬佩，当然现实中可以说99%的人都做不到像他那样放弃生活、亲人、圈子，完全的抛开自己已经拥有的一切，不顾一切的去追寻自己的理想，不为钱，不为名，只为喜好。非常值得推荐的一本书。</p>
<p>《万历十五年》</p>
<p>黄仁宇的这本《万历十五年》不像其他的历史书一样，读起来让人觉得干涩无味。这本书读起来让人感觉自己就是万历皇帝，身处政治旋涡，虽然高高在上，确实那么的无助，那么的孤独。读完整本书会感觉连皇帝都对世间事如此无奈，选哪个儿子做太子这种事自己都无法做主，我们芸芸众生，遇到一些无法左右的事何须斤斤计较呢？</p>
<p>《我们仨》</p>
<p>所有人的终点都一样，珍惜眼前人。</p>
<p>《你只是看起来很努力》</p>
<p>这本书可能会有人喜欢，但不适合我的胃口，虽然看完了，却感觉是浪费了自己的时间。每个人都有自己的喜好，作者的辛苦是应当受到所有人尊敬的。</p>
<p>《天才在左疯子在右》</p>
<p>里面有很多想法都是我们平常会想的，总感觉只是作者的奇思妙想，脑洞大开而已，两天时间走马观花的看完，并不是很喜欢。</p>
<p>《深入思考》</p>
<p>看起来比较费力的一本书，或许再多读两遍才能有所收获吧。</p>
<p>《中国人史纲》</p>
<p>从童话传说写到慈禧太后，柏杨先生新颖的观点，风趣的协作风格，非常值得推荐。</p>
<p>《丑陋的中国人》</p>
<p>能够正视自己的缺点，文化的缺点，才可能有更好的成长，值得一读。</p>
<p>《情人》</p>
<p>王小波在《沉默的大多数》中多次提到的玛格丽特·杜拉斯写的这本小说，读一遍并没有能体会到作者的用意，以后多读几遍吧。</p>
<p>《沉默的大多数》、《黄金时代》</p>
<p>王小波的两本书，很多人推荐的书。不过不是很适合我读，坚持看完了《沉默的大多数》，但是最终未能看完《黄金时代》。</p>
<h3><span id="ting-de-shu">听的书</span><a href="#ting-de-shu" class="header-anchor">#</a></h3><p>《红楼梦》</p>
<p>经典值得细细品读。</p>
<p>《易中天品三国》</p>
<p>一直比较喜欢三国，看过书，听过评书。易中天先生讲的更有吸引力。</p>
<p>《明太祖朱元璋》</p>
<p>朱元璋应该是算是中国历史上唯一一位真正从平民走到皇帝的人，他的心狠手辣，他的老谋深算，他是明朝的开过皇帝，却也为明朝定下了百年的基调，让明朝成为一个特殊的历史王朝。</p>
<p>《五百年来王阳明》</p>
<p>一直对阳明心学充满敬佩，“知行合一”不是一句话，而是一个长久的修炼过程。</p>
<h2><span id="sheng-huo">生活</span><a href="#sheng-huo" class="header-anchor">#</a></h2><p>生活琐事太多，烦恼也不少，不痛快都让他随风去，只留下美好的点滴！</p>
<p>4月出差中旬由于在出差，清明节放假也在上班，夫人从未去过北京，借此让她到北京游玩两天！</p>
<p>4月份出差工作强度实在太大，领导特意准了两天假，将近五一就和五一连在一起和夫人第一次出国游玩！</p>
<p>五一的泰国真的很热，时间虽然不长，沙滩阳光，佛教寺庙，异域风情依然让人回味无穷！</p>
<p>7月份房子终于交付，8月份开始装修，过程真的让人头疼，同时又要出差，总感觉装修差了点东西，我没时间买家具，因此想要早点住进自己家的愿望还得继续往后推！ </p>
<p><img src="/2019/12/27/我的2019/3.jpg" alt></p>
<p>今年因为出差，看的电影很少，希望明年能够有更多的时间可以多看看电影多看看书，增长见识。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>mina</title>
    <url>/2019/12/25/mina/</url>
    <content><![CDATA[<p><a href="http://mina.apache.org/" target="_blank" rel="noopener">mina官网</a></p>
<p>Apache MINA是一个网络应用程序框架，可帮助用户轻松开发高性能和高可伸缩性的网络应用程序。它通过Java NIO通过各种传输（例如TCP / IP和UDP / IP）提供了一个抽象的事件驱动的异步API。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
        <category>mina</category>
      </categories>
      <tags>
        <tag>mina</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm调优-监控</title>
    <url>/2019/12/23/jvm%E8%B0%83%E4%BC%98-%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->
<ul>
<li><a href="#jstat">jstat</a><ul>
<li><a href="#yu-fa">语法</a></li>
<li><a href="#generaloption">generalOption</a></li>
<li><a href="#outputotions">outputOtions</a></li>
</ul>
</li>
<li><a href="#jps">jps</a><ul>
<li><a href="#yu-fa-1">语法</a></li>
<li><a href="#jie-shi">解释</a></li>
<li><a href="#options">Options</a></li>
<li><a href="#host-identifier-hostid">Host Identifier（Hostid）</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<h2><span id="jstat">jstat</span><a href="#jstat" class="header-anchor">#</a></h2><p>监控jvm(Hotspot)性能统计信息，<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html" target="_blank" rel="noopener">查看官方网站</a></p>
<h3><span id="yu-fa">语法</span><a href="#yu-fa" class="header-anchor">#</a></h3><p><strong>jstat</strong> [ <em>generalOption</em> | <em>outputOptions vmid</em> [ <em>interval</em>[s|ms] [ <em>count</em> ] ]</p>
<h3><span id="generaloption">generalOption</span><a href="#generaloption" class="header-anchor">#</a></h3><p>单个常规命令 </p>
<ul>
<li><p><code>-help</code></p>
<p>展示帮助信息</p>
</li>
<li><p><code>-options</code></p>
<p>展示所有的静态列表选项</p>
</li>
</ul>
<h3><span id="outputotions">outputOtions</span><a href="#outputotions" class="header-anchor">#</a></h3><p>输出选项决定了<code>jstat</code>命令输出的内容和格式，必须有一个<code>statOption</code>，后面可以任意追加<code>-h -t -j</code>参数。</p>
<p>输出内容以表格形式展现，第一行表示每列的意思.</p>
<ul>
<li><p><code>-h n</code></p>
<p>每多少行显示一次列表头，默认是0，表示只在第一行显示一次列表头</p>
<p><img src="/2019/12/23/jvm调优-监控/jstat-01.png" alt></p>
<p><img src="/2019/12/23/jvm调优-监控/jstat-02.png" alt></p>
</li>
<li><p><code>-t</code></p>
<p>在输出内容的第一列显示<code>timestamp</code>列，表示当前JVM启动的时间</p>
<p><img src="/2019/12/23/jvm调优-监控/jstat-05.png" alt></p>
</li>
<li><p><code>-J</code><em>javaOptions</em></p>
<p>将<code>javaOptions</code>参数传递给Java应用。<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#CBBFHAJA" target="_blank" rel="noopener">查看完整Java参数</a></p>
</li>
</ul>
<h4><span id="statoption"><code>statOption</code></span><a href="#statoption" class="header-anchor">#</a></h4><h5><span id="class"><code>class</code></span><a href="#class" class="header-anchor">#</a></h5><p>显示有关类加载器的信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -class 8144</span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     Time</span><br><span class="line"> 80093 75156.4    20263 14311.9     373.09</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>Loaded</code>：已加载的类个数</p>
</li>
<li><p><code>Bytes</code>：已加载的字节数（kb）</p>
</li>
<li><p><code>Unloaded</code>：未加载的类个数</p>
</li>
<li><p><code>Bytes</code>：未加载的字节数（kb）</p>
</li>
<li><p><code>Time</code>：Time spent performing class loading and unloading operations</p>
</li>
<li><p><code>compiler</code>Java HotSpot VM即时编译器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -compiler 8144 1s 20</span><br><span class="line">Compiled Failed Invalid   Time   FailedType FailedMethod</span><br><span class="line">  120670      6       0  2088.20          1 com/intellij/ide/ui/laf/darcula/ui/DarculaProgressBarUI paintIndeterminate</span><br><span class="line">  120670      6       0  2088.20          1 com/intellij/ide/ui/laf/darcula/ui/DarculaProgressBarUI paintIndeterminate</span><br><span class="line">  120670      6       0  2088.20          1 com/intellij/ide/ui/laf/darcula/ui/DarculaProgressBarUI paintIndeterminate</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Compiled</code>：已执行的编译数</li>
<li><code>Failed</code>：失败的编译数</li>
<li><code>Invalid</code>：无效的编译数</li>
<li><code>Time</code>：执行编译的总时间</li>
<li><code>FailedType</code>：最后一次失败编译的编译类型</li>
<li><code>FailedMethod</code>：最后一次编译失败的类名和方法</li>
</ul>
</li>
</ul>
<h5><span id="gc"><code>gc</code></span><a href="#gc" class="header-anchor">#</a></h5><p> 堆垃圾收集的统计信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gc 8144</span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">17472.0 17472.0  0.0    0.0   139776.0 136633.8  349568.0   209736.5  221952.0 213554.6  0.0    0.0     4038  100.549  290   258.786  359.335</span><br></pre></td></tr></table></figure>
<ul>
<li><code>S0C</code>：survivor 0区的容量（kb）</li>
<li><code>S1C</code>：survivor 1区的容量（kb）</li>
<li><code>S0U</code>：survivor 0区的使用量（kb）</li>
<li><code>S1U</code>：survivor 1区的使用量（kb）</li>
<li><code>EC</code>：伊甸园（eden ）区的容量（kb）</li>
<li><code>EU</code>：伊甸园（eden ）区的使用量（kb）</li>
<li><code>OC</code>：老年代的容量（kb）</li>
<li><code>OU</code>：老年代的使用量（kb）</li>
<li><code>MC</code>：Metaspace 的容量（kb）</li>
<li><code>MU</code>：Metaspace 的使用量（kb）</li>
<li><code>CCSC</code>：压缩类空间容量Compressed class space capacity（kb）</li>
<li><code>CCSU</code>：压缩类空间使用量Compressed class space used（kb）</li>
<li><code>YGC</code>：青年代垃圾收集执行次数</li>
<li><code>YGCT</code>：青年代垃圾收集的时间</li>
<li><code>FGC</code>：full gc的执行册书</li>
<li><code>FGCT</code>：full gc的执行时间</li>
<li><code>GCT</code>：gc执行总时间</li>
</ul>
<h5><span id="gccapacity"><code>gccapacity</code></span><a href="#gccapacity" class="header-anchor">#</a></h5><p>各年代内存池和空间容量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gccapacity 8144</span><br><span class="line"> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC</span><br><span class="line"> 43648.0 174720.0 174720.0 17472.0 17472.0 139776.0    87424.0   349568.0   349568.0   349568.0      0.0 222592.0 221952.0      0.0      0.0      0.0   4044   290</span><br></pre></td></tr></table></figure>
<ul>
<li><code>NGCMN</code>：最小青年代容量（kb）</li>
<li><code>NGCMX</code>：最大青年代容量（kb）</li>
<li><code>NGC</code>：当前青年代大小（kb）</li>
<li><code>S0C</code>：survivor 0空间容量（kb）</li>
<li><code>S1C</code>：survivor 1空间容量（kb）</li>
<li><code>EC</code>：eden空间容量（kb）</li>
<li><code>OGCMN</code>：最小老年代容量（kb）</li>
<li><code>OGCMX</code>：最大老年代容量（kb）</li>
<li><code>OGC</code>：当前老年代容量（kb）</li>
<li><code>OC</code>：old空间容量（kb）</li>
<li><code>MCMN</code>：最小metaspace 容量（kb）</li>
<li><code>MCMX</code>：最大metaspace 容量（kb）</li>
<li><code>MC</code>：metaspace 容量（kb）</li>
<li><code>CCSMN</code>：最小压缩类空间容量（kb）</li>
<li><code>CCSMX</code>：最大压缩类空间容量（kb）</li>
<li><code>CCSC</code>：压缩类空间容量（kb）</li>
<li><code>YGC</code>：年轻代GC次数</li>
<li><code>FGC</code>：full GC次数</li>
</ul>
<h5><span id="gccause"><code>gccause</code></span><a href="#gccause" class="header-anchor">#</a></h5><p>这个参数展示的垃圾收集信息与<code>-gcutil</code>基本一致，只是多了最后两列</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gccause 8144</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC</span><br><span class="line">  0.00   1.30  89.02  61.17  96.22      -   4063  101.119   291  261.206  362.325 Allocation Failure   No GC</span><br></pre></td></tr></table></figure>
<ul>
<li><code>LGCC</code>：上一次垃圾收集发生的原因</li>
<li><code>GCC</code>：本次垃圾收集发生的原因</li>
</ul>
<p>其他列查看<code>-gctuil</code></p>
<h5><span id="gcnew"><code>gcnew</code></span><a href="#gcnew" class="header-anchor">#</a></h5><p>青年代统计信息（New generation statistics）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcnew 8144</span><br><span class="line"> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT</span><br><span class="line">17472.0 17472.0  316.7    0.0  6   6 8736.0 139776.0  88239.2   4064  101.137</span><br></pre></td></tr></table></figure>
<p>其中 <code>S0C</code> <code>S1C</code> <code>S0U</code> <code>S1U</code> <code>YGC</code> <code>YGCT</code> 与前面所述一致</p>
<ul>
<li><code>TT</code>：晋升阈值（Tenuring threshold）</li>
<li><code>MTT</code>：最大晋升阈值（Tenuring threshold）</li>
<li><code>DSS</code>：期望servivor（幸存区）大小（kb）</li>
<li><code>EC</code>：eden空间容量（kb）</li>
<li><code>EU</code>：eden空间使用量（kb）</li>
</ul>
<h5><span id="gcnewcapacity"><code>gcnewcapacity</code></span><a href="#gcnewcapacity" class="header-anchor">#</a></h5><p>青年代空间大小统计信息（New generation space size statistics）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcnewcapacity 8144</span><br><span class="line">  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC</span><br><span class="line">   43648.0   174720.0   174720.0  17472.0  17472.0  17472.0  17472.0   139776.0   139776.0  4072   291</span><br></pre></td></tr></table></figure>
<p>其中 <code>NGCMN</code> <code>NGCMX</code> <code>NGC</code> <code>S0C</code> <code>S1C</code> <code>S0U</code> <code>S1U</code> <code>EC</code> <code>YGC</code> <code>YGCT</code> 与前面所述一致。</p>
<ul>
<li><code>S0CMX</code>：最大survivor 0 空间容量</li>
<li><code>S1CMX</code>：最大survivor 1 空间容量</li>
<li><code>ECMX</code>：最大eden空间容量</li>
</ul>
<h5><span id="gcold"><code>gcold</code></span><a href="#gcold" class="header-anchor">#</a></h5><p>老年代和metaspace behavior统计信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcold 8144</span><br><span class="line">   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT</span><br><span class="line">221952.0 213554.9      0.0      0.0    349568.0    213839.2   4073   291  261.206  362.499</span><br></pre></td></tr></table></figure>
<p>具体每列表示信息参考其他章节介绍</p>
<h5><span id="gcoldcapacity"><code>gcoldcapacity</code></span><a href="#gcoldcapacity" class="header-anchor">#</a></h5><p>老年代大小统计信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcoldcapacity 8144</span><br><span class="line">   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT</span><br><span class="line">    87424.0    349568.0    349568.0    349568.0  4073   292  264.125  365.418</span><br></pre></td></tr></table></figure>
<p>具体每列表示信息参考其他章节介绍</p>
<h5><span id="gcmetacapacity"><code>gcmetacapacity</code></span><a href="#gcmetacapacity" class="header-anchor">#</a></h5><p>metaspace大小统计信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcmetacapacity 8144</span><br><span class="line">   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT</span><br><span class="line">       0.0   222592.0   221952.0        0.0        0.0        0.0  4073   292  264.125  365.418</span><br></pre></td></tr></table></figure>
<h5><span id="gcutil"><code>gcutil</code></span><a href="#gcutil" class="header-anchor">#</a></h5><p>垃圾收集统计信息汇总。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcutil 8144</span><br><span class="line"> S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line"> 1.59   0.00  55.11  61.15  96.22      -   4074  101.313   292  264.125  365.437</span><br></pre></td></tr></table></figure>
<ul>
<li><code>S0</code>：survivor 0 空间使用百分比</li>
<li><code>S1</code>：survivor 1 空间使用百分比</li>
<li><code>E</code>： eden空间使用百分比</li>
<li><code>M</code>：metaspace空间使用百分比</li>
<li><code>CCS</code>：压缩类空间使用百分比</li>
<li><code>YGC</code>：青年代垃圾收集次数</li>
<li><code>YGCT</code>：青年代垃圾收集时间</li>
<li><code>FGC</code>：full GC次数</li>
<li><code>FGCT</code>：full GC时间</li>
<li><code>GCT</code>：垃圾收集总时间</li>
</ul>
<h5><span id="printcompilation"><code>printcompilation</code></span><a href="#printcompilation" class="header-anchor">#</a></h5><p>Java HotSpot 虚拟机编译方法统计信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -printcompilation 8144</span><br><span class="line">Compiled  Size  Type Method</span><br><span class="line">  120686     17    1 com/intellij/psi/impl/source/PsiEnumConstantImpl$MyReference &lt;init&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Compiled</code>：最近的编译方法执行的编译数（Number of compilation tasks performed by the most recently compiled method）</li>
<li><code>Size</code>：最近编译的方法的字节码的字节数（ Number of bytes of byte code of the most recently compiled method）</li>
<li><code>Type</code>：最近编译方法的编译类型</li>
<li><code>Method</code>：最近编译方法的类名和方法。类路径中用<code>/</code>代替<code>.</code>，这个两个字段的格式与HotSpot的 <code>-XX:+PrintCompilation</code>参数一致。</li>
</ul>
<h2><span id="jps">jps</span><a href="#jps" class="header-anchor">#</a></h2><p>列出目标系统上的Java虚拟机，即Java进程。</p>
<h3><span id="yu-fa">语法</span><a href="#yu-fa" class="header-anchor">#</a></h3><p><strong>jps</strong> [ <em>options</em> ] [ <em>hostid</em> ]</p>
<h3><span id="jie-shi">解释</span><a href="#jie-shi" class="header-anchor">#</a></h3><ul>
<li>用于列出HotSpot虚拟机；</li>
<li>需要有访问权限才能显示在列表中；</li>
<li>如果没有指定<code>hostid</code>，列出本机的JVMs；</li>
<li>指定了<code>hostid</code>，则使用指定的协议和端口搜索目标主机上的JVMs；</li>
<li><code>jps</code>命令为搜索到的JVMs会列出本地的JVM标识或者<code>lvmid</code>；如果没有任何指定，则是<code>lmid</code>，加上应用或者jar文件名称的简写（省略包信息或者jar的路径）；</li>
<li><code>jps</code>通过Java启动器来查找main方法的类名和参数，如果JVM是自定义启动器，main方法的类或者jar文件的名称和参数不可用，输出 <code>Unknown</code>；</li>
<li><code>jps</code>列出JVMs受执行该命令的用户权限限制；</li>
</ul>
<h3><span id="options">Options</span><a href="#options" class="header-anchor">#</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps</span><br><span class="line">1040 Jps</span><br><span class="line">8144</span><br><span class="line">15176 JConsole</span><br><span class="line">16456 jar</span><br></pre></td></tr></table></figure>
<h4><span id="q"><code>q</code></span><a href="#q" class="header-anchor">#</a></h4><p>禁止输出main方法的类或者jar文件的名称和参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps -q</span><br><span class="line">8144</span><br><span class="line">13172</span><br><span class="line">15176</span><br><span class="line">16456</span><br></pre></td></tr></table></figure>
<h4><span id="m"><code>m</code></span><a href="#m" class="header-anchor">#</a></h4><p>输出main方法的参数，JVM自带参数不会输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps -m</span><br><span class="line">8144</span><br><span class="line">15176 JConsole</span><br><span class="line">16456 jar -Dabc.config.file=appCfg/abc-consumer.xml</span><br><span class="line">19240 Jps -m</span><br></pre></td></tr></table></figure>
<h4><span id="l"><code>l</code></span><a href="#l" class="header-anchor">#</a></h4><p>输出应用主类的完整包路径名称或者jar文件的全路径名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps -l</span><br><span class="line">8144</span><br><span class="line">11076 sun.tools.jps.Jps</span><br><span class="line">15176 sun.tools.jconsole.JConsole</span><br><span class="line">16456 ApacheJMeter.jar</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/23/jvm调优-监控/jps-01.png" alt></p>
<h4><span id="v"><code>v</code></span><a href="#v" class="header-anchor">#</a></h4><p>输出JVM的参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps -v</span><br><span class="line">8144  -Xms128m -Xmx512m -XX:ReservedCodeCacheSize=240m -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -ea -Dsun.io.useCanonCaches=false -Djava.net.preferIPv4Stack=true -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow -Dfile.encoding=UTF-8 -Djb.vmOptionsFile=D:\path\IntelliJIDEA2016.2.4\bin\idea.exe.vmoptions -Xbootclasspath/a:D:\path\IntelliJIDEA2016.2.4\lib\boot.jar -Didea.paths.selector=IntelliJIdea2016.2 -Didea.jre.check=true -XX:ErrorFile=C:\Users\elf\java_error_in_idea_%p.log -XX:HeapDumpPath=C:\Users\user\java_error_in_idea.hprof</span><br><span class="line">13752 Jps -Dapplication.home=D:\path\Java\java1.8\64_jdk1.8.0_40 -Xms8m</span><br><span class="line">15176 JConsole -Dapplication.home=D:\path\Java\java1.8\64_jdk1.8.0_40 -Xms8m -Djconsole.showOutputViewer</span><br><span class="line">16456 jar -XX:+HeapDumpOnOutOfMemoryError -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:G1ReservePercent=20 -Djava.security.egd=file:/dev/urandom -Duser.language=en -Duser.region=EN</span><br></pre></td></tr></table></figure>
<h4><span id="v"><code>V</code></span><a href="#v" class="header-anchor">#</a></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps -V</span><br><span class="line">8144</span><br><span class="line">19332 Jps</span><br><span class="line">15176 JConsole</span><br><span class="line">16456 jar</span><br></pre></td></tr></table></figure>
<p><code>-J</code><em>option</em></p>
<p>将<code>options</code>参数传递给Java应用。<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#CBBFHAJA" target="_blank" rel="noopener">查看完整Java参数</a></p>
<h3><span id="host-identifier-hostid">Host Identifier（Hostid）</span><a href="#host-identifier-hostid" class="header-anchor">#</a></h3><p>语法：<code>[protocol:][[//]hostname][:port][/servername]</code></p>
<h4><span id="protocol">protocol</span><a href="#protocol" class="header-anchor">#</a></h4><p>通信协议，如果<code>protocol</code>和<code>hostname</code>都不指定，默认是特定平台的、优化的、本地协议；如果不指定<code>protocol</code>，指定<code>hostname</code>，默认协议是<code>rmi</code>；</p>
<h4><span id="hostname">hostname</span><a href="#hostname" class="header-anchor">#</a></h4><p>目标主机的主机名或者IP地址，不指定<code>hostname</code>，则默认是<code>localhost</code>；</p>
<h4><span id="port">port</span><a href="#port" class="header-anchor">#</a></h4><p>与远程服务通信的端口。如果不指定<code>hostname</code>或者<code>protocol</code>指定为本地协议，那么忽略<code>port</code>；否则端口依赖于实现方式，对于默认的<code>rmi</code>协议，<code>port</code>是远程主机上的rmiregistry端口号；如果不指定<code>port</code>，<code>rmi</code>协议的默认端口是<code>1099</code>；</p>
<h4><span id="servername">servername</span><a href="#servername" class="header-anchor">#</a></h4><p>依赖于实现方式。本地协议忽略<code>servername</code>；<code>rmi</code>协议，<code>servername</code>是一个字符串，代表远程主机上RMI对象的名称，更多信息请查看<code>jstatd</code>命令的<code>-n</code>说明。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JAVA</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2019/12/23/jvm%E8%B0%83%E4%BC%98-%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->
<ul>
<li><a href="#jmap">jmap</a><ul>
<li><a href="#yu-fa">语法</a></li>
<li><a href="#jie-shi">解释</a></li>
<li><a href="#options">Options</a><ul>
<li><a href="#no-option"><code>&lt;no option&gt;</code></a></li>
<li><a href="#dump-live-format-b-file-filename"><code>-dump:[live,] format=b, file=*filename*</code></a></li>
<li><a href="#finalizerinfo"><code>finalizerinfo</code></a></li>
<li><a href="#heap">heap</a></li>
<li><a href="#histo-live">histo[:live]</a></li>
<li><a href="#clstats">clstats</a></li>
<li><a href="#f">F</a></li>
<li><a href="#h-help">h help</a></li>
<li><a href="#j-flag">-J<em>flag</em></a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<h1><span id="jmap">jmap</span><a href="#jmap" class="header-anchor">#</a></h1><p>输出进程、核心文件或远程调试服务器的共享对象内存或者堆内训的相信信息。</p>
<h2><span id="yu-fa">语法</span><a href="#yu-fa" class="header-anchor">#</a></h2><p><strong>jmap</strong> [ <em>options</em> ] <em>pid</em><br><strong>jmap</strong> [ <em>options</em> ] <em>executable</em> <em>core</em><br><strong>jmap</strong> [ <em>options</em> ] [ <em>pid</em> ] <em>server-id</em>@ ] <em>remote-hostname-or-IP</em></p>
<h2><span id="jie-shi">解释</span><a href="#jie-shi" class="header-anchor">#</a></h2><ul>
<li><p>executable</p>
<p>产生核心转储的Java可执行文件</p>
</li>
<li><p>core</p>
<p>打印内存信息的核心文件</p>
</li>
<li><p>remote-hostname-or-IP</p>
<p>远程调试服务器的<code>hostname</code>或者<code>IP</code>地址。查看<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jsadebugd.html#BHBHHJCA" target="_blank" rel="noopener">jsadebug</a></p>
</li>
<li><p>server-id</p>
<p>远程服务器上有多个调试服务器时，提供的调式服务器唯一ID</p>
</li>
<li><p>通过<code></code>-J-d64<code>可以指定</code>jmap`运行在64位JVM上</p>
<p><code></code>jmap<code></code>-J-d64 -heap pid`</p>
</li>
</ul>
<h2><span id="options">Options</span><a href="#options" class="header-anchor">#</a></h2><h3><span id="lt-no-option-gt"><code>&lt;no option&gt;</code></span><a href="#lt-no-option-gt" class="header-anchor">#</a></h3><p>没有option参数，<code>jmap</code>命令输出共享对象映射信息。会打印出JVM中所有共享对象的起始地址、映射大小、文件的全路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jmap 5208</span><br><span class="line">Attaching to process ID 5208, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.40-b25</span><br><span class="line">0x0000000056140000      8716K   D:\path\Java\java1.8\64_jdk1.8.0_40\jre\bin\server\jvm.dll</span><br><span class="line">0x00000000569d0000      840K    D:\path\Java\java1.8\64_jdk1.8.0_40\jre\bin\msvcr100.dll</span><br><span class="line">0x0000000056e10000      52K     D:\path\Java\java1.8\64_jdk1.8.0_40\jre\bin\management.dll</span><br><span class="line">0x0000000056e20000      68K     D:\path\Java\java1.8\64_jdk1.8.0_40\jre\bin\nio.dll</span><br><span class="line">0x0000000056e40000      104K    D:\path\Java\java1.8\64_jdk1.8.0_40\jre\bin\net.dll</span><br><span class="line">0x0000000056e60000      88K     D:\path\Java\java1.8\64_jdk1.8.0_40\jre\bin\zip.dll</span><br></pre></td></tr></table></figure>
<h3><span id="dump-live-format-b-file-filename"><code>-dump:[live,] format=b, file=*filename*</code></span><a href="#dump-live-format-b-file-filename" class="header-anchor">#</a></h3><ul>
<li>将Java堆信息存入filename指定文件名的<code>hprof</code>二进制文件中；</li>
<li><code>live</code> 是可选操作，指定<code>live</code>表示只保存活跃对象；</li>
<li>是<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jhat.html#CIHIEAEE" target="_blank" rel="noopener"><code>jhat</code></a>命令可以读取文件；</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jmap -dump:live,format=b,file=test 5208</span><br><span class="line">Dumping heap to C:\user\username\Desktop\test ...</span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jhat  C:\\Users\\username\\Desktop\\test.hprof</span><br><span class="line">Reading from C:\Users\username\Desktop\test.hprof...</span><br><span class="line">Dump file created Fri Dec 27 13:20:01 CST 2019</span><br><span class="line">Snapshot read, resolving...</span><br><span class="line">Resolving 502739 objects...</span><br><span class="line">Chasing references, expect 100 dots....................................................................................................</span><br><span class="line">Eliminating duplicate references....................................................................................................</span><br><span class="line">Snapshot resolved.</span><br><span class="line">Started HTTP server on port 7000</span><br><span class="line">Server is ready.</span><br></pre></td></tr></table></figure>
<p>访问<a href="localhost:7000" target="_blank" rel="noopener">localhost:7000</a>可以查看文件具体内容</p>
<p><img src="/2019/12/23/jvm调优-故障处理/jmap-1.png" alt></p>
<h3><span id="finalizerinfo"><code>finalizerinfo</code></span><a href="#finalizerinfo" class="header-anchor">#</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jmap -finalizerinfo 10864</span><br><span class="line">Attaching to process ID 10864, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.40-b25</span><br><span class="line">Number of objects pending for finalization: 0</span><br></pre></td></tr></table></figure>
<h3><span id="heap">heap</span><a href="#heap" class="header-anchor">#</a></h3><p>输出堆垃圾回收的摘要信息，配置信息，哥年代的堆使用信息以及 interned Strings的是数量和大小。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jmap -heap 10864</span><br><span class="line">Attaching to process ID 10864, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.40-b25</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Garbage-First (G1) GC with 4 thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = 40</span><br><span class="line">   MaxHeapFreeRatio         = 70</span><br><span class="line">   MaxHeapSize              = 1073741824 (1024.0MB)</span><br><span class="line">   NewSize                  = 1363144 (1.2999954223632812MB)</span><br><span class="line">   MaxNewSize               = 643825664 (614.0MB)</span><br><span class="line">   OldSize                  = 5452592 (5.1999969482421875MB)</span><br><span class="line">   NewRatio                 = 2</span><br><span class="line">   SurvivorRatio            = 8</span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         = 268435456 (256.0MB)</span><br><span class="line">   G1HeapRegionSize         = 1048576 (1.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">G1 Heap:</span><br><span class="line">   regions  = 1024</span><br><span class="line">   capacity = 1073741824 (1024.0MB)</span><br><span class="line">   used     = 402117216 (383.4888610839844MB)</span><br><span class="line">   free     = 671624608 (640.5111389160156MB)</span><br><span class="line">   37.45008409023285% used</span><br><span class="line">G1 Young Generation:</span><br><span class="line">Eden Space:</span><br><span class="line">   regions  = 341</span><br><span class="line">   capacity = 572522496 (546.0MB)</span><br><span class="line">   used     = 357564416 (341.0MB)</span><br><span class="line">   free     = 214958080 (205.0MB)</span><br><span class="line">   62.45421245421245% used</span><br><span class="line">Survivor Space:</span><br><span class="line">   regions  = 31</span><br><span class="line">   capacity = 32505856 (31.0MB)</span><br><span class="line">   used     = 32505856 (31.0MB)</span><br><span class="line">   free     = 0 (0.0MB)</span><br><span class="line">   100.0% used</span><br><span class="line">G1 Old Generation:</span><br><span class="line">   regions  = 15</span><br><span class="line">   capacity = 468713472 (447.0MB)</span><br><span class="line">   used     = 10998368 (10.488861083984375MB)</span><br><span class="line">   free     = 457715104 (436.5111389160156MB)</span><br><span class="line">   2.34650136107033% used</span><br><span class="line"></span><br><span class="line">22533 interned Strings occupying 2048048 bytes.</span><br></pre></td></tr></table></figure>
<h3><span id="histo-live">histo[:live]</span><a href="#histo-live" class="header-anchor">#</a></h3><ul>
<li>将对信息以列表（histogram）的形式输出；</li>
<li>输出每个类的信息：对象个数、内存字节数、全路径；</li>
<li>如果指定<code>live</code>，只统计活跃对象信息（从以下输出可以看到对象数是不同的）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jmap -histo 10864</span><br><span class="line"></span><br><span class="line"> num     #instances         #bytes  class name</span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:        887212      198868312  [C</span><br><span class="line">   2:        423381       89093320  [B</span><br><span class="line">   3:         46645       26477944  [I</span><br><span class="line">   4:        542764       13026336  java.lang.String</span><br><span class="line">   5:        128620       12347520  sun.util.calendar.Gregorian$Date</span><br><span class="line">   6:        128391       10271280  java.util.zip.ZipEntry</span><br><span class="line">   7:         92913        4668984  [Ljava.lang.Object;</span><br><span class="line">   8:        112727        2705448  java.util.Date</span><br><span class="line">   9:         46899        2626344  java.util.stream.ReferencePipeline$Head</span><br><span class="line">  10:         48749        1949960  java.security.AccessControlContext</span><br><span class="line">  11:         82135        1814832  [Ljava.lang.Class;</span><br><span class="line">  12:         14411        1632616  java.lang.Class</span><br><span class="line">  13:         50674        1621568  java.util.HashMap$Node</span><br><span class="line">  14:         46875        1500000  java.util.Spliterators$ArraySpliterator</span><br><span class="line">  15:         16237        1314488  [Ljava.util.HashMap$Node;</span><br><span class="line">  16:         14048        1236224  java.lang.reflect.Method</span><br><span class="line">  17:         35411        1133152  java.util.concurrent.ConcurrentHashMap$Node</span><br><span class="line">  18:         46864        1124736  java.util.stream.MatchOps$$Lambda$45/319558327</span><br><span class="line">  19:         40542         973008  java.lang.StringBuilder</span><br><span class="line">  20:         19482         935136  java.util.HashMap</span><br><span class="line">  21:         26831         870296  [Ljava.security.ProtectionDomain;</span><br><span class="line">  22:         33581         805944  org.apache.commons.collections.map.ListOrderedMap$ListOrderedMapEntry</span><br><span class="line">  23:          9684         772896  [S</span><br><span class="line">  24:         46864         749824  org.apache.jorphan.reflect.ClassFinder$ExtendsClassFilter$$Lambda$44/1397381784</span><br><span class="line">  25:         20407         653024  java.util.ArrayList$Itr</span><br><span class="line">  26:         10000         640000  java.awt.event.InvocationEvent</span><br><span class="line">  27:         18944         606208  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node</span><br><span class="line">  28:         18127         580064  java.util.Hashtable$Entry</span><br><span class="line">  29:         17336         554752  java.beans.PropertyChangeEvent</span><br><span class="line">  30:         13686         547440  java.lang.ref.Finalizer</span><br><span class="line">  31:         31829         509264  java.lang.Object</span><br><span class="line">  32:         19459         467016  java.util.ArrayList</span><br><span class="line">....................</span><br><span class="line">3770:             1             16  sun.text.normalizer.NormalizerImpl$FCDTrieImpl</span><br><span class="line">3771:             1             16  sun.text.normalizer.NormalizerImpl$NormTrieImpl</span><br><span class="line">3772:             1             16  sun.util.CoreResourceBundleControl</span><br><span class="line">3773:             1             16  sun.util.calendar.Gregorian</span><br><span class="line">3774:             1             16  sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar</span><br><span class="line">3775:             1             16  sun.util.locale.provider.AuxLocaleProviderAdapter$NullProvider</span><br><span class="line">3776:             1             16  sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNamesMapGetter</span><br><span class="line">3777:             1             16  sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter</span><br><span class="line">3778:             1             16  sun.util.locale.provider.CalendarNameProviderImpl$LengthBasedComparator</span><br><span class="line">3779:             1             16  sun.util.locale.provider.SPILocaleProviderAdapter</span><br><span class="line">3780:             1             16  sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter</span><br><span class="line">3781:             1             16  sun.util.resources.LocaleData</span><br><span class="line">3782:             1             16  sun.util.resources.LocaleData$LocaleDataResourceBundleControl</span><br><span class="line">Total       3659918      405059648</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jmap -histo:live 10864</span><br><span class="line"></span><br><span class="line"> num     #instances         #bytes  class name</span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:          7681        6404584  [B</span><br><span class="line">   2:         74426        6304912  [C</span><br><span class="line">   3:         13259        4714608  [I</span><br><span class="line">   4:         72674        1744176  java.lang.String</span><br><span class="line">   5:         14411        1632616  java.lang.Class</span><br><span class="line">   ......................</span><br><span class="line">   3034:             1             16  sun.util.locale.provider.SPILocaleProviderAdapter</span><br><span class="line">3035:             1             16  sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter</span><br><span class="line">3036:             1             16  sun.util.resources.LocaleData</span><br><span class="line">3037:             1             16  sun.util.resources.LocaleData$LocaleDataResourceBundleControl</span><br><span class="line">Total        561269       36751776</span><br></pre></td></tr></table></figure>
<h3><span id="clstats">clstats</span><a href="#clstats" class="header-anchor">#</a></h3><ul>
<li>输出Java堆中类加载器的统计信息；</li>
<li>输出每个类加载器的信息：名称，活动程度，地址，父类加载器，已加载的类的数量和大小；</li>
<li>统计会比较耗费时间；</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jmap -clstats 10864</span><br><span class="line">Attaching to process ID 10864, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.40-b25</span><br><span class="line">finding class loader instances ..done.</span><br><span class="line">computing per loader stat ..done.</span><br><span class="line">please wait.. computing liveness..........................................................liveness analysis may be inaccurate ...</span><br><span class="line">class_loader    classes bytes   parent_loader   alive?  type</span><br><span class="line"></span><br><span class="line">&lt;bootstrap&gt;     3835    6981748   null          live    &lt;internal&gt;</span><br><span class="line">0x00000000c02ccba8      1       1471    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c1aa4420      1       878     0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c02cd820      1       1472    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c202e190      1       878       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c1c3e350      1       878       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c1dbe048      1       1472    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c02ccd38      1       1472    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c134d6a0      1       1471    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c03acea0      1       1471      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c02cc7b0      10587   13944043        0x00000000c0300be8      live    org/apache/jmeter/DynamicClassLoader@0x0000000100060218</span><br><span class="line">0x00000000c1e0fe40      1       878     0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c10256a0      1       1471    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c02cc888      1       1481      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c19dc138      1       1471      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c19dcb38      1       1473      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c19e6fb8      1       1473      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c19aa9b0      1       1473      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c1aa5000      1       878       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c02cce00      1       1472      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c0fd55d0      12      37189   0x00000000c0300be8      live    sun/reflect/misc/MethodUtil@0x00000001001e1028</span><br><span class="line">0x00000000c0ef5fc0      1       878       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c02cca18      1       1472    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c0270990      0       0       0x00000000c0300be8      live    java/util/ResourceBundle$RBClassLoader@0x00000001000f2f58</span><br><span class="line">0x00000000c0fd4ec0      1       878     0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c0ef6450      1       1471    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c1025440      1       878       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c02cd8e8      1       1472    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c037f870      1       1471    0x00000000c02ccec8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c1eac520      1       878       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c1fb10b0      1       878     0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c02ccae0      1       1472    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c03d5370      1       878       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c10a22d8      1       1471      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c23a9668      1       878       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c0300be8      37      144387  0x00000000c02ccec8      live    sun/misc/Launcher$AppClassLoader@0x000000010000f668</span><br><span class="line">0x00000000c02ccc70      1       1471    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c13df1e0      1       1472      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c1522db0      1       1471      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c202e8e0      1       878       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c02ccec8      152     345291    null          live    sun/misc/Launcher$ExtClassLoader@0x000000010000fa10</span><br><span class="line">0x00000000c20611e0      1       1471    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c0ef6108      1       878       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c19e2e70      1       1473      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c1fe6910      1       878     0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c206a068      1       878     0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c10a1ef8      1       878       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c0fd5088      1       889     0x00000000c0fd55d0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c13d75c8      1       1473      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c1e25298      1       1471    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c02cc950      1       1471    0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000c23c42c0      1       878     0x00000000c02cc7b0      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line"></span><br><span class="line">total = 52      14669   21509096            N/A         alive=6, dead=46            N/A</span><br></pre></td></tr></table></figure>
<h3><span id="f">F</span><a href="#f" class="header-anchor">#</a></h3><p>强制输出</p>
<ul>
<li>使用<code>jmap -dump</code>或者<code>jmap -histo</code>命令时，如果进程没有响应，可以使用<code>-F</code>强制输出；</li>
<li><code>live</code>模式下不能使用<code>-F</code>强制输出；</li>
</ul>
<h3><span id="h-help">h help</span><a href="#h-help" class="header-anchor">#</a></h3><p><code>-h</code>与<code>-help</code>都是输出帮助信息的指令</p>
<h3><span id="jflag">-J<em>flag</em></span><a href="#jflag" class="header-anchor">#</a></h3><p>将<code>flag</code>信息传递给运行<code>jamp</code>命令的虚拟机</p>
</div>]]></content>
      <categories>
        <category>技术</category>
        <category>JAVA</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx/OpenResty/Kong</title>
    <url>/2019/12/18/Nginx-OpenResty-Kong/</url>
    <content><![CDATA[<p><a href="http://nginx.org/" target="_blank" rel="noopener">nginx</a></p>
<p><img src="/2019/12/18/Nginx-OpenResty-Kong/nginx中常见的几个元素关系图.png" alt></p>
<p><a href="http://openresty.org/en/" target="_blank" rel="noopener">openresty</a></p>
<p><a href="http://openresty.org/en/" target="_blank" rel="noopener">kong</a></p>
<p><img src="/2019/12/18/Nginx-OpenResty-Kong/kong中常见的几个要素关系图.png" alt></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>openresty</tag>
        <tag>kong</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx-config之ngx_http_core_module</title>
    <url>/2019/12/17/nginx-config%E4%B9%8Bngx-http-core-module/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->
<ul>
<li><a href="#http-fu-zai-jun-heng">HTTP负载均衡</a><ul>
<li><a href="#chang-jian-zhi-ling">常见指令</a><ul>
<li><a href="#ngx-http-core-module">ngx_http_core_module</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<h1><span id="http-fu-zai-jun-heng">HTTP负载均衡</span><a href="#http-fu-zai-jun-heng" class="header-anchor">#</a></h1><h2><span id="chang-jian-zhi-ling">常见指令</span><a href="#chang-jian-zhi-ling" class="header-anchor">#</a></h2><h3><span id="ngx-http-core-module">ngx_http_core_module</span><a href="#ngx-http-core-module" class="header-anchor">#</a></h3><h4><span id="http">http</span><a href="#http" class="header-anchor">#</a></h4><blockquote>
<p>语法： http {…}</p>
<p>默认： -</p>
<p>上下文： main</p>
</blockquote>
<p>指定HTTP服务器指令配置的上下文。</p>
<h4><span id="server">server</span><a href="#server" class="header-anchor">#</a></h4><blockquote>
<p>语法： server {…}</p>
<p>默认： -</p>
<p>上下文： http</p>
</blockquote>
<p>虚拟服务器配置。可以基于IP配置，也可基于名称配置，二者没有明显的区分。<code>listen</code>指令描述server接收请求的所有地址和端口，<code>server_name</code>配置客户端可以请求到的所有服务器名称列表。</p>
<h5><span id="listen">listen</span><a href="#listen" class="header-anchor">#</a></h5><p>为虚拟服务器接收请求设置IP和端口或者UNIX-domain套接字的路径。</p>
<ul>
<li><p>可以同时指定IP地址和端口；</p>
</li>
<li><p>也可以只指定IP地址或只指定端口；</p>
</li>
<li><p>只指定IP地址情况，端口默认是<code>80</code>；</p>
</li>
<li><p>地址也可以是主机名（hosts）；</p>
</li>
<li><p>0.7.36版本开始可以通过中括号指定IPV6地址；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">listen</span> [::]:<span class="number">8000</span>;</span><br><span class="line"><span class="attribute">listen</span> [::<span class="number">1</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>0.8.21版本开始可通过<code>unix:</code>前缀指定UNIX-domain套接字路径；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">listen</span> unix:/var/run/nginx.sock;</span><br></pre></td></tr></table></figure>
</li>
<li><p>没有显式配置<code>listen</code>指定的情况下，如果nginx是以超级权限用户运行的，则默认端口是<code>80</code>，否则默认是端口是<code>8000</code>。</p>
</li>
</ul>
<h6><span id="yu-fa">语法</span><a href="#yu-fa" class="header-anchor">#</a></h6><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">listen</span> address[:port] [default_server] [ssl] [http2 | spdy] [proxy_protocol] [setfib=number] [fastopen=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_filter=filter] [deferred] [bind] [ipv6only=<span class="literal">on</span>|<span class="literal">off</span>] [reuseport] [so_keepalive=<span class="literal">on</span>|<span class="literal">off</span>|[keepidle]:[keepintvl]:[keepcnt]];</span><br><span class="line"></span><br><span class="line"><span class="attribute">listen</span> port [default_server] [ssl] [http2 | spdy] [proxy_protocol] [setfib=number] [fastopen=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_filter=filter] [deferred] [bind] [ipv6only=<span class="literal">on</span>|<span class="literal">off</span>] [reuseport] [so_keepalive=<span class="literal">on</span>|<span class="literal">off</span>|[keepidle]:[keepintvl]:[keepcnt]];</span><br><span class="line"></span><br><span class="line"><span class="attribute">listen</span> unix:path [default_server] [ssl] [http2 | spdy] [proxy_protocol] [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_filter=filter] [deferred] [bind] [so_keepalive=<span class="literal">on</span>|<span class="literal">off</span>|[keepidle]:[keepintvl]:[keepcnt]];</span><br></pre></td></tr></table></figure>
<h6><span id="mo-ren-zhi">默认值</span><a href="#mo-ren-zhi" class="header-anchor">#</a></h6><p><code>listen *:80 | *:8000;</code>    </p>
<h6><span id="parameters-lie-biao">parameters列表</span><a href="#parameters-lie-biao" class="header-anchor">#</a></h6><p><code>default_server</code></p>
<ul>
<li>指定当前服务器是指定地址和端口的默认服务器；</li>
<li>如果所以的<code>listen</code>指令都没有配置<code>default_server</code>指令，则配置列表中的一个服务器为默认服务器；</li>
<li>0.8.21版本之前<code>default_server</code>是<code>default</code>。</li>
</ul>
<p><code>ssl</code></p>
<p>指定当前端口下的所有请求都工作在SSL模式下（从0.7.14版本开始起用）。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>              <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>              <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>         www.example.com;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>     www.example.com.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> www.example.com.key;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表示服务器可以同时处理HTTP和HTTPS请求。</p>
<p><code>http2</code></p>
<p>配置当前端口是接受<a href="http://nginx.org/en/docs/http/ngx_http_v2_module.html" target="_blank" rel="noopener">HTTP/2</a> 请求连接的，一般情况下应当同时指定<code>ssl</code>参数（可不指定）。（从1.9.5版本开始起用）</p>
<p><code>spdy</code></p>
<p>配置当前端口是接受<a href="http://nginx.org/en/docs/http/ngx_http_spdy_module.html" target="_blank" rel="noopener">SPDY</a>请求链接的，一般情况下应当同时指定<code>ssl</code>参数（可不指定）。（在1.3.15-1.9.4版本中使用）</p>
<p><code>listen</code>指令还有一些针对套接字调用相关的参数，<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#listen" target="_blank" rel="noopener">参考官网指导手册</a></p>
<h5><span id="server-name">server_name</span><a href="#server-name" class="header-anchor">#</a></h5><p>配置虚拟服务器的名称列表。</p>
<p>通过名称搜索虚拟服务器时，遵循以下规则：</p>
<ol>
<li>确切名称匹配</li>
<li>以“*”起始的最长通配符名称匹配</li>
<li>以“*”结尾的最长通配符名称陪陪</li>
<li>第一个正则匹配（匹配顺序与配置顺序有关，匹配到第一个正则停止）</li>
</ol>
<h6><span id="tong-pei-fu-ming-cheng">通配符名称</span><a href="#tong-pei-fu-ming-cheng" class="header-anchor">#</a></h6><p>通配符名称是指在虚拟服务器名称前面或者后面配置一个“*”，紧接着“*”的是点（<code>.</code>）。</p>
<p>“*.example.org”可以匹配到“<a href="http://www.example.org”，也可以匹配到“www.sub.example.org”。" target="_blank" rel="noopener">www.example.org”，也可以匹配到“www.sub.example.org”。</a></p>
<p>“.example.org”可以当做是“example.org”和“*.example.org”的组合。</p>
<p>类似“www.*.example.org”或者“w*.example.org”的配置是无效的。</p>
<h6><span id="zheng-ze-biao-da-shi-ming-cheng">正则表达式名称</span><a href="#zheng-ze-biao-da-shi-ming-cheng" class="header-anchor">#</a></h6><p>正则表达式配置虚拟服务器名称需满足以下条件：</p>
<ul>
<li>一定要以波浪线（<code>~</code>）作为起始符号</li>
<li>表达式放在在（<code>^</code>）和（<code>$</code>）之间</li>
<li>正则表达式中的点（<code>.</code>）需要用反斜杠（<code>\</code>）转义</li>
<li>如果正则表达式中有花括号（<code>{}</code>），正则表达式需要用引号（<code>&quot;&quot;</code>）括起来</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">server_name</span>  ~^www\d+\.example\.net$;</span><br><span class="line"><span class="attribute">server_name</span>  <span class="string">"~^(?&lt;name&gt;\w\d&#123;1,3&#125;+)\.example\.net$"</span>;</span><br></pre></td></tr></table></figure>
<h6><span id="hun-he-ming-cheng">混合名称</span><a href="#hun-he-ming-cheng" class="header-anchor">#</a></h6><p>如果需要处理请求投中没有”Host”字段的请求，server_name中可以指定空引号（<code>&quot;&quot;</code>）。（从0.8.48版本开始，<code>server_name</code>默认是””，之前的版本默认是hostname）</p>
<p>也可以指定为具体的IP地址</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.org</span><br><span class="line">                 www.example.org</span><br><span class="line">                 <span class="string">""</span></span><br><span class="line">                 <span class="number">192.168.1.1</span></span><br><span class="line">                 ;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>_</code>符号表示可以匹配所有的名称，无论是正规域名，还是形如“<code>!@#</code>”或者“<code>--</code>” 等不正规的名称皆可匹配。（这种方式不推荐使用）</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>  default_server;</span><br><span class="line">    <span class="attribute">server_name</span>  _;</span><br><span class="line">    <span class="attribute">return</span>       <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以在<code>server_name</code>指令中通过使用ASCII (Punycode) 表示国际化域名(<a href="https://en.wikipedia.org/wiki/Internationalized_domain_name" target="_blank" rel="noopener">IDNs</a>)</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  xn--e1afmkfd.xn--80akhbyknj4f;  </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6><span id="zui-jia-shi-jian">最佳实践</span><a href="#zui-jia-shi-jian" class="header-anchor">#</a></h6><p>确切名称、以星号起始的通配符名称、以星号结尾的通配符名称分别存储在绑定于端口的三张哈希表中，哈希表搜索顺序如前面所述</p>
<ol>
<li>确切名称</li>
<li>以星号起始的通配符名称</li>
<li>以星号结束的通配符名称</li>
<li>正则表达式</li>
</ol>
<p>搜索速度由快到慢顺序</p>
<ol>
<li>确切名称</li>
<li>通配符</li>
<li>正则表达式</li>
</ol>
<p>因此，尽可能的配置确切名称。比如请求exmaple.org和<a href="http://www.example.org的频率较高，那么如下第一种配置明显优于第二种配置" target="_blank" rel="noopener">www.example.org的频率较高，那么如下第一种配置明显优于第二种配置</a></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.org  www.example.org  <span class="regexp">*.example.org</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  .example.org;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果配置服务器名称过多或者长度过长，可能需要调整<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_max_size" target="_blank" rel="noopener">server_names_hash_max_size</a><br>和 <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size" target="_blank" rel="noopener">server_names_hash_bucket_size</a>指令。</p>
<h4><span id="location">location</span><a href="#location" class="header-anchor">#</a></h4><blockquote>
<p>语法： location [ = | ~ | ~* | ^~ ] uri { … }</p>
<p>​            location @name { … }</p>
<p>默认： -</p>
<p>上下文： server, location</p>
</blockquote>
<p>配置请求URI。</p>
<h5><span id="shuo-ming">说明</span><a href="#shuo-ming" class="header-anchor">#</a></h5><ul>
<li><p>匹配是针对规范化URI执行的，对形如“%XX”的编码文本会进行解码操作，对<code>.</code>或者<code>..</code>的相对路径引用会进行解析，对相邻的两个或多个斜杠会压缩成一个；</p>
</li>
<li><p><code>location</code>可以通过前缀串定义，也可以通过正则表达式定义；</p>
</li>
<li><p>通过正则表达式定义时，<code>~*</code>作为前修饰符表示大小写不敏感，<code>~</code>作为前修饰符表示大小写敏感；</p>
</li>
<li><p>根据请求匹配<code>location</code>的过程</p>
<ol>
<li>在配置的<code>location</code>列表中搜索URI不带参数的最完整字符串，逐渐减短匹配串，最长的成功匹配将会被选择并保存；</li>
<li>根据配置顺序匹配正则表达式，匹配成功则停止；</li>
<li>如果正则表达式匹配成功，则使用正则表达式匹配成功的<code>location</code>，否则使用第一步匹配到的<code>location</code>；</li>
</ol>
</li>
<li><p>前缀匹配中匹配到的最长<code>location</code>如果有<code>^~</code>作为前修饰符，则不会进行正则匹配；</p>
</li>
<li><p>如果使用<code>=</code>修饰，会进行确切值的匹配，且匹配成功停止继续匹配；该<code>location</code>不可嵌套其他<code>location</code>；</p>
</li>
<li><p>在0.7.1版本到0.8.41版本中，匹配打的前缀<code>location</code>即使没有<code>=</code>或者<code>^~</code>作为前修饰符，也会停止匹配；</p>
</li>
<li><p><code>@</code>作为前缀定义的<code>lcation</code>，不用来处理常规请求，而是用来重定向请求；这种<code>location</code>不能被嵌套，也不能其它<code>location</code>；</p>
</li>
<li><p>如果一个前缀字符串定义到<code>location</code>以斜杠（<code>/</code>）结尾，请求被<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass" target="_blank" rel="noopener">proxy_pass</a>，<a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass" target="_blank" rel="noopener">fastcgi_pass</a>，<a href="http://nginx.org/en/docs/http/ngx_http_uwsgi_module.html#uwsgi_pass" target="_blank" rel="noopener">uwsgi_pass</a>,<br><a href="http://nginx.org/en/docs/http/ngx_http_scgi_module.html#scgi_pass" target="_blank" rel="noopener">scgi_pass</a>，<a href="http://nginx.org/en/docs/http/ngx_http_memcached_module.html#memcached_pass" target="_blank" rel="noopener">memcached_pass</a>，<a href="http://nginx.org/en/docs/http/ngx_http_grpc_module.html#grpc_pass" target="_blank" rel="noopener">grpc_pass</a>处理，请求会转向原请求串不带后斜杠的请求上，301（永久重定向）码会返回给带有后斜杠的请求。可以通过下面的方式配置完全匹配来解决：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /user/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://user.example.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> = /user &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://login.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4><span id="default-type">default_type</span><a href="#default-type" class="header-anchor">#</a></h4><blockquote>
<p>语法： default_type mime-type;</p>
<p>默认： default_type text/plain;</p>
<p>上下文： http, server, location</p>
</blockquote>
<p>定义响应的默认MIME（Multipurpose nternet Mail Extensions 描述消息内容类型的因特网标准) 类型，可以通过<code>types</code>指令将文件名扩展和MIME类型进行相互映射。</p>
<h4><span id="types">types</span><a href="#types" class="header-anchor">#</a></h4><blockquote>
<p>语法： types {…}</p>
<p>默认： types { </p>
<p>​    text/html html;</p>
<p>​    image/gif gif;</p>
<p>​    image/jpeg jpg;</p>
<p> }</p>
<p>上下文： http, server, location</p>
</blockquote>
<p>为响应映射文件名扩展到MIME类型。</p>
<ul>
<li><p>扩展是大小写敏感的；</p>
</li>
<li><p>可以将多个扩展映射到同一个类型；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">types</span> &#123;</span><br><span class="line">    application/octet-stream bin exe dll;</span><br><span class="line">    application/octet-stream deb;</span><br><span class="line">    application/octet-stream dmg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在nginx的conf/mime.types文件中有完整映射；</p>
</li>
</ul>
<h4><span id="error-page">error_page</span><a href="#error-page" class="header-anchor">#</a></h4><blockquote>
<p>语法： error_page code … [=[response]] uri;</p>
<p>默认： -</p>
<p>上下文： http, server, location, location中的if</p>
</blockquote>
<p>定义指定指定错误的URI，URI中可以包含变量。</p>
<ul>
<li><p>进入<code>error_page</code>指令，会将客户端的请求方法改变为<code>GET</code>（出<code>GET</code>和<code>HEAD</code>方法以外）；</p>
</li>
<li><p>使用<code>=response</code>语法可以改变响应码；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> =<span class="number">200</span> /empty.gif;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果错误响应是经过代理服务器或者FastCGI/uwsgi/SCGI/gRPC服务器处理的，服务器可能返回不同的响应码，如果要奖这些错误码作为响应码返回给客户端，可以通过如下语法设置；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> = /<span class="number">404</span>.php;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果在内部重定向过程中不需要改变URI和方法，可以将错误处理流程转发给命名好的location；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> = <span class="variable">@fallback</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="variable">@fallback</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果URI的处理过程中出现错误，最后一个错误的状态码会返回给客户端；</p>
</li>
<li><p>可以通过URL重定向错误；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">error_page</span> <span class="number">403</span>      http://example.com/forbidden.html;</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> =<span class="number">301</span> http://example.com/notfound.html;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当前指令中如果未定义<code>error_page</code>，会从上一级别继承。</p>
</li>
</ul>
<h4><span id="zi-dai-can-shu">自带参数</span><a href="#zi-dai-can-shu" class="header-anchor">#</a></h4><p><code>$http_user_agent</code></p>
<p> <code>$http_cookie</code></p>
<p><code>$arg_</code><em>name</em></p>
<p>请求中的参数名称</p>
<p><code>$args</code></p>
<p>请求中的参数</p>
<p><code>$binary_remote_addr</code></p>
<p>客户端地址的二进制形式，IPv4值的长度为4字节，IPv6值的长度为16字节</p>
<p><code>$body_bytes_sent</code></p>
<p>发往客户端的字节数，不包含响应头；改变量与apache模块的<code>mod_log_config</code>的<code>%B</code>参数兼容</p>
<p><code>$bytes_sent</code></p>
<p>发往客户端的自己数(1.3.8, 1.2.5)</p>
<p><code>$connection</code></p>
<p>连接号 (1.3.8, 1.2.5)</p>
<p><code>$connection_requests</code></p>
<p>通过当前连接发出的请求书(1.3.8, 1.2.5)</p>
<p><code>$content_length</code></p>
<p>请求头中的“Content-Length”字段</p>
<p><code>$content_type</code></p>
<p>请求头中的“Content-Type”字段</p>
<p><code>$cookie_</code><em>name</em></p>
<p>cookie名称</p>
<p><code>$document_root</code></p>
<p>当前请求的根（<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#root" target="_blank" rel="noopener">root</a>）或别名（<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#alias" target="_blank" rel="noopener">alias</a> ）指令的值</p>
<p><code>$document_uri</code>和<code>$uri</code></p>
<p>当前请求中的标准URI，内部转发中可能会发生改变</p>
<p><code>$host</code></p>
<p>按照如下顺序取值：</p>
<ul>
<li>请求连接中的hostname</li>
<li>请求头中”Host”字段的hostname</li>
<li>请求匹配到的server name</li>
</ul>
<p><code>$hostname</code></p>
<p><code>$http_</code><em>name</em></p>
<p>任意请求头中的字段，<em>name</em>是转换为小写的字段名称，并用中划线代替下划线</p>
<p><code>$https</code></p>
<p>SSL模式下是”on”，否则是空字符串</p>
<p><code>$is_args</code></p>
<p>请求连接中有参数是”?”，否则是空字符串</p>
<p><code>$limit_rate</code></p>
<p>设置此变量将启用响应速率限制，参见<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#limit_rate" target="_blank" rel="noopener">limit_rate</a></p>
<p><code>$msec</code></p>
<p>毫秒级的当前时间(1.3.9, 1.2.6)</p>
<p><code>$nginx_version</code></p>
<p>nginx版本</p>
<p><code>$pid</code></p>
<p>worker进程号</p>
<p><code>$pipe</code></p>
<p>pipelined请求是”p”，否则是”.”(1.3.12, 1.2.7)</p>
<p><code>$proxy_protocol_addr</code></p>
<p>PROXY协议头中的客户端地址 (1.5.12)，PROXY 协议必须已经在<code>listen</code>指令的<code>proxy_protocol</code>参数中启用</p>
<p><code>$proxy_protocol_port</code></p>
<p>PROXY协议头中的客户端端口 (1.11.0)，PROXY 协议必须已经在<code>listen</code>指令的<code>proxy_protocol</code>参数中启用</p>
<p><code>$proxy_protocol_server_addr</code></p>
<p>PROXY协议头中的服务端地址 (1.17.6)，PROXY 协议必须已经在<code>listen</code>指令的<code>proxy_protocol</code>参数中启用</p>
<p><code>$proxy_protocol_server_port</code></p>
<p>PROXY协议头中的服务端端口 (1.17.6)，PROXY 协议必须已经在<code>listen</code>指令的<code>proxy_protocol</code>参数中启用</p>
<p><code>$query_string</code></p>
<p>相同于<code>$args</code></p>
<p><code>$realpath_root</code></p>
<p>与当前请求的根指令或别名指令的值相对应的绝对路径名，所有符号链接都解析为真实路径</p>
<p><code>$remote_addr</code></p>
<p>客户端地址</p>
<p><code>$remote_port</code></p>
<p>客户端端口</p>
<p><code>$remote_user</code></p>
<p>用户认证的用户名</p>
<p><code>$request</code></p>
<p>原始的完整请求链接</p>
<p><code>$request_body</code></p>
<p>请求消息体，值读入内存后，可以在<code>location</code>流程中的<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass" target="_blank" rel="noopener">proxy_pass</a>，<a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass" target="_blank" rel="noopener">fastcgi_pass</a>，<a href="http://nginx.org/en/docs/http/ngx_http_uwsgi_module.html#uwsgi_pass" target="_blank" rel="noopener">uwsgi_pass</a>，<a href="http://nginx.org/en/docs/http/ngx_http_scgi_module.html#scgi_pass" target="_blank" rel="noopener">scgi_pass</a>指令中使用</p>
<p><code>$request_body_file</code></p>
<p>请求消息中临时文件名，流程结束后，文件会被移除。<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_in_file_only" target="_blank" rel="noopener">client_body_in_file_only</a>指令启用允许将请求写入文件，如果临时文件转发到代理服务器或者FastCGI/uwsgi/SCGI服务器，那么应当分别通过<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_request_body" target="_blank" rel="noopener"> proxy_pass_request_body off</a>，<a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass_request_body" target="_blank" rel="noopener">fastcgi_pass_request_body off</a>，<a href="http://nginx.org/en/docs/http/ngx_http_uwsgi_module.html#uwsgi_pass_request_body" target="_blank" rel="noopener">uwsgi_pass_request_body off</a>， <a href="http://nginx.org/en/docs/http/ngx_http_scgi_module.html#scgi_pass_request_body" target="_blank" rel="noopener">scgi_pass_request_body off</a>指令关闭对请求消息体的转发。</p>
<p><code>$request_completion</code></p>
<p>请求完成是”OK”，否则是空字符串</p>
<p><code>$request_filename</code></p>
<p>当前请求基于<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#root" target="_blank" rel="noopener">root</a>或<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#alias" target="_blank" rel="noopener">alias</a>指令，请求URI的文件路径</p>
<p><code>$request_id</code></p>
<p>当前请求的唯一id</p>
<p><code>$request_length</code></p>
<p>包含request line, header, 和request body的请求长度(1.3.12, 1.2.7)</p>
<p><code>$request_method</code></p>
<p>请求方法，比如“<code>GET</code>” 或 “<code>POST</code>”</p>
<p><code>$request_time</code></p>
<p>毫秒级的请求处理时间</p>
<p><code>$request_uri</code></p>
<p>带有参数的原始完整请求URI</p>
<p><code>$scheme</code></p>
<p>请求scheme, “<code>http</code>” or “<code>https</code>”</p>
<p><code>$sent_http_</code><em>name</em></p>
<p>任意的响应头字段，<em>name</em>是转换为小写的字段名称，并用中划线代替下划线</p>
<p><code>$sent_trailer_</code><em>name</em></p>
<p>发送响应的最后字段(1.13.2)，<em>name</em>是转换为小写的字段名称，并用中划线代替下划线</p>
<p><code>$server_addr</code></p>
<p>接收请求的服务点地址，计算此变量的值通常需要一个系统调用。为避免系统调用，listen伪指令必须指定地址并使用bind参数。</p>
<p><code>$server_name</code></p>
<p>接口请求的服务器名称</p>
<p><code>$server_port</code></p>
<p>接口请求的服务器端口</p>
<p><code>$server_protocol</code></p>
<p>接收请求的协议，通常是“<code>HTTP/1.0</code>”，“<code>HTTP/1.1</code>”，“<a href="http://nginx.org/en/docs/http/ngx_http_v2_module.html" target="_blank" rel="noopener">HTTP/2.0</a>”</p>
<p><code>$status</code></p>
<p>响应状态(1.3.2, 1.2.2)</p>
<p><code>$tcpinfo_rtt</code>,<code>$tcpinfo_rttvar</code>,<code>$tcpinfo_snd_cwnd</code>,<code>$tcpinfo_rcv_space</code></p>
<p>TCP链接的客户端信息，在支持TCP_INFO套接字选项的系统上可用</p>
<p><code>$time_iso8601</code></p>
<p>ISO 8601标准格式的当地时间 (1.3.12, 1.2.7)</p>
<p><code>$time_local</code></p>
<p> (1.3.12, 1.2.7)</p>
<p>更多其他指令请参考<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html" target="_blank" rel="noopener">官方网站</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>IT从业者应该知道的概念</title>
    <url>/2019/12/15/IT%E4%BB%8E%E4%B8%9A%E8%80%85%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>胡思乱想</title>
    <url>/2019/12/15/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/</url>
    <content><![CDATA[<p>前段时间总有一种悲凉的感觉，因为我突然认识到人的时间是多么的有限，除去工作，学习和休息等，留给我们看书的时间十分的少，而世界上有无数的书籍，光是经典书籍我们也读不完，何况其他的书呢？</p>
<a id="more"></a>
<p>后来在网上看到日本作家芥川龙之介也曾有过这样的想法。</p>
<p>芥川龙之介有一天突然想算算自己一生能读多少本书？用自己一生可用来读书的大致时间除以看完一本书的大致时间，就能知道答案。芥川龙之介算出答案后大哭了一场，因为他发现自己一生顶多能读2000-3000本书！</p>
<p>当看到有伟大的作家也如此的想法，为此困扰过，并且知道了大概的结果，我稍微有些释然了，但并没有完全能消除那种悲凉感！</p>
<p>正如庄周所说：吾生也有涯，而知也无涯，殆已！</p>
<p>我们在有限的时间里，想要读完无数的书，那是不可能的。我们需要去选择，为自己有限的读书时间选择值得一读的书。</p>
<p>如何选书是一门学问，我们经常会在网上看到各种大咖小咖推荐书单，这可以成为一种参考，但不应该成为真理，因为每个人的喜好气质甚至层次是不同的，别人的书单，可能只是适合他自己的，我们读起来可能索然无味，甚是煎熬。</p>
<p>所以选书要按照自己的喜好远，一般来经典是值得读的，但不是每一本经典都是你的菜。比如我能坚持看完一百万字的《平凡的世界》，五十万字的《白鹿原》，而同时代两万五千字的《黄金时代》我却坚持不下去。《黄金时代》是经典，王小波是伟大的作家，这都是毋庸置疑的，但至少目前为止，我并不喜欢这本书，所以就放下了。</p>
<p>回顾今年自己读的书，发现有好几本书看了几页就觉得没多大兴趣，但总有种跟自己较劲的想法，坚持读完了，但是读的很快，读完似乎也不记得什么内容。其实这种想法不应该有，如果翻看目录，或者书的序，或者读几页后觉得没有兴趣，就应该果断的放弃，另选其他书籍，因为我们的时间真的很有限！</p>
<p>我们读书应该除了让自己心情愉悦外，还能增加理解力，长见识，拓思维。所以不应该只是读一些消遣的书，也不应该为了读书而读，总是很快的看完了一本书，没有思考，没有回味，没有记忆！</p>
<p>当然所有这些都不适合专业类书，比如一个程序员，当遇到某些技术的时候，就算那本书无趣透顶，只要有助于解决问题，都是需要坚持读一读的！</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx-config之ngx_http_proxy_module</title>
    <url>/2019/12/14/nginx-config%E4%B9%8Bngx-http-proxy-module/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->
<ul>
<li><a href="#http-fu-zai-jun-heng">HTTP负载均衡</a><ul>
<li><a href="#chang-jian-zhi-ling">常见指令</a><ul>
<li><a href="#ngx-http-proxy-module">ngx_http_proxy_module</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<h1><span id="http-fu-zai-jun-heng">HTTP负载均衡</span><a href="#http-fu-zai-jun-heng" class="header-anchor">#</a></h1><h2><span id="chang-jian-zhi-ling">常见指令</span><a href="#chang-jian-zhi-ling" class="header-anchor">#</a></h2><h3><span id="ngx-http-proxy-module">ngx_http_proxy_module</span><a href="#ngx-http-proxy-module" class="header-anchor">#</a></h3><p>实现将请求转发到其他服务器。</p>
<h4><span id="proxy-pass">proxy_pass</span><a href="#proxy-pass" class="header-anchor">#</a></h4><blockquote>
<p>语法： <code>proxy_pass URL</code></p>
<p>默认： <code>-</code></p>
<p>上下文：locaiton，location中的if，limit_except</p>
</blockquote>
<p>为<code>location</code>映射的服务器设置协议、地址、URI。</p>
<ul>
<li><p>协议可以是<code>http</code>或者<code>https</code>；</p>
</li>
<li><p>地址可以是域名或者IP，可以同时指定端口；</p>
</li>
<li><p>地址也可以是以<code>unix</code>为前缀，包含在<code>:</code>中间的UNIX域名套接字路径；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_pass</span> http://unix:/tmp/backend.socket:/uri/;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果<code>proxy_pass</code>指令中带有URI，当请求被转发到服务器时，客户端原请求中标准的URI将会被指令中URI替换；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /name/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1/remote/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果<code>proxy_pass</code>指令中没有URI，当请求被转发到服务器时，将会使用客户端原请求中的URI；</p>
</li>
<li><p>不可替换URI的情况</p>
<ul>
<li><p><code>location</code>通过正字表达式定义；</p>
</li>
<li><p><code>location</code>内部通过<a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite" target="_blank" rel="noopener">rewrite</a>指令修改过URI；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /name/ &#123;</span><br><span class="line">    <span class="attribute">rewrite</span>    /name/([^/]+) /users?name=<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>proxy_pass</code>指令中使用变量；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /name/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4><span id="proxy-redirect">proxy_redirect</span><a href="#proxy-redirect" class="header-anchor">#</a></h4><blockquote>
<p>语法：proxy_redirect default；</p>
<p>​          proxy_redirect off;</p>
<p>​          proxy_redirect redirect replacement;</p>
<p>默认：proxy_redirect default;</p>
<p>上下文：http, server, location</p>
</blockquote>
<p>设置对代理服务器响应头中的<code>Location</code>和<code>Refresh</code>字段的重写。</p>
<ul>
<li><p>该指令实现将代理服务器响应头中的字段“<code>Location: http://localhost:8000/two/some/uri/</code>”重写为“<code>Location: http://frontend/one/some/uri/</code>”；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_redirect</span> http://localhost:8000/two/ http://frontend/one/;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果省略<code>repacement</code>字符串，如果默认服务器不是<code>80</code>端口，那么将会插入默认服务器的名称和端口；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_redirect</span> http://localhost:8000/two/ /;</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定<code>default</code>参数的情况下，使用<code>location</code>和<code>proxy_pass</code>的参数。如下两个指令是等价的</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /one/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>     http://upstream:port/two/;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> default;</span><br></pre></td></tr></table></figure>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /one/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>     http://upstream:port/two/;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> http://upstream:port/two/ /one/;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>proxy_pass</code>指令中有变量的情况下，<code>proxy_redirect</code>指令不能指定<code>default</code>参数；</p>
</li>
<li><p><code>replacement</code>中可以使用变量，<code>redirect</code>从1.1.11版本开始也可以使用变量；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_redirect</span> http://localhost:8000/ http://<span class="variable">$host</span>:<span class="variable">$server_port</span>/;</span><br></pre></td></tr></table></figure>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_redirect</span> http://<span class="variable">$proxy_host</span>:8000/ /;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从1.1.11版本开始<code>proxy_redirect</code>指令中允许使用正则表达式</p>
<ul>
<li><p>以<code>~</code>起始表示匹配时大小写敏感；</p>
<ul>
<li><p>以<code>~*</code>起始表示匹配时大小写不敏感；</p>
</li>
<li><p><code>redirect</code>中可以包含命名和positional captures，然后在<code>replacement</code>中引用；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_redirect</span> ~^(http://[^:]+):\d+(/.+)$ <span class="variable">$1</span><span class="variable">$2</span>;</span><br><span class="line"><span class="attribute">proxy_redirect</span> ~*/user/([^/]+)/(.+)$      http://<span class="variable">$1</span>.example.com/<span class="variable">$2</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>可以同时指定多个<code>proxy_redirect</code>，如果指定了<code>off</code>参数，表示当前级别下的所有<code>proxy_redirect</code>指令将失效；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">proxy_redirect</span> default;</span><br><span class="line"><span class="attribute">proxy_redirect</span> http://localhost:8000/  /;</span><br><span class="line"><span class="attribute">proxy_redirect</span> http://www.example.com/ /;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下面指令实现给相对路径上增加主机名；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_redirect</span> / /;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4><span id="proxy-set-header">proxy_set_header</span><a href="#proxy-set-header" class="header-anchor">#</a></h4><blockquote>
<p>语法： proxy_set_header field value;</p>
<p>默认： proxy_set_header Host $proxy_host;</p>
<p>​            proxy_set_header Connection close;</p>
<p>上下文： http, server, location</p>
</blockquote>
<p>转发请求到代理服务器时该指令允许重新定义或者追加消息头中的字段。</p>
<ul>
<li><p><code>value</code>的内容可以使文本、变量或者二者的组合；</p>
</li>
<li><p>如果当前指令中没有定义<code>proxy_set_header</code>指令，则可以继承上一级别中的定义；</p>
</li>
<li><p>默认情况只重新定义两个字段；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Host       <span class="variable">$proxy_host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection close;</span><br></pre></td></tr></table></figure>
</li>
<li><p>其中缓存的情况，原始请求中的“If-Modified-Since”, “If-Unmodified-Since”, “If-None-Match”, “If-Match”, “Range”, 和“If-Range”不会转发到代理服务器；</p>
</li>
<li><p>不改变请求头中的”Host”字段的设置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Host       <span class="variable">$http_host</span>;</span><br></pre></td></tr></table></figure>
<p>如果客户端请求头中没有<code>http_host</code>字段，则不会转发到服务器，这种情况下使用<code>$host</code>变量相对更好，<code>$host</code>变量相当于请求头中<code>Host</code>字段中服务器名称，或者请求头中没有<code>Host</code>字段时等价于主服务器的名称；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Host       <span class="variable">$host</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置将服务器器名称和端口一起转发到代理服务器；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Host       <span class="variable">$host</span>:<span class="variable">$proxy_port</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果请求头中的字段<code>value</code>为空字符串，则不会转发到服务器；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Accept-Encoding <span class="string">""</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4><span id="ngx-http-proxy-module-zi-dai-can-shu">ngx_http_proxy_module自带参数</span><a href="#ngx-http-proxy-module-zi-dai-can-shu" class="header-anchor">#</a></h4><p>自带参数可以通过<code>proxy_set_header</code>指令使用。</p>
<p><code>$proxy_host</code></p>
<p>在<code>proxy_pass</code>指令中定义的代理服务器的名称和端口</p>
<p><code>$proxy_port</code></p>
<p>在<code>proxy_pass</code>指令中定义的代理服务器的端口，或者是指定协议的默认端口</p>
<p><code>$proxy_add_x_forwarded_for</code></p>
<p>表示客户端请求头中的<code>X-Forwarded-For</code>字段，该字段中包含<code>$removte_addr</code>变量，通过逗号<code>,</code>分隔。如果客户端请求头中没有出现X-Forwarded-For<code>字段，</code>$proxy_add_x_forwarded_for<code>变量等价于</code>$remote_addr`。</p>
<p><strong>ngx_http_proxy_module中的其他参数请参考<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="noopener">官方网站</a></strong></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>kong</title>
    <url>/2019/12/11/kong/</url>
    <content><![CDATA[<h1><span id="kong">Kong</span><a href="#kong" class="header-anchor">#</a></h1><p><img src="/2019/12/11/kong/kong中常见的几个要素关系图.png" alt="kong"></p>
<h1><span id="nginx">Nginx</span><a href="#nginx" class="header-anchor">#</a></h1><p><img src="/2019/12/11/kong/nginx中常见的几个元素关系图.png" alt="nginx"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i -X GET --url http://172.17.138.238:8001/services </span><br><span class="line">curl -i -X POST http://172.17.138.238:8001/services/     -d 'name=ticket'     -d 'url=http://172.21.34.34:11100'</span><br><span class="line"></span><br><span class="line">curl -i -X PATCH http://172.17.138.238:8001/services/ticket     -d 'name=ticket'     -d 'url=http://172.21.34.34:11100' -d 'path='</span><br><span class="line"></span><br><span class="line">curl -i -X POST http://172.17.138.238:8001/routes/     -d 'paths[]=/upchatuser/api/getticket'     -d 'service.id=35962216-26ed-44fc-b738-34246161df09'</span><br><span class="line"></span><br><span class="line">curl -i -X PATCH http://172.17.138.238:8001/routes/ba742386-50df-4d5f-bd72-47f635ef466d     -d 'paths[]=/upchatuser/api/getticket'     -d 'service.id=35962216-26ed-44fc-b738-34246161df09'</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>kong</category>
      </categories>
      <tags>
        <tag>kong</tag>
      </tags>
  </entry>
  <entry>
    <title>nmon</title>
    <url>/2019/12/05/nmon/</url>
    <content><![CDATA[<p><a href="http://nmon.sourceforge.net/" target="_blank" rel="noopener">nmon官网地址</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>nmon</tag>
      </tags>
  </entry>
  <entry>
    <title>openfire-01</title>
    <url>/2019/11/28/openfire-01/</url>
    <content><![CDATA[<p><a href="http://www.igniterealtime.org" target="_blank" rel="noopener">官方网站</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>openfire</category>
      </categories>
      <tags>
        <tag>openfire</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx-config</title>
    <url>/2019/11/27/nginx-config/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->
<ul>
<li><a href="#guan-fang-wang-zhan">官方网站</a></li>
<li><a href="#nginx-zhuan-fa-qing-qiu-guo-cheng">nginx转发请求过程</a><ul>
<li><a href="#default-server"><code>default_server</code></a></li>
<li><a href="#fang-zhi-shi-yong-wei-ding-yi-de-de-sever-name-chu-li-qing-qiu">防止使用未定义的的sever name处理请求</a></li>
<li><a href="#ji-yu-ming-cheng-he-ip-de-zu-he-server">基于名称和IP的组合server</a></li>
<li><a href="#jian-dan-pei-zhi-shi-li">简单配置实例</a></li>
<li><a href="#zong-jie">总结</a></li>
</ul>
</li>
<li><a href="#http-fu-zai-jun-heng">HTTP负载均衡</a><ul>
<li><a href="#dai-li-http-qing-qiu-dao-fu-wu-qi-zu">代理HTTP请求到服务器组</a></li>
<li><a href="#fu-zai-jun-heng-suan-fa">负载均衡算法</a></li>
<li><a href="#fu-wu-qi-quan-chong">服务器权重</a></li>
<li><a href="#fu-wu-qi-man-qi-dong-slow-start">服务器慢启动（Slow-Start）</a></li>
<li><a href="#chang-jian-zhi-ling">常见指令</a><ul>
<li><a href="#upstream">upstream</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<h1><span id="guan-fang-wang-zhan">官方网站</span><a href="#guan-fang-wang-zhan" class="header-anchor">#</a></h1><p><a href="http://nginx.org/" target="_blank" rel="noopener">nginx官方网站</a></p>
<p><a href="http://nginx.org/en/" target="_blank" rel="noopener">ngingx官方特性介绍入口</a></p>
<p><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">nginx官方配置文档</a></p>
<h1><span id="nginx-zhuan-fa-qing-qiu-guo-cheng">nginx转发请求过程</span><a href="#nginx-zhuan-fa-qing-qiu-guo-cheng" class="header-anchor">#</a></h1><p><a href="http://nginx.org/en/docs/http/request_processing.html" target="_blank" rel="noopener">How nginx processes a request</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name example.org www.example.org;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name example.net www.example.net;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name example.com www.example.com;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种配置情况下，第一个server就是默认配置。请求通过Header中的”Host”来匹配到对应的服务，如果没有匹配到任何server_name，则路由到默认server（第一个server）处理。</p>
<h2><span id="default-server"><code>default_server</code></span><a href="#default-server" class="header-anchor">#</a></h2><p>通过给<code>listen</code>增加 <code>default_server</code>参数明确指定哪个server是默认server（<code>default_server</code>参数从0.8.21版本开始有效）。<strong>注意：<code>default_server</code>是用作用于端口的，而不是<code>server_name</code>的</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">server_name</span> example.net www.example.net;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="fang-zhi-shi-yong-wei-ding-yi-de-de-sever-name-chu-li-qing-qiu">防止使用未定义的的sever name处理请求</span><a href="#fang-zhi-shi-yong-wei-ding-yi-de-de-sever-name-chu-li-qing-qiu" class="header-anchor">#</a></h2><p>可以定义一个<code>server_name</code>属性为空的server来处理没有Host的请求（从0.8.48版本开始，<code>server_name</code>默认是””，之前的版本默认是hostname）。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">return</span>      <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个配置标识请求Header中Host为空时，会返回“444”响应码，然后关闭链接。</p>
<h2><span id="ji-yu-ming-cheng-he-ip-de-zu-he-server">基于名称和IP的组合server</span><a href="#ji-yu-ming-cheng-he-ip-de-zu-he-server" class="header-anchor">#</a></h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">192.168.1.1:80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.org www.example.org;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">192.168.1.1:80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.net www.example.net;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">192.168.1.2:80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com www.example.com;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求Header中的Host匹配到<code>server_name</code>后，会转发到IP+端口上，如果为匹配到<code>server_name</code>，如前面所述，会转发到第一个server来处理请求，当然也可以通过<code>default_server</code>属性来指定端口的默认server。</p>
<h2><span id="jian-dan-pei-zhi-shi-li">简单配置实例</span><a href="#jian-dan-pei-zhi-shi-li" class="header-anchor">#</a></h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.org www.example.org;</span><br><span class="line">    <span class="attribute">root</span>        /data/www;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span>   index.html index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|png)$</span> &#123;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>  localhost:<span class="number">9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME</span><br><span class="line">                      <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">include</span>       fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上配置，处理请求流程如下：</p>
<ul>
<li>请求“<code>/logo.gif</code>”，首先匹配到”/“，然后匹配正则表达式“<code>\.(gif|jpg|png)$</code>”，匹配成功，因此进入“<code>\.(gif|jpg|png)$</code>”的location，使用指令<code>“root /data/www</code>”处理请求，请求映射到“<code>/data/www/logo.gif</code>”文件上返回给客户端；</li>
<li>请求“<code>/index.php</code>”，首先匹配到”/“，然后匹配正则表达式“<code>\.(php)$</code>”，匹配成功，因此进入“<code>\.(php)$</code>”的location，请求转发到FastCGI服务器监听的localhost:9000上，<a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_param" target="_blank" rel="noopener">fastcgi_param</a>指令会将FastCGI的SCRIPT_FILENAME参数设置为“<code>/data/www/index.php</code>”，然后FastCGI服务器执行这个文件。<code>$document_root</code>参数会设置为<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#root" target="_blank" rel="noopener">root</a>指令的值，<code>$fastcgi_script_name</code> 会设置为请求的URI，这里就是“<code>/index.php</code>”；</li>
<li>请求“<code>/about.html</code>”，首先匹配到“/”，其他匹配都不成功，因此由“/”的location来处理，使用指令“<code>root /data/www</code>”将请求映射到<code>/data/www/about.html</code>文件返回给客户端。</li>
<li>请求“<code>/</code>”的处理会比较复杂，“/”只会匹配到“/”，因此由“/”的location来处理，<a href="http://nginx.org/en/docs/http/ngx_http_index_module.html#index" target="_blank" rel="noopener">index</a>指令会通过“<code>root /data/www</code>”指令验证index参数中的文件是否存在。如果<code>/data/www/index.html</code>存在，则转发到<code>/data/www/index.html</code>；如果<code>/data/www/index.html</code>不存在 <code>/data/www/index.php</code> 存在，则内部转发到 <code>/index.php</code> ，nginx会再次搜索配置的locations，如同客户端发起新的请求一样，那么请求将会如第二条所述，最终由FastGCI服务器处理；</li>
</ul>
<h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p>请求进来时，nginx会按照如下步骤来匹配请求（匹配请求只用URI不带参数的部分）</p>
<ol>
<li>在配置的<code>location</code>列表中搜索URI不带参数的最完整字符串，逐渐减短匹配串，最长的成功匹配将会被选择并保存；</li>
<li>根据配置顺序匹配正则表达式，匹配成功则停止；</li>
<li>如果正则表达式匹配成功，则使用正则表达式匹配成功的<code>location</code>，否则使用第一步匹配到的<code>location</code>。</li>
</ol>
<h1><span id="http-fu-zai-jun-heng">HTTP负载均衡</span><a href="#http-fu-zai-jun-heng" class="header-anchor">#</a></h1><p><a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/" target="_blank" rel="noopener">官方指导手册</a></p>
<h2><span id="dai-li-http-qing-qiu-dao-fu-wu-qi-zu">代理HTTP请求到服务器组</span><a href="#dai-li-http-qing-qiu-dao-fu-wu-qi-zu" class="header-anchor">#</a></h2><p>nginx代理HTTP请求到服务器组的第一步是在HTTP节点下定义<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream" target="_blank" rel="noopener"><code>upstream</code></a>指令，<code>upstream</code>中通过<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#server" target="_blank" rel="noopener"><code>server</code></a>指令配置服务器组。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> backend &#123;</span><br><span class="line">        <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">        <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.0.0.1</span> backup;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置解析</p>
<ul>
<li>定义名称为backend的服务器组，其中包含了三台服务；</li>
<li>前两台服务是相同的服务器，第三台是备份服务器；</li>
<li>没有指定负载均衡算法，因此使用nginx默认的轮询算法（Round Robin）；</li>
<li>通过<a href="https://nginx.org/en/docs/http/ngx_http_proxy_module.html?&amp;_ga=2.48579822.912395568.1574850203-1786506680.1574850203#proxy_pass" target="_blank" rel="noopener"><code>proxy_pass</code></a> （也可以是其他指令 <a href="https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html?&amp;_ga=2.52224353.912395568.1574850203-1786506680.1574850203#fastcgi_pass" target="_blank" rel="noopener"><code>fastcgi_pass</code></a>， <a href="https://nginx.org/en/docs/http/ngx_http_memcached_module.html?&amp;_ga=2.52224353.912395568.1574850203-1786506680.1574850203#memcached_pass" target="_blank" rel="noopener"><code>memcached_pass</code></a>， <a href="https://nginx.org/en/docs/http/ngx_http_scgi_module.html?&amp;_ga=2.111534668.912395568.1574850203-1786506680.1574850203#scgi_pass" target="_blank" rel="noopener"><code>scgi_pass</code></a>，<a href="https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html?&amp;_ga=2.50036974.912395568.1574850203-1786506680.1574850203#uwsgi_pass" target="_blank" rel="noopener"><code>uwsgi_pass</code></a>）指令转发请求到backend服务器组；</li>
</ul>
<h2><span id="fu-zai-jun-heng-suan-fa">负载均衡算法</span><a href="#fu-zai-jun-heng-suan-fa" class="header-anchor">#</a></h2><ol>
<li><p>轮询（Round Robin）</p>
<p>nginx默认负载均衡算法，可以配合权重使用，默认情况权重是1。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">   <span class="comment"># no load balancing method is specified for Round Robin</span></span><br><span class="line">   <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">   <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最少连接（<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.36020456.912395568.1574850203-1786506680.1574850203#least_conn" target="_blank" rel="noopener"><strong>Least Connections</strong></a>）</p>
<p>请求会转发到当前有效连接最少的服务器，可以配合权重使用。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>IP哈希（<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#ip_hash" target="_blank" rel="noopener"><strong>IP Hash</strong></a>）</p>
<p>由请求客户端的IP地址决定请求发往哪台服务器，可以保证同一个IP地址的请求可以转发到同一台服务器。IPV4的前三位或者IPV6的全部地址参与哈希运算。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想要暂时移除当前负载服务器组中的某一台服务器，可以用<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#down" target="_blank" rel="noopener"><code>down</code></a> 参数标记服务器，已经通过IP哈希到当前服务器的请求会暂时保持，并自动被转移到组中的下一台服务器。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend3.example.com down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>普通哈希（<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.70992088.912395568.1574850203-1786506680.1574850203#hash" target="_blank" rel="noopener"><strong>Hash</strong></a>）</p>
<p>请求会根据自定义的字符串、变量或者二者的组合作为key进行哈希，决定发往哪台服务器。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$request_uri</span> consistent;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>hash指令中<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.73051483.912395568.1574850203-1786506680.1574850203#hash" target="_blank" rel="noopener"><code>consistent</code></a> 参数是可选的，如果指定了<code>consistent</code>参数，负载均衡会使用一致性哈希中的<a href="https://www.last.fm/user/RJ/journal/2007/04/10/rz_libketama_-_a_consistent_hashing_algo_for_memcache_clients" target="_blank" rel="noopener">ketama</a>算法，请求会根据定义的哈希键值哈希均匀的发往组中的所有服务器上。给服务器组中增加新服务器或者移除要原来的服务器，只会有少数的哈希键会重新映射。</p>
</li>
<li><p>最短时间（<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#least_time" target="_blank" rel="noopener"><strong>Least Time</strong></a>）</p>
<p>nginx plus版本才能使用，nginx plus会选择平局延迟最低和当前最少有效连接数的服务器转发请求，计算平均延迟基于如下参数（<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.6653562.912395568.1574850203-1786506680.1574850203#least_time" target="_blank" rel="noopener">parameters</a>）列表：</p>
<ul>
<li><code>header</code>从服务器接收到第一个字节的响应时间</li>
<li><code>last_byte</code>从服务器接收到全部响应的时间</li>
<li><code>last_byte inflight</code>考虑不完整请求从服务器接收到全部响应的时间</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">least_time</span> header;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>随机（<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.108717258.912395568.1574850203-1786506680.1574850203#random" target="_blank" rel="noopener"><strong>Random</strong></a>）</p>
<p>随机选择服务器转发请求。如果<code>random</code>指令的<strong><code>two</code> </strong>参数，nginx会随机选择两台服务器考虑权重问题，一台服务器使用指定方法。指定方法包括：</p>
<ul>
<li><code>least_conn</code> 最少连接数</li>
<li><code>least_time=header</code> (nginx plus)收到服务器响应消息头的最短平均时间 (<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#var_upstream_header_time" target="_blank" rel="noopener"><code>$upstream_header_time</code></a>)</li>
<li><code>least_time=last_byte</code> (nginx plus)收到服务器完整响应消息头的最短平均时间 (<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#var_upstream_response_time" target="_blank" rel="noopener"><code>$upstream_response_time</code></a>)</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">random</span> two least_time=last_byte;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend3.example.com;</span><br><span class="line">    <span class="attribute">server</span> backend4.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>随机负载均衡方法用在多个负载均衡将请求转发到同一组后端服务器的分布式场景，对于负载均衡器具有所有请求的完整视图的环境，使用其他负载均衡方法，例如轮询，最少连接和最少时间。</p>
</li>
</ol>
<h2><span id="fu-wu-qi-quan-chong">服务器权重</span><a href="#fu-wu-qi-quan-chong" class="header-anchor">#</a></h2><p>默认情况下nginx会用轮询的方式根据权重转发请求，<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.17973873.912395568.1574850203-1786506680.1574850203#server" target="_blank" rel="noopener"><code>server</code></a>指令的<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#weight" target="_blank" rel="noopener"><code>weight</code></a>参数默认是1，可以自行设定。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com weight=<span class="number">5</span>;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.0.0.1</span> backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个配置示例中，服务器<strong>backend1.example.com</strong>的权重为5，另外两台服务器的权重为默认值1，服务器<strong>192.0.0.1</strong>因为标记为<code>backup</code>，只有服务器组中其他服务器均无法响应时，才会根据权重处理请求。示例中每6个请求中5个发到<strong>backend1.example.com</strong>服务器，1个发到<strong>backend2.example.com</strong>服务器。</p>
<h2><span id="fu-wu-qi-man-qi-dong-slow-start">服务器慢启动（Slow-Start）</span><a href="#fu-wu-qi-man-qi-dong-slow-start" class="header-anchor">#</a></h2><p>服务器慢启动特性是为了防止最新回复正常的服务器因为过多的连接而不堪重负，重新别标记为失败（failed）。</p>
<p>nginx plus版本中，<code>slow_start</code>允许服务组中最新回复正常的服务器的权重中0开始逐渐变为本身设置的权重。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com slow_start=<span class="number">30s</span>;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.0.0.1</span> backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>slow_start</code>设置的值（本例中为30秒）表示，nginx plus将回复正常的服务器的连接数恢复到正常值的时间（权重从0逐渐增加到本身设置权重的时间）。</p>
<h2><span id="chang-jian-zhi-ling">常见指令</span><a href="#chang-jian-zhi-ling" class="header-anchor">#</a></h2><h3><span id="upstream">upstream</span><a href="#upstream" class="header-anchor">#</a></h3><p>定义服务器组，服务器可以监听不通的端口，也可以同时监听TCP和UNIX-domain套接字。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com weight=<span class="number">5</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>       max_fails=<span class="number">3</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">    <span class="attribute">server</span> unix:/tmp/backend3;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server</span> backup1.example.com  backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="server">server</span><a href="#server" class="header-anchor">#</a></h4><p>语法：<code>server address [parameters];</code></p>
<h5><span id="parameters-lie-biao">parameters列表</span><a href="#parameters-lie-biao" class="header-anchor">#</a></h5><ul>
<li><p>weight=number</p>
<p>服务器的权重值，默认是1；</p>
</li>
<li><p>max_conns=number</p>
<p>设置允许的最大活动连接数。默认是0，表示不限制。（设置<code>keepalive</code>时，如果有多个worker共享内存，则连接数可能会超过设置的值）</p>
</li>
<li><p>max_fails=number</p>
<p>设置在<code>fail_timeout</code>参数设置的时间段内允许的失败最大尝试次数，默认是1，设置0表示失败不会尝试。</p>
</li>
<li><p>fail_timeout=time</p>
<p><code>fail_timeout</code>的值包含两层意思：1.在这个时间段内服务器通信失败次数决定服务状态是否为不可用；2.服务器被视为不可用状态的时间段。</p>
<p>默认是10秒。</p>
</li>
<li><p>backup</p>
<p>标记服务器是备用服务器，只有在其他服务器都不可用的情况下，才会请求该服务器。（在哈希、IP哈希、随机三种负载均衡模式下不可用）</p>
</li>
<li><p>down</p>
<p>标记服务器永久不可用状态。</p>
</li>
</ul>
<h6><span id="zai-shang-yong-ban-ben-huan-zeng-jia-de-can-shu">在商用版本还增加的参数</span><a href="#zai-shang-yong-ban-ben-huan-zeng-jia-de-can-shu" class="header-anchor">#</a></h6><ul>
<li><p>resolve</p>
<p>监控服务器IP地址和域名的对应关系，可以自动重载<code>upstream</code>的配置，不需要重启nginx，服务器组必须共享内存。</p>
<p>需要在<code>http</code>或者<code>upstream</code>块中设置<code>resolver</code>指令后，<code>resolve</code>参数才能有效</p>
</li>
<li><p>route=string</p>
<p>设置服务器路由名称</p>
</li>
<li><p>service=name</p>
<p>起用DNS SRV记录并设置服务名称（1.9.13版本开始增加）。需要指定<code>resolve</code>参数和不带端口的主机名才能使用。</p>
<p>如果服务器名称中不包含点（<code>.</code>），则构造符合RFC规范的名称，将TCP协议添加到服务前缀中，例如要查找_http._tcp.backend.example.com的SRV记录，则必须配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">server</span> backend.example.com service=http resolve;</span><br></pre></td></tr></table></figure>
<p>如果服务名中包含一个或多个点（<code>.</code>），会通过将服务名作为前缀与服务器名拼接在一起构造名称，例如要查找_http._tcp.backend.example.com和server1.backend.example.com的SRV记录，则需要配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">server</span> backend.example.com service=_http._tcp resolve;</span><br><span class="line"><span class="attribute">server</span> example.com service=server1.backend resolve;</span><br></pre></td></tr></table></figure>
<p>最高优先级的SRV记录（具有相同最低优先值的记录）被解析为主服务器，其它的服务器被解析为备用服务器，如果服务器指定了<code>backup</code>参数，则将高优先级SRV记录解析为备用服务器，其它SRV记录将被忽略。</p>
</li>
<li><p>slow_start=time</p>
<p>当服务器从不可用状态恢复过来时，通过<code>slow_start</code>设置的值决定将服务器权重从0逐渐恢复到正常设置值的时间。（在哈希、IP哈希、随机三种负载均衡模式下不可用）</p>
</li>
<li><p>drain</p>
<p>将服务器设置为“draining”模式，这种模式下，只有绑定到服务器的请求才会被代理到该服务器上（1.13.6版本其实起用）。</p>
<p>如果服务组中只有一台服务器，server指令的<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.249734350.912395568.1574850203-1786506680.1574850203#max_fails" target="_blank" rel="noopener"><code>max_fails</code></a>，<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#fail_timeout" target="_blank" rel="noopener"><code>fail_timeout</code></a>， <a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#slow_start" target="_blank" rel="noopener"><code>slow_start</code></a> 参数都是无效的，nginx不会认为服务器不可用。</p>
</li>
</ul>
<h5><span id="ngx-http-upstream-module-de-zi-dai-can-shu"><code>ngx_http_upstream_module</code> 的自带参数</span><a href="#ngx-http-upstream-module-de-zi-dai-can-shu" class="header-anchor">#</a></h5><ul>
<li><p><code>$upstream_addr</code></p>
<p>保存upstream服务器的IP地址和端口或者UNIX域名套接字；</p>
</li>
<li><p><code>$upstream_bytes_received</code></p>
<p>从服务器接收到的字节数（从1.11.4版本开始起用）；</p>
</li>
<li><p><code>$upstream_bytes_sent</code></p>
<p>发送到服务器的字节数（从1.15.8版本开始起用）；</p>
</li>
<li><p><code>$upstream_cache_status</code></p>
<p>保存访问响应缓存的状态（从0.8.3版本开始起用），缓存状态可能是：“<code>MISS</code>”, “<code>BYPASS</code>”, “<code>EXPIRED</code>”, “<code>STALE</code>”, “<code>UPDATING</code>”, “<code>REVALIDATED</code>”, 或者“<code>HIT</code>”；</p>
</li>
<li><p><code>$upstream_connect_time</code></p>
<p>保存于服务器完成连接话费的时间（从1.9.1版本开始起用），这个时间会保存几秒钟内以毫秒计量。在SLL连接的情况下，包含握手话费的时间；</p>
</li>
<li><p><code>$upstream_cookie_</code><em>name</em></p>
<p>由上游服务器在“ Set-Cookie”响应标头字段中发送的具有指定名称的cookie（从1.7.1版本开始起用），仅保存来自最后一个服务器响应的cookie；</p>
</li>
<li><p><code>$upstream_header_time</code></p>
<p>保存从服务器接收响应头的时间（从1.7.0版本开始起用），这个时间会保存几秒钟内以毫秒计量；</p>
</li>
<li><p><code>$upstream_http_</code><em>name</em></p>
<p>保存服务器响应头字段。例如可以通过$upstream_http_server使用响应头中的”Server”字段，将头字段名称转换为变量名称的规则与以“ $ http_”为前缀的变量的规则相同。仅保存来自最后一个服务器的响应头字段；</p>
</li>
<li><p><code>$upstream_queue_time</code></p>
<p>保存请求在upstream队列中花费的时间（从1.13.9版本开始起用），这个时间会保存几秒钟内以毫秒计量；</p>
</li>
<li><p><code>$upstream_response_length</code></p>
<p>保存从服务器获得的响应的字节长度（从0.7.27版本开始起用）；</p>
</li>
<li><p><code>$upstream_response_time</code></p>
<p>保存从服务器接收响应花费的时间，这个时间会保存几秒钟内以毫秒计量；</p>
</li>
<li><p><code>$upstream_status</code></p>
<p>保存从服务器获得响应的状态码，如果无法选择服务器，则设置为502（Bad Gateway）；</p>
</li>
<li><p><code>$upstream_trailer_</code><em>name</em></p>
<p>保存从服务器获得的响应末尾的字段（从1.13.10版本开始起用）。</p>
</li>
</ul>
<p>·<code>upstream</code>指令块中还有很多其它参数，如<code>zone</code>、<code>keepalive</code>等<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html" target="_blank" rel="noopener">请参考官网</a>。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-ws</title>
    <url>/2019/11/05/spring-ws/</url>
    <content><![CDATA[<blockquote>
<p>因为工作需要，在基本没这么玩过web service的情况下，对接公司的ESB（主要基于web service）系统，由于项目基本是基于spring的，因此直接入手spring web service，虽然项目中功能简单，用到的内容也很少，在看文档的过程中，一时兴起，看完整个文档，并根据自己的理解基本做了翻译。然而由于个人技术水平和英文水平都不高，并且工作也比较繁忙，陆陆续续一个月时间才完成，质量也不是很高，有错误的地方欢迎指出，当然最好的方式还是直接查看官方文档，此文只望能让看到的人对spring web service稍微有个了解。</p>
</blockquote>
<div class="toc">

<!-- toc -->
<ul>
<li><a href="#gai-shu">概述</a><ul>
<li><a href="#qi-yue-xian-xing">契约先行</a></li>
<li><a href="#spring-ws-zheng-ti-jie-gou-tu">spring-ws整体结构图</a></li>
</ul>
</li>
<li><a href="#xsd">XSD</a></li>
<li><a href="#fu-wu-qi-yue">服务契约</a><ul>
<li><a href="#bian-xie-wsdl-bu-zou">编写WSDL步骤</a></li>
<li><a href="#endpoint">Endpoint</a><ul>
<li><a href="#lu-you-payloadroot">路由<code>@PayloadRoot</code></a></li>
</ul>
</li>
<li><a href="#fa-bu-wsdl">发布WSDL</a><ul>
<li><a href="#chuan-tong-xml-pei-zhi-fang-shi">传统XML配置方式</a></li>
<li><a href="#configration-fang-shi"><code>@Configration</code>方式</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#gong-xiang-zu-jian">共享组件</a><ul>
<li><a href="#webservice-message">webservice message</a><ul>
<li><a href="#messagecontext"><code>MessageContext</code></a></li>
<li><a href="#transportcontext"><code>TransportContext</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#xiao-xi-ji-lu-yu-gen-zong">消息记录与跟踪</a></li>
<li><a href="#spring-ws-fu-wu-duan">spring-ws服务端</a><ul>
<li><a href="#messagedispatcher">MessageDispatcher</a></li>
<li><a href="#chuan-shu">传输</a><ul>
<li><a href="#messagedispatcherservlet"><code>MessageDispatcherServlet</code></a></li>
<li><a href="#qian-ru-shi-http-fu-wu-qi">嵌入式HTTP服务器</a></li>
<li><a href="#xmpp-chuan-shu">XMPP传输</a></li>
</ul>
</li>
<li><a href="#endpoints">Endpoints</a><ul>
<li><a href="#endpoints-zhong-de-chu-li-xiao-xi-de-fang-fa">Endpoints中的处理消息的方法</a></li>
</ul>
</li>
<li><a href="#endpoint-mappings">Endpoint mappings</a><ul>
<li><a href="#ws-addressing">WS-Addressing</a></li>
<li><a href="#endpointintercepor"><code>EndpointIntercepor</code></a></li>
<li><a href="#yi-chang-chu-li">异常处理</a></li>
</ul>
</li>
<li><a href="#fu-wu-duan-ce-shi">服务端测试</a><ul>
<li><a href="#fu-wu-duan-ji-cheng-ce-shi">服务端集成测试</a></li>
<li><a href="#requestcreator-he-requestcreators"><code>RequestCreator</code>和<code>RequestCreators</code></a></li>
<li><a href="#responsematcher-he-responsematchers"><code>ResponseMatcher</code>和<code>ResponseMatchers</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#spring-ws-ke-hu-duan">spring-ws客户端</a><ul>
<li><a href="#ke-hu-duan-api">客户端API</a><ul>
<li><a href="#webservicetemplate"><code>WebServiceTemplate</code></a></li>
</ul>
</li>
<li><a href="#ke-hu-duan-ce-shi">客户端测试</a><ul>
<li><a href="#ke-hu-duan-ji-cheng-ce-shi">客户端集成测试</a></li>
<li><a href="#requestmatcher-he-requestmatchers"><code>RequestMatcher</code> 和 <code>RequestMatchers</code></a></li>
<li><a href="#responsecreator-he-responsecreators"><code>ResponseCreator</code> 和<code>ResponseCreators</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#spring-ws-de-an-quan-te-xing">spring-ws的安全特性</a><ul>
<li><a href="#xwssecurityinterceptor"><code>XwsSecurityInterceptor</code></a><ul>
<li><a href="#shu-zi-qian-ming">数字签名</a></li>
<li><a href="#jia-jie-mi">加解密</a></li>
<li><a href="#an-quan-zhong-de-yi-chang-chu-li">安全中的异常处理</a></li>
</ul>
</li>
<li><a href="#wss4jsecurityinterceptor"><code>Wss4jSecurityInterceptor</code></a><ul>
<li><a href="#wss4jsecurityinterceptor-pei-zhi"><code>Wss4jSecurityInterceptor</code>配置</a></li>
<li><a href="#chu-li-shu-zi-zheng-shu">处理数字证书</a></li>
<li><a href="#ren-zheng">认证</a></li>
<li><a href="#an-quan-shi-jian-chuo">安全时间戳</a></li>
<li><a href="#shu-zi-zheng-shu">数字证书</a></li>
<li><a href="#jia-jie-mi-1">加解密</a></li>
<li><a href="#an-quan-zhong-de-yi-chang-chu-li-1">安全中的异常处理</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->
<p><a href="https://spring.io/projects/spring-ws#overview" target="_blank" rel="noopener">spring webservice官网</a></p>
<p><a href="https://github.com/spring-projects/spring-ws" target="_blank" rel="noopener">源码库</a></p>
<p>本文参考spring-ws 3.0.7.RELEASE版本，所有代码示例以及图片均来自<a href="https://docs.spring.io/spring-ws/docs/3.0.7.RELEASE/reference/#security-verifying-signatures" target="_blank" rel="noopener">官网</a>。</p>
<h1><span id="gai-shu">概述</span><a href="#gai-shu" class="header-anchor">#</a></h1><p>开发webservice一般有两种方式，契约先行和契约后行。这里的契约指的是wsdl。</p>
<h2><span id="qi-yue-xian-xing">契约先行</span><a href="#qi-yue-xian-xing" class="header-anchor">#</a></h2><p>即先编写WSDL，XSD文件约定好接口，然后再编写代码。</p>
<p>契约先行：</p>
<ul>
<li>WSDL是服务的定义，是一个需要多方遵守的规则，因此应当尽可能的保持WSDL的固化；</li>
<li>将代码转成XML时，没有标准的做法，只能自我实现，各语言的数据接口跟XML差异比较大；</li>
<li>一般开发语言难以进行规则校验，Java则更不方便；</li>
<li>各种开发语言的类库不同，无法有统一的实现，XML可以作为中间转换标准，可以支持所有语言；</li>
<li>代码中迭代结构转换XML，形成死循环，无法结束；</li>
</ul>
<p>契约后行：</p>
<ul>
<li>代码改动后，需要重新发布WSDL，可能引起服务调用方的调整；</li>
<li>代码转换成XML，可能会讲所有涉及到的类全部转换，严重耗费资源</li>
</ul>
<a id="more"></a>
<p>spring webservice倡导契约先行的方式开发webservice.</p>
<h2><span id="spring-ws-zheng-ti-jie-gou-tu">spring-ws整体结构图</span><a href="#spring-ws-zheng-ti-jie-gou-tu" class="header-anchor">#</a></h2><p><img src="/2019/11/05/spring-ws/spring-deps.png" alt="spring-ws模块图"></p>
<h1><span id="xsd">XSD</span><a href="#xsd" class="header-anchor">#</a></h1><p>spring-ws的数据协议采用XML Schema(XSD)。</p>
<p>基础版：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">targetNamespace</span>=<span class="string">"http://mycompany.com/hr/schemas"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:hr</span>=<span class="string">"http://mycompany.com/hr/schemas"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"HolidayRequest"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">ref</span>=<span class="string">"hr:Holiday"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">ref</span>=<span class="string">"hr:Employee"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"Holiday"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">ref</span>=<span class="string">"hr:StartDate"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">ref</span>=<span class="string">"hr:EndDate"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"StartDate"</span> <span class="attr">type</span>=<span class="string">"xs:NMTOKEN"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"EndDate"</span> <span class="attr">type</span>=<span class="string">"xs:NMTOKEN"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"Employee"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">ref</span>=<span class="string">"hr:Number"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">ref</span>=<span class="string">"hr:FirstName"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">ref</span>=<span class="string">"hr:LastName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"Number"</span> <span class="attr">type</span>=<span class="string">"xs:integer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"FirstName"</span> <span class="attr">type</span>=<span class="string">"xs:NCName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"LastName"</span> <span class="attr">type</span>=<span class="string">"xs:NCName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上XML可以得到改进，首先注意到每种类型都包含有根节点元素的声明，说明webservice需要接受每一种元素数据，单这并不是我们想要的，其实上面的XML我们只想接受HolidayRequest而已，因此我们可以移除根节点级别的element，做如下改进：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:hr</span>=<span class="string">"http://mycompany.com/hr/schemas"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">targetNamespace</span>=<span class="string">"http://mycompany.com/hr/schemas"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"HolidayRequest"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"Holiday"</span> <span class="attr">type</span>=<span class="string">"hr:HolidayType"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"Employee"</span> <span class="attr">type</span>=<span class="string">"hr:EmployeeType"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"HolidayType"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"StartDate"</span> <span class="attr">type</span>=<span class="string">"xs:NMTOKEN"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"EndDate"</span> <span class="attr">type</span>=<span class="string">"xs:NMTOKEN"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"EmployeeType"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"Number"</span> <span class="attr">type</span>=<span class="string">"xs:integer"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"FirstName"</span> <span class="attr">type</span>=<span class="string">"xs:NCName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"LastName"</span> <span class="attr">type</span>=<span class="string">"xs:NCName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们仍然可以针对以schema做一个校验限制</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HolidayRequest</span> <span class="attr">xmlns</span>=<span class="string">"http://mycompany.com/hr/schemas"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Holiday</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StartDate</span>&gt;</span>this is not a date<span class="tag">&lt;/<span class="name">StartDate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EndDate</span>&gt;</span>neither is this<span class="tag">&lt;/<span class="name">EndDate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Holiday</span>&gt;</span></span><br><span class="line">    PlainText Section qName:lineannotation level:4, chunks:[<span class="tag">&lt;<span class="name">,</span> !<span class="attr">--</span> <span class="attr">...</span> <span class="attr">--</span>, &gt;</span>] attrs:[:]</span><br><span class="line"><span class="tag">&lt;/<span class="name">HolidayRequest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>XML可以绑定数据类型，因此我们的最终版XSD如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:hr</span>=<span class="string">"http://mycompany.com/hr/schemas"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">targetNamespace</span>=<span class="string">"http://mycompany.com/hr/schemas"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"HolidayRequest"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:all</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"Holiday"</span> <span class="attr">type</span>=<span class="string">"hr:HolidayType"</span>/&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"Employee"</span> <span class="attr">type</span>=<span class="string">"hr:EmployeeType"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">xs:all</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"HolidayType"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"StartDate"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"EndDate"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"EmployeeType"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"Number"</span> <span class="attr">type</span>=<span class="string">"xs:integer"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"FirstName"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"LastName"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1><span id="fu-wu-qi-yue">服务契约</span><a href="#fu-wu-qi-yue" class="header-anchor">#</a></h1><p>服务契约通常是通过WSDL文件描述的。<em>spring-ws提供根据XSD和规则配置生成WSDL文件，因此手工编写WSDL在并不是必须的。</em></p>
<h2><span id="bian-xie-wsdl-bu-zou">编写WSDL步骤</span><a href="#bian-xie-wsdl-bu-zou" class="header-anchor">#</a></h2><ol>
<li><p>以一个标准的方式开始，并引入存在的XSD文件（此处XSD也可以是已经发布到公共地址上的公开XSD）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wsdl:definitions</span> <span class="attr">xmlns:wsdl</span>=<span class="string">"http://schemas.xmlsoap.org/wsdl/"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">xmlns:soap</span>=<span class="string">"http://schemas.xmlsoap.org/wsdl/soap/"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">xmlns:schema</span>=<span class="string">"http://mycompany.com/hr/schemas"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">xmlns:tns</span>=<span class="string">"http://mycompany.com/hr/definitions"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">targetNamespace</span>=<span class="string">"http://mycompany.com/hr/definitions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wsdl:types</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:import</span> <span class="attr">namespace</span>=<span class="string">"http://mycompany.com/hr/schemas"</span> <span class="attr">schemaLocation</span>=<span class="string">"hr.xsd"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">wsdl:types</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义message，message可以有多个</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wsdl:message</span> <span class="attr">name</span>=<span class="string">"HolidayRequest"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">wsdl:part</span> <span class="attr">element</span>=<span class="string">"schema:HolidayRequest"</span> <span class="attr">name</span>=<span class="string">"HolidayRequest"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">wsdl:message</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将message作为一个动作加入到port type中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wsdl:portType</span> <span class="attr">name</span>=<span class="string">"HumanResource"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">wsdl:operation</span> <span class="attr">name</span>=<span class="string">"Holiday"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">wsdl:input</span> <span class="attr">message</span>=<span class="string">"tns:HolidayRequest"</span> <span class="attr">name</span>=<span class="string">"HolidayRequest"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">wsdl:operation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">wsdl:portType</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>binding</code>定义客户端如何引用动作</p>
</li>
<li><p><code>service</code>定义服务所在位置</p>
</li>
</ol>
<p><em>前3步定义WSDL的抽象部分，4/5步为具体定义</em></p>
<p>最终完整的WSDL文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wsdl:definitions</span> <span class="attr">xmlns:wsdl</span>=<span class="string">"http://schemas.xmlsoap.org/wsdl/"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">xmlns:soap</span>=<span class="string">"http://schemas.xmlsoap.org/wsdl/soap/"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">xmlns:schema</span>=<span class="string">"http://mycompany.com/hr/schemas"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">xmlns:tns</span>=<span class="string">"http://mycompany.com/hr/definitions"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">targetNamespace</span>=<span class="string">"http://mycompany.com/hr/definitions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wsdl:types</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:import</span> <span class="attr">namespace</span>=<span class="string">"http://mycompany.com/hr/schemas"</span>              </span></span><br><span class="line"><span class="tag">                <span class="attr">schemaLocation</span>=<span class="string">"hr.xsd"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">wsdl:types</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wsdl:message</span> <span class="attr">name</span>=<span class="string">"HolidayRequest"</span>&gt;</span>                                         </span><br><span class="line">        <span class="tag">&lt;<span class="name">wsdl:part</span> <span class="attr">element</span>=<span class="string">"schema:HolidayRequest"</span> <span class="attr">name</span>=<span class="string">"HolidayRequest"</span>/&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">wsdl:message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wsdl:portType</span> <span class="attr">name</span>=<span class="string">"HumanResource"</span>&gt;</span>                                         </span><br><span class="line">        <span class="tag">&lt;<span class="name">wsdl:operation</span> <span class="attr">name</span>=<span class="string">"Holiday"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wsdl:input</span> <span class="attr">message</span>=<span class="string">"tns:HolidayRequest"</span> <span class="attr">name</span>=<span class="string">"HolidayRequest"</span>/&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">wsdl:operation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">wsdl:portType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wsdl:binding</span> <span class="attr">name</span>=<span class="string">"HumanResourceBinding"</span> <span class="attr">type</span>=<span class="string">"tns:HumanResource"</span>&gt;</span>          </span><br><span class="line">        <span class="tag">&lt;<span class="name">soap:binding</span> <span class="attr">style</span>=<span class="string">"document"</span>                                           </span></span><br><span class="line"><span class="tag">            <span class="attr">transport</span>=<span class="string">"http://schemas.xmlsoap.org/soap/http"</span>/&gt;</span>                   </span><br><span class="line">        <span class="tag">&lt;<span class="name">wsdl:operation</span> <span class="attr">name</span>=<span class="string">"Holiday"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">soap:operation</span> <span class="attr">soapAction</span>=<span class="string">"http://mycompany.com/RequestHoliday"</span>/&gt;</span>   </span><br><span class="line">            <span class="tag">&lt;<span class="name">wsdl:input</span> <span class="attr">name</span>=<span class="string">"HolidayRequest"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">soap:body</span> <span class="attr">use</span>=<span class="string">"literal"</span>/&gt;</span>                                       </span><br><span class="line">            <span class="tag">&lt;/<span class="name">wsdl:input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">wsdl:operation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">wsdl:binding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wsdl:service</span> <span class="attr">name</span>=<span class="string">"HumanResourceService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wsdl:port</span> <span class="attr">binding</span>=<span class="string">"tns:HumanResourceBinding"</span> <span class="attr">name</span>=<span class="string">"HumanResourcePort"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">soap:address</span> <span class="attr">location</span>=<span class="string">"http://localhost:8080/holidayService/"</span>/&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">wsdl:port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">wsdl:service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">wsdl:definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="endpoint">Endpoint</span><a href="#endpoint" class="header-anchor">#</a></h2><p>Endpoint是处理请求的XML消息的实现，通常通过<code>@Endpoint</code>注解来完成，在endpoint类中可以定义多个方法来处理不同的请求。</p>
<h3><span id="lu-you-payloadroot">路由<code>@PayloadRoot</code></span><a href="#lu-you-payloadroot" class="header-anchor">#</a></h3><p><code>@PayloadRoot</code>注解用语指明当前方法可以处理哪一类的请求。spring-ws中路由过程由<code>EndpointMapping</code>负责。</p>
<p>通过使用<code>PayloadRootAnnotationMethodEndpointMapping</code>实现根据消息内容来路由</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PayloadRoot</span>(namespace = <span class="string">"http://mycompany.com/hr/schemas"</span>, localPart = <span class="string">"HolidayRequest"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleHolidayRequest</span><span class="params">(@RequestPayload Element holidayRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="comment">///////</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>other ways…..</p>
<h2><span id="fa-bu-wsdl">发布WSDL</span><a href="#fa-bu-wsdl" class="header-anchor">#</a></h2><h3><span id="chuan-tong-xml-pei-zhi-fang-shi">传统XML配置方式</span><a href="#chuan-tong-xml-pei-zhi-fang-shi" class="header-anchor">#</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sws:dynamic-wsdl</span> <span class="attr">id</span>=<span class="string">"holiday"</span>                                </span></span><br><span class="line"><span class="tag">    <span class="attr">portTypeName</span>=<span class="string">"HumanResource"</span>                              </span></span><br><span class="line"><span class="tag">    <span class="attr">locationUri</span>=<span class="string">"/holidayService/"</span>                            </span></span><br><span class="line"><span class="tag">    <span class="attr">targetNamespace</span>=<span class="string">"http://mycompany.com/hr/definitions"</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">sws:xsd</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/hr.xsd"</span>/&gt;</span>                       </span><br><span class="line"><span class="tag">&lt;/<span class="name">sws:dynamic-wsdl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>web.xml中MessageDispacherServlet增加初始化配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>transformWsdlLocations<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="configration-fang-shi"><code>@Configration</code>方式</span><a href="#configration-fang-shi" class="header-anchor">#</a></h3><p>在创建MessageDispatcherServlet bean时，设置transformWsdlLocations为true即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public ServletRegistrationBean messageDispacherServlet(ApplicationContext applicationContext)&#123;</span><br><span class="line">    MessageDispatcherServlet servlet = new MessageDispatcherServlet();</span><br><span class="line">    servlet.setApplicationContext(applicationContext);</span><br><span class="line">    servlet.setTransformWsdlLocations(true);</span><br><span class="line">    return new ServletRegistrationBean(servlet, &quot;/services/*&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两种方式都可以动态发布WSDL，即不需要手动编写WSDL，在浏览器中类似<code>http://localhost:8080/holidayService/holiday.wsdl</code>链接即可看到WSDL。</p>
<h1><span id="gong-xiang-zu-jian">共享组件</span><a href="#gong-xiang-zu-jian" class="header-anchor">#</a></h1><p>在spring-ws中，在客户端和服务端会有很多共享的组件内容，它们共同展现了构建的webservice，这些组件可能我们并不会直接引用，但是理解它们十分有必要。</p>
<h2><span id="webservice-message">webservice message</span><a href="#webservice-message" class="header-anchor">#</a></h2><h4><span id="webservicemessage"><code>WebServiceMessage</code></span><a href="#webservicemessage" class="header-anchor">#</a></h4><p>spring-ws中的一个核心接口。<code>WebServiceMessage</code>展示了与协议无关的XML消息，接口代码很简单，只有定义了三个方法，返回消息载体的<code>javax.xml.transform.Source</code>和<code>javax.xml.transform.Result</code>以及一个写出消息流的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebServiceMessage</span> </span>&#123;</span><br><span class="line">    <span class="function">Source <span class="title">getPayloadSource</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Result <span class="title">getPayloadResult</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(OutputStream var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>XML的操作方式有很多种，不通操作对<code>Source</code>和<code>Result</code>的包装如下所示：</p>
<table>
<thead>
<tr>
<th>Source/Result的实现</th>
<th>包装的XML</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>javax.xml.transform.dom.DOMSource</code></td>
<td><code>org.w3c.dom.Node</code></td>
</tr>
<tr>
<td><code>javax.xml.transform.dom.DOMResult</code></td>
<td><code>org.w3c.dom.Node</code></td>
</tr>
<tr>
<td><code>javax.xml.transform.sax.SAXSource</code></td>
<td><code>org.xml.sax.InputSource</code> and <code>org.xml.sax.XMLReader</code></td>
</tr>
<tr>
<td><code>javax.xml.transform.sax.SAXResult</code></td>
<td><code>org.xml.sax.ContentHandler</code></td>
</tr>
<tr>
<td><code>javax.xml.transform.stream.StreamSource</code></td>
<td><code>java.io.File</code>, <code>java.io.InputStream</code>, or <code>java.io.Reader</code></td>
</tr>
<tr>
<td><code>javax.xml.transform.stream.StreamResult</code></td>
<td><code>java.io.File</code>, <code>java.io.OutputStream</code>, or <code>java.io.Writer</code></td>
</tr>
</tbody>
</table>
<h4><span id="soapmessage"><code>SoapMessage</code></span><a href="#soapmessage" class="header-anchor">#</a></h4><p><code>SoapMessage</code>是<code>WebServiceMessage</code>的实现类，包含了SOAP的一些特性方法。一般情况下，不应当依赖或者直接使用<code>SoapMessage</code>，因为我们可以在<code>WebServiceMessage</code>中通过<code>getPayloadSource()</code>和<code>getPayloadResult()</code>获取到SOAP消息体的内容，因此只有在需要增加Header、获取附件等SOAP特定的动作时，才应当将<code>WebServiceMessage</code>转换为<code>SoapMessage</code>。</p>
<h4><span id="xiao-xi-gong-han">消息工厂</span><a href="#xiao-xi-gong-han" class="header-anchor">#</a></h4><p>spring-ws的消息主要通过<code>WebServiceMessageFactory</code>来生产，该接口之定义了两个方法，一个送来生产空消息，一个通过消息流生产消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebServiceMessageFactory</span> </span>&#123;</span><br><span class="line">	<span class="function">WebServiceMessage <span class="title">createWebServiceMessage</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">WebServiceMessage <span class="title">createWebServiceMessage</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> InvalidXmlException, IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>WebServiceMessageFactor</code>主要有两个具体实现，SAAJ（SOAP with Attachments API for Java）和基于AXIS2的AXIOM（AXIS Object Model）。</p>
<ul>
<li><p><code>SaajSoapMessageFactory</code></p>
<p>从J2EE1.4开始就存在，可以适用于大部分的应用服务器。</p>
<p>SAAJ是基于DOM的，所有的SOAP消息都是保存在内存中的，因此<strong>如果消息体比较大或者内存紧张的情况，不适合使用SAAJ，而应当适用AXIOM</strong>。</p>
<p>weblogic9实现SAAJ1.2有一个BUG，虽然它实现了SAAJ1.2的所有接口，但是在调用时会抛出<code>UnsupportedOperationException</code>,spring-ws在weblogic9中通过使用SAAJ1.1版本来解决这个问题。</p>
</li>
<li><p><code>AxiomSoapMessageFactory</code></p>
<p><code>AxiomSoapMessageFactoyr</code>使用AXIS2 Object Model来创建Soap消息，它主要基于StAX（Stream API for XML）。</p>
<p>StAX读取XML消息的时候采取拉取的机制，因此读取大消息的时候效率会更好。</p>
<p>需要注意<code>payloadCaching</code>的设置，默认为true，表示消息只能读取一次。</p>
<p>AXIOM支持在<code>StreamingWebServiceMessage</code>中定义的完整消息流，可以处理支持JAXB2的对象。</p>
</li>
</ul>
<p><code>SaajSoapMessageFactor</code>和<code>AxiomSoapMessageFactory</code>都有<code>soapVersion</code>属性，默认是 1.1，也可以设置为1.2</p>
<h3><span id="messagecontext"><code>MessageContext</code></span><a href="#messagecontext" class="header-anchor">#</a></h3><p>在webservice中，消息通常是成对出现的。客户端创建请求消息，经过一系列的转换发送到服务端；服务端创建响应消息返回给客户端。</p>
<p>spring-ws在一个请求链中存在一个上下文，即<code>MessageContext</code>，保存了请求和响应消息的属性。客户端的上下文是<code>WebServiceTemplate</code>创建的，服务端的上下文是从指定的输入流中读取的，比如HTTP是从<code>HttpServletRequest</code>中读取，<code>HttpServletResponse</code>中响应。</p>
<h3><span id="transportcontext"><code>TransportContext</code></span><a href="#transportcontext" class="header-anchor">#</a></h3><p>SOAP的一个关键信息是传输无关，因此spring-ws不支持HTTP通过URL请求，而是支持通过消息内容来请求。</p>
<p>有时候可能需要获取客户端和服务端的底层传输信息，spring-ws中有一个传输上下文，及<code>TransportContext</code>，从<code>TransportContext</code>中可以获取底层的<code>WebServiceConnection</code>(在服务端实质上一般是<code>HttpServletConnetion</code>，客户端一般是<code>HttpUrlConnection</code>或者<code>CommonsHttpConnection</code>）。</p>
<p>比如在服务端想获取请求的IP地址，可以如下方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TransportContext context = TransportContextHolder.getTransportContext();</span><br><span class="line">HttpServletConnection connection = (HttpServletConnection )context.getConnection();</span><br><span class="line">HttpServletRequest request = connection.getHttpServletRequest();</span><br><span class="line">String ipAddress = request.getRemoteAddr();</span><br></pre></td></tr></table></figure>
<h1><span id="xiao-xi-ji-lu-yu-gen-zong">消息记录与跟踪</span><a href="#xiao-xi-ji-lu-yu-gen-zong" class="header-anchor">#</a></h1><p><em>保证Commons Logging是1.1或以上版本，不要集成Log4J的TRACE级别。</em></p>
<p>服务端：</p>
<p><code>org.springframework.ws.server.MessageTracing</code></p>
<p><code>org.springframework.ws.server.MessageTracing.sent</code></p>
<p><code>org.springframework.ws.server.MessageTracing.received</code></p>
<p>客户端：</p>
<p><code>org.springframework.ws.client.MessageTracing.sent</code></p>
<p><code>org.springframework.ws.client.MessageTracing.received</code></p>
<p>log4j.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log4j.rootCategory=INFO, stdout</span><br><span class="line">log4j.logger.org.springframework.ws.client.MessageTracing.sent=TRACE</span><br><span class="line">log4j.logger.org.springframework.ws.client.MessageTracing.received=DEBUG</span><br><span class="line"></span><br><span class="line">log4j.logger.org.springframework.ws.server.MessageTracing=DEBUG</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%p [%c&#123;3&#125;] %m%n</span><br></pre></td></tr></table></figure>
<hr>
<h1><span id="spring-ws-fu-wu-duan">spring-ws服务端</span><a href="#spring-ws-fu-wu-duan" class="header-anchor">#</a></h1><h2><span id="messagedispatcher">MessageDispatcher</span><a href="#messagedispatcher" class="header-anchor">#</a></h2><p>spring-ws服务端的核心是<code>MessageDispatcher</code>，它接收并转发webservice请求到<code>@Endpoint</code>上去。spring-ws处理XML极其灵活，一个endpoint可以处理DOM家族的W3C DOM，JDOM，dom4j，XOM，也可以处理性能较好的SAX和StAX，还可以处理通过XPath从消息中获取信息，甚至是像JAXB，Castor，XMLBeans，JiBX，XStream的编组技术实现对象与XML的互相转换。</p>
<p><code>MessageDispatcher</code>的处理流程图</p>
<p><img src="/2019/11/05/spring-ws/sequence.png" alt="MessageDispatcher流程图"></p>
<ol>
<li>通过搜索<code>EndpointMappings</code>找到合适的endpoint，执行调用链(pre-processors, post-processors, and endpoints) ；</li>
<li>搜索Adaptor，<code>MessageDispatcher</code>委派Adaptor调用endpoint；</li>
<li>原路径返回响应消息。</li>
</ol>
<p>消息转发运行在message context上，并不传输特定的输入输出流，因此特定的传输需要读入到<code>MessageContext</code>中。HTTP传输是通过一个Spring Web的<code>HandlerIntercepor</code>,<code>WebServiceMessageReceiverHandlerAdapter</code>来实现的，通过<code>MessageDispatcherServlet</code>来转发请求。</p>
<h2><span id="chuan-shu">传输</span><a href="#chuan-shu" class="header-anchor">#</a></h2><p>spring-ws支持多种传输协议，一般使用HTTP传输，也可以支持JMS和email。</p>
<h3><span id="messagedispatcherservlet"><code>MessageDispatcherServlet</code></span><a href="#messagedispatcherservlet" class="header-anchor">#</a></h3><p><code>MessageDispatcherServlet</code>是一个标准的<code>Servlet</code>，与spring web的<code>DispatcherServlet</code>的使用方式相同，它是<code>MessageDispather</code>的包装实现。</p>
<p><code>MessageDispatcherServlet</code>可以通过设置transformWsdlLocations属性为true来动态发布WSDL。</p>
<h3><span id="qian-ru-shi-http-fu-wu-qi">嵌入式HTTP服务器</span><a href="#qian-ru-shi-http-fu-wu-qi" class="header-anchor">#</a></h3><p>spring-ws提供了一种基于JRE1.6的HTTP服务器的传输方式。这种方式使用比较简单，不需要任何外部的依赖，只需要定义一个服务器实例来处理请求即可。HTTP的一个关键工厂Bean是：<code>SimpleHttpServerFactoryBean</code>。</p>
<p>spring-ws中两个处理htpp的重要类：<code>WsdlDefinitionHttpHandler</code>和<code>WebServiceMessageReceiverHttpHandler</code>。</p>
<ul>
<li><code>WsdlDefinitionHttpHandler</code>负责处理获取<code>WsdlDefinition</code>的GET请求</li>
<li><code>WebServiceMessageReceiverHttpHandler</code>通过<code>WebServiceMessageFactory</code>（通常是<code>SaajSoapMessageFactory</code>）和<code>WebServiceMessageReceiver</code>（通常是<code>SoapMessageDispatcher</code>）来处理webservice请求。</li>
</ul>
<p>简单的配置实例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.saaj.SaajSoapMessageFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageReceiver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.server.SoapMessageDispatcher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endpointMappings"</span> <span class="attr">ref</span>=<span class="string">"endpointMapping"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"endpointMapping"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.server.endpoint.mapping.PayloadRootAnnotationMethodEndpointMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEndpoint"</span> <span class="attr">ref</span>=<span class="string">"stockEndpoint"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"httpServer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.remoting.support.SimpleHttpServerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contexts"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"/StockService.wsdl"</span> <span class="attr">value-ref</span>=<span class="string">"wsdlHandler"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"/StockService"</span> <span class="attr">value-ref</span>=<span class="string">"soapHandler"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"soapHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.transport.http.WebServiceMessageReceiverHttpHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageFactory"</span> <span class="attr">ref</span>=<span class="string">"messageFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageReceiver"</span> <span class="attr">ref</span>=<span class="string">"messageReceiver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"wsdlHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.transport.http.WsdlDefinitionHttpHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"definition"</span> <span class="attr">ref</span>=<span class="string">"wsdlDefinition"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="xmpp-chuan-shu">XMPP传输</span><a href="#xmpp-chuan-shu" class="header-anchor">#</a></h3><p>spring-ws2.0开始引入了XMPP（Jabber），基于<a href="https://www.igniterealtime.org/projects/smack/index.jsp" target="_blank" rel="noopener">Smack</a>类库。</p>
<p>spring-ws XMPP使用方式类似于其他协议，<code>WebServiceTemplate</code>通过<code>XmppMessageSende</code>发送消息， <code>MessageDispatcher</code>转发消息给<code>XmppMessageReceiver</code>。</p>
<p>简单配置实例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.saaj.SaajSoapMessageFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connection"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.transport.xmpp.support.XmppConnectionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"jabber.org"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messagingReceiver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.transport.xmpp.XmppMessageReceiver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageFactory"</span> <span class="attr">ref</span>=<span class="string">"messageFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection"</span> <span class="attr">ref</span>=<span class="string">"connection"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageReceiver"</span> <span class="attr">ref</span>=<span class="string">"messageDispatcher"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageDispatcher"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.server.SoapMessageDispatcher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endpointMappings"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"org.springframework.ws.server.endpoint.mapping.PayloadRootAnnotationMethodEndpointMapping"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEndpoint"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.example.MyEndpoint"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="endpoints">Endpoints</span><a href="#endpoints" class="header-anchor">#</a></h2><p>Endpoints是spring-ws服务端的核心概念，spring-ws通过Endpoints来定义服务端动作，来接收处理XML请求，并生成响应XML。spring-ws处理和响应XML方式有很多种方式。</p>
<p>可以通过<code>@Endpoint</code>注解来创建endpoint，每一个endpoint都可以定义多个处理请求的方法（支持前面章节提到的所有xml），一般通过<code>@PayloadRoot</code>可以指定每一个方法处理哪一类的消息，</p>
<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> samples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.server.endpoint.annotation.Endpoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.server.endpoint.annotation.PayloadRoot;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.soap.SoapHeader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Endpoint</span>                                                                                      </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationOrderEndpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span>                                                                                   </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AnnotationOrderEndpoint</span><span class="params">(OrderService orderService)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.orderService = orderService;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PayloadRoot</span>(localPart = <span class="string">"order"</span>, namespace = <span class="string">"http://samples"</span>)                              </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">(@RequestPayload Element orderElement)</span> </span>&#123;                                    </span><br><span class="line">    Order order = createOrder(orderElement);</span><br><span class="line">    orderService.createOrder(order);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PayloadRoot</span>(localPart = <span class="string">"orderRequest"</span>, namespace = <span class="string">"http://samples"</span>)                       </span><br><span class="line">  <span class="meta">@ResponsePayload</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(@RequestPayload OrderRequest orderRequest, SoapHeader header)</span> </span>&#123;        </span><br><span class="line">    checkSoapHeaderForSomething(header);</span><br><span class="line">    <span class="keyword">return</span> orderService.getOrder(orderRequest.getId());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>order方法通过<code>@RequestPayload</code>注解的<code>Element</code>为请求参数，是一个DOM的Element，该方法<code>void</code>即没有响应。</li>
<li>getOrder请求参数是OrderRequest，OrderReqeust应当是一个通过<code>@XmlRootElement</code>注解的JAXB2对象，参数SoapHeader表示请求报文里面需要包含SOAP头信息。<code>ResponsePayload</code>表示getOrder会有个Order类型的响应。</li>
</ul>
<p>XML配置方式的spring项目，需要配置启用webserivce的驱动</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:sws</span>=<span class="string">"http://www.springframework.org/schema/web-services"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/web-services</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/web-services/web-services.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">sws:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>@Configuration</code>配置方式，则增加<code>@EnableWs</code>注解即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWs</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringWsConfig</span>  <span class="keyword">extends</span> <span class="title">WsConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Bean definitions go here</span></span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(List&lt;EndpointInterceptor&gt; interceptors)</span> </span>&#123;</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> MyInterceptor());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;MethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;</span><br><span class="line">    argumentResolvers.add(<span class="keyword">new</span> MyArgumentResolver());</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// More overridden methods ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="endpoints-zhong-de-chu-li-xiao-xi-de-fang-fa">Endpoints中的处理消息的方法</span><a href="#endpoints-zhong-de-chu-li-xiao-xi-de-fang-fa" class="header-anchor">#</a></h3><p>通过<code>@RequestPayload</code>注解将请求消息映射到载体中。</p>
<p>下表展示了消息处理支持的参数类型，以及是否应该被<code>@RequestPayload</code>注解修饰。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Supported parameter types</th>
<th><code>@RequestPayload</code> required?</th>
<th>Additional notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>TrAX</td>
<td><code>javax.xml.transform.Source</code> and sub-interfaces (<code>DOMSource</code>, <code>SAXSource</code>, <code>StreamSource</code>, and <code>StAXSource</code>)</td>
<td>Yes</td>
<td>Enabled by default.</td>
</tr>
<tr>
<td>W3C DOM</td>
<td><code>org.w3c.dom.Element</code></td>
<td>Yes</td>
<td>Enabled by default</td>
</tr>
<tr>
<td>dom4j</td>
<td><code>org.dom4j.Element</code></td>
<td>Yes</td>
<td>Enabled when dom4j is on the classpath.</td>
</tr>
<tr>
<td>JDOM</td>
<td><code>org.jdom.Element</code></td>
<td>Yes</td>
<td>Enabled when JDOM is on the classpath.</td>
</tr>
<tr>
<td>XOM</td>
<td><code>nu.xom.Element</code></td>
<td>Yes</td>
<td>Enabled when XOM is on the classpath.</td>
</tr>
<tr>
<td>StAX</td>
<td><code>javax.xml.stream.XMLStreamReader</code> and <code>javax.xml.stream.XMLEventReader</code></td>
<td>Yes</td>
<td>Enabled when StAX is on the classpath.</td>
</tr>
<tr>
<td>XPath</td>
<td>Any boolean, double, <code>String</code>, <code>org.w3c.Node</code>, <code>org.w3c.dom.NodeList</code>, or type that can be converted from a <code>String</code> by a Spring 3 <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/validation.html#core-convert" target="_blank" rel="noopener">conversion service</a>, and that is annotated with <code>@XPathParam</code>.</td>
<td>No</td>
<td>Enabled by default, see <a href="https://docs.spring.io/spring-ws/docs/current/reference/#server-xpath-param" target="_blank" rel="noopener">the section called <code>XPathParam</code></a>.</td>
</tr>
<tr>
<td>Message context</td>
<td><code>org.springframework.ws.context.MessageContext</code></td>
<td>No</td>
<td>Enabled by default.</td>
</tr>
<tr>
<td>SOAP</td>
<td><code>org.springframework.ws.soap.SoapMessage</code>, <code>org.springframework.ws.soap.SoapBody</code>, <code>org.springframework.ws.soap.SoapEnvelope</code>, <code>org.springframework.ws.soap.SoapHeader</code>, and <code>org.springframework.ws.soap.SoapHeaderElement</code>s when used in combination with the <code>@SoapHeader</code> annotation.</td>
<td>No</td>
<td>Enabled by default.</td>
</tr>
<tr>
<td>JAXB2</td>
<td>Any type that is annotated with <code>javax.xml.bind.annotation.XmlRootElement</code>, and <code>javax.xml.bind.JAXBElement</code>.</td>
<td>Yes</td>
<td>Enabled when JAXB2 is on the classpath.</td>
</tr>
<tr>
<td>OXM</td>
<td>Any type supported by a Spring OXM <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/oxm.html#d0e26164" target="_blank" rel="noopener"><code>Unmarshaller</code></a>.</td>
<td>Yes</td>
<td>Enabled when the <code>unmarshaller</code> attribute of <code>&lt;sws:annotation-driven/&gt;</code> is specified.</td>
</tr>
</tbody>
</table>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@RequestPayload Element element)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@RequestPayload DOMSource domSource, SoapHeader header)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@RequestPayload MyJaxb2Object requestObject, @RequestPayload Element element, Message messageContext)</span></span></span><br></pre></td></tr></table></figure>
<p>如需扩展自定义参数类型，则需要参见<code>DefaultMethodEndpointAdapter</code>和 <code>MethodArgumentResolver</code></p>
<h4><span id="xpathparam-bu-chong-shuo-ming"><code>@XPathParam</code>补充说明</span><a href="#xpathparam-bu-chong-shuo-ming" class="header-anchor">#</a></h4><p>通过XPath标注指定节点，取得指定节点的值，以便完成相应的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> samples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Source;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.server.endpoint.annotation.Endpoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.server.endpoint.annotation.Namespace;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.server.endpoint.annotation.PayloadRoot;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.server.endpoint.annotation.XPathParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Endpoint</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationOrderEndpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AnnotationOrderEndpoint</span><span class="params">(OrderService orderService)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.orderService = orderService;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PayloadRoot</span>(localPart = <span class="string">"orderRequest"</span>, namespace = <span class="string">"http://samples"</span>)</span><br><span class="line">  <span class="meta">@Namespace</span>(prefix = <span class="string">"s"</span>, uri=<span class="string">"http://samples"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(@XPathParam(<span class="string">"/s:orderRequest/@id"</span>)</span> <span class="keyword">int</span> orderId) </span>&#123;</span><br><span class="line">    Order order = orderService.getOrder(orderId);</span><br><span class="line">    <span class="comment">// create Source from order and return it</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>@XPathParam</code>注解的情况下，XPath支持的数据类型</p>
<ul>
<li><code>boolean</code> or <code>Boolean</code></li>
<li><code>double</code> or <code>Double</code></li>
<li><code>String</code></li>
<li><code>Node</code></li>
<li><code>NodeList</code></li>
</ul>
<h4><span id="xiao-xi-chu-li-fang-fa-de-fan-hui-lei-xing">消息处理方法的返回类型</span><a href="#xiao-xi-chu-li-fang-fa-de-fan-hui-lei-xing" class="header-anchor">#</a></h4><p>又返回消息的处理方法，需要明确指定返回类型，并使用<code>@ResponsePayload</code>注解该方法。</p>
<p>下表展示了支持的返回类型，以及是否应该被<code>@ResponsePayload</code>注解标注。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Supported return types</th>
<th><code>@ResponsePayload</code> required?</th>
<th>Additional notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>No response</td>
<td><code>void</code></td>
<td>No</td>
<td>Enabled by default.</td>
</tr>
<tr>
<td>TrAX</td>
<td><code>javax.xml.transform.Source</code> and sub-interfaces (<code>DOMSource</code>, <code>SAXSource</code>, <code>StreamSource</code>, and <code>StAXSource</code>)</td>
<td>Yes</td>
<td>Enabled by default.</td>
</tr>
<tr>
<td>W3C DOM</td>
<td><code>org.w3c.dom.Element</code></td>
<td>Yes</td>
<td>Enabled by default</td>
</tr>
<tr>
<td>dom4j</td>
<td><code>org.dom4j.Element</code></td>
<td>Yes</td>
<td>Enabled when dom4j is on the classpath.</td>
</tr>
<tr>
<td>JDOM</td>
<td><code>org.jdom.Element</code></td>
<td>Yes</td>
<td>Enabled when JDOM is on the classpath.</td>
</tr>
<tr>
<td>XOM</td>
<td><code>nu.xom.Element</code></td>
<td>Yes</td>
<td>Enabled when XOM is on the classpath.</td>
</tr>
<tr>
<td>JAXB2</td>
<td>Any type that is annotated with <code>javax.xml.bind.annotation.XmlRootElement</code>, and <code>javax.xml.bind.JAXBElement</code>.</td>
<td>Yes</td>
<td>Enabled when JAXB2 is on the classpath.</td>
</tr>
<tr>
<td>OXM</td>
<td>Any type supported by a Spring OXM <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/oxm.html#d0e26096" target="_blank" rel="noopener"><code>Marshaller</code></a>.</td>
<td>Yes</td>
<td>Enabled when the <code>marshaller</code> attribute of <code>&lt;sws:annotation-driven/&gt;</code> is specified.</td>
</tr>
</tbody>
</table>
<h2><span id="endpoint-mappings">Endpoint mappings</span><a href="#endpoint-mappings" class="header-anchor">#</a></h2><p>Endpoint mapping负责映射请求到对应的endpoints上。</p>
<p>每一个<code>EndpointMapping</code>都会提供一个<code>EndpointInvocationChain</code>,即endpoint的调用链。<code>EndpointInvocationChain</code>持有endpoint的对应请求，以及请求和响应的拦截器列表。当一个请求进来时，<code>MessageDispacher</code>会让对应的endpoint mapping来检查请求并创建合适的<code>EndpointInvocationChain</code>，然后<code>MessageDispacher</code>调用endpoint和调用链上的所有拦截器。</p>
<p>Interceptors拦截器，虽然是endpoint mapping的可选配置，但是它可以提供非常丰富的自定义功能。比如可以通过拦截器使得一个endpoint不仅仅支持基础消息处理，还可以按需制定SOAP消息头。</p>
<p>大部分的endpoint mapping都继承自<code>AbstractEndpointMapping</code>，在<code>AbstractEndpointMapping</code>中定义了一个<code>interceptors</code>的属性，持有了调用链中可供使用的拦截器列表。</p>
<p>每一个endpoint可以处理一个或多个请求，这个特性由<code>MethodEndpoitMapping</code>负责完成。如以下两个endpoint mapping可以直接是请求指向方法（<strong>需要通过<code>&lt;sws:annotation-driven/&gt;</code>配置使之生效</strong>）：</p>
<ul>
<li><code>PayloadRootAnnotationMethodEndpointMapping</code>，通过使用<code>@PayloadRoot</code>注解和<code>localPart</code>、<code>namespace</code>标注方法，使得持有指定根元素名称的消息可以请求到。</li>
<li><code>SoapActionAnnotationMethodEndpointMapping</code>，通过使用<code>@SoapAction</code>注解来标注方法支持指定的SOAP动作，使得持有指定SOAPAction消息头的请求可以调用到。</li>
</ul>
<h3><span id="ws-addressing">WS-Addressing</span><a href="#ws-addressing" class="header-anchor">#</a></h3><p>WS-Addressing用来指定和传输无关的路由机制。通过SOAP消息头中的<code>To</code>和<code>Action</code>来指明SOAP消息的目的地址和动作。同时WS-Addressing也允许定义消息返回地址（处理正常响应和错误的地址，默认是没有消息返回地址，即消息原路返回或者没有返回）和一个与消息关联的唯一messageID。</p>
<p>在spring-ws中，WS-Addressing是一个endpoint mapping的实现，通过映射，可以将WS-Addressing的actions和endpoint关联在一起，与<code>SoapActionAnnotationMethodEndpointMapping</code>类似。</p>
<p>spring-ws对WS-Addressing的实现是<code>AnnotationActionMethodMapping</code>类，它与<code>SoapActionAnnotationMethodEndpointMapping</code>类似，但是没有继续使用SOAP Action的消息头，而是使用WS-Addressing的消息头，通过<code>@Action</code>注解来标注方法，使用方式与<code>@PayloadRoot</code>和<code>@SoapAction</code>注解类似。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> samples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.server.endpoint.annotation.Endpoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.soap.addressing.server.annotation.Action</span><br><span class="line"></span><br><span class="line"><span class="meta">@Endpoint</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationOrderEndpoint</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnnotationOrderEndpoint</span><span class="params">(OrderService orderService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"http://samples/RequestOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(OrderRequest orderRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.getOrder(orderRequest.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"http://samples/CreateOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        orderService.createOrder(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，在使用<code>@Action</code>注解时，如果类上使用了<code>@Address</code>注解，请求进来时会匹配<code>To</code>属性。</p>
<p>给指定消息返回地址返回消息时，还需要设置<code>messageSenders</code>属性，可以在<code>MessageSender</code>中实现，类似于<code>WebServiceTemplate</code>中实现的一样。</p>
<h3><span id="endpointintercepor"><code>EndpointIntercepor</code></span><a href="#endpointintercepor" class="header-anchor">#</a></h3><p>所有的拦截前都需要实现<code>org.springframework.ws.server.EndpointInterceptor</code>接口，该接口只定义了四个方法，一个处理进入真正的endpoit前的请求，一个处理响应消息，一个处理错误，最后一个在请求响应处理流程结束后执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.ws.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.context.MessageContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EndpointInterceptor</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 真正进入endpoint之前执行，可以提前结束请求，并自定义响应</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">handleRequest</span><span class="params">(MessageContext messageContext, Object endpoint)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在响应的时候执行，只有endpoint成功执行，并返回时才会执行</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">handleResponse</span><span class="params">(MessageContext messageContext, Object endpoint)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 出现错误时执行</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">handleFault</span><span class="params">(MessageContext messageContext, Object endpoint)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在请求和响应流程结束后执行</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 2.0.2</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(MessageContext messageContext, Object endpoint, Exception ex)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>XML中拦截器的配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sws:interceptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"samples.MyGlobalInterceptor"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sws:payloadRoot</span> <span class="attr">namespaceUri</span>=<span class="string">"http://www.example.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"samples.MyPayloadRootInterceptor"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">sws:payloadRoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sws:soapAction</span> <span class="attr">value</span>=<span class="string">"http://www.example.com/SoapAction"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"samples.MySoapActionInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mySoapActionInterceptor2"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">sws:soapAction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sws:interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySoapActionInterceptor2"</span> <span class="attr">class</span>=<span class="string">"samples.MySoapActionInterceptor2"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>@Configuration</code>拦截器配置方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWs</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWsConfiguration</span> <span class="keyword">extends</span> <span class="title">WsConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(List&lt;EndpointInterceptor&gt; interceptors)</span> </span>&#123;</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> MyPayloadRootInterceptor());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sping-ws提供了一些标准的拦截器实现。</p>
<h4><span id="guan-yu-ri-zhi-de-liang-ge-lan-jie-qi">关于日志的两个拦截器</span><a href="#guan-yu-ri-zhi-de-liang-ge-lan-jie-qi" class="header-anchor">#</a></h4><ul>
<li><code>PayloadLoggingIntercepor</code>，只会记录payload消息的日志。</li>
<li><code>SoapEnvelopeLoggingIntercepor</code>，记录整个SOAP报文，包括SOAP报文头。</li>
</ul>
<p>这两个拦截器都有logRequest和logResponse两个属性，可以通过设为为false，禁止记录对应日志。</p>
<h4><span id="payloadvalidatinginterceptor"><code>PayloadValidatingInterceptor</code></span><a href="#payloadvalidatinginterceptor" class="header-anchor">#</a></h4><p>sping-ws契约先行的一个好处就是可以对请求和响应的XML进行验证。<code>PayloadValidatingInterceptor</code>可以通过引用一个多个W3C XML或者RELAX NG的schemas，来验证请求或者响应，亦可同时验证二者。</p>
<p>XML配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"validatingInterceptor"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schema"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/orders.xsd"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validateRequest"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validateResponse"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="payloadtransforminginterceptor"><code>PayloadTransformingInterceptor</code></span><a href="#payloadtransforminginterceptor" class="header-anchor">#</a></h4><p>该拦截器基于XSLT，可以将payload转换成其他XML格式，在多版本的webservice中可以发挥较大的作用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transformingInterceptor"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.ws.server.endpoint.interceptor.PayloadTransformingInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"requestXslt"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/oldRequests.xslt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"responseXslt"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/oldResponses.xslt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="yi-chang-chu-li">异常处理</span><a href="#yi-chang-chu-li" class="header-anchor">#</a></h3><p>spring-ws通过<code>EndpointExceptionResolver</code>来处理endpoint的异常信息。<code>MessageDispacher</code>会自动捕获endpoint的异常解析器，不需要做显式的配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.ws.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.context.MessageContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines the interface for objects than can resolve exceptions thrown during endpoint execution.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EndpointExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Try to resolve the given exception that got thrown during on endpoint execution.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> messageContext current message context</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> endpoint		 the executed endpoint, or null if none chosen at the time of the exception</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> ex			 the exception that got thrown during endpoint execution</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if resolved; &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">resolveException</span><span class="params">(MessageContext messageContext, Object endpoint, Exception ex)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>EndpointExceptionResolver</code>默认实现是<code>SimpleSoapExceptionResolver</code>，可以通过实现<code>EndpointExceptionResolver</code>接口，增加自定义解析器覆盖默认实现。</p>
<h4><span id="soapfaultmappingexceptionresolver"><code>SoapFaultMappingExceptionResolver</code></span><a href="#soapfaultmappingexceptionresolver" class="header-anchor">#</a></h4><p>该异常解析器比<code>SimpleSoapExceptionResolver</code>实现更复杂一些， 它可以获取抛出异常的类名并将其映射到SOAP Fault中。</p>
<p>需要错误码的时候，endpoint默认的键值是<code>faultCode,faultString,locale</code>。如果没设置<code>faultString</code>，将默认为异常信息，如果没有设置<code>locale</code>，默认是英文。</p>
<p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exceptionResolver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultFault"</span> <span class="attr">value</span>=<span class="string">"SERVER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                org.springframework.oxm.ValidationFailureException=CLIENT,Invalid request</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>表示捕获<code>ValidationFailureException</code>异常时，给客户端的响应是<code>Invalid request</code>。响应示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SOAP-ENV:Envelope</span> <span class="attr">xmlns:SOAP-ENV</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SOAP-ENV:Body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">SOAP-ENV:Fault</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">faultcode</span>&gt;</span>SOAP-ENV:Client<span class="tag">&lt;/<span class="name">faultcode</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">faultstring</span>&gt;</span>Invalid request<span class="tag">&lt;/<span class="name">faultstring</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">SOAP-ENV:Fault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SOAP-ENV:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SOAP-ENV:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其他异常仍然是默认错误响应：带有异常信息的服务端异常。</p>
<p>spring-ws错误定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.ws.soap.server.endpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> javax.xml.namespace.QName;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines properties for a SOAP Fault. Used by the &#123;<span class="doctag">@code</span> SoapFaultDefinitionEditor&#125; and the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> SoapFaultMappingExceptionResolver&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> SoapFaultDefinitionEditor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> SoapFaultMappingExceptionResolver</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoapFaultDefinition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> QName CLIENT = <span class="keyword">new</span> QName(<span class="string">"CLIENT"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> QName RECEIVER = <span class="keyword">new</span> QName(<span class="string">"RECEIVER"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> QName SENDER = <span class="keyword">new</span> QName(<span class="string">"SENDER"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> QName SERVER = <span class="keyword">new</span> QName(<span class="string">"SERVER"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> QName faultCode;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String faultStringOrReason;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Locale locale = Locale.ENGLISH;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="soapfaultannotationexceptionresolver"><code>SoapFaultAnnotationExceptionResolver</code></span><a href="#soapfaultannotationexceptionresolver" class="header-anchor">#</a></h4><p>spring-ws支持在异常类上通过<code>@SoapFault</code>注解，表名当异常抛出时需要返回。在上下文中配置了<code>SoapFaultAnnotationExceptionResolver</code>，<code>@SoapFault</code>注解才可以生效。</p>
<p><code>@SopaFualt</code>注解中包含了<code>faultCode,faultString,locale</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.ws.soap.server.endpoint.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> javax.xml.namespace.QName;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Marks an exception class with the fault elements that should be returned whenever this exception is thrown.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.ws.soap.server.endpoint.SoapFaultAnnotationExceptionResolver</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SoapFault &#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">FaultCode <span class="title">faultCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">String <span class="title">customFaultCode</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">String <span class="title">faultStringOrReason</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">String <span class="title">locale</span><span class="params">()</span> <span class="keyword">default</span> "en"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> samples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.soap.server.endpoint.annotation.FaultCode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.soap.server.endpoint.annotation.SoapFault;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SoapFault</span>(faultCode = FaultCode.SERVER)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBusinessException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClientException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当抛出一个携带“Oops!”的<code>MyBisunessException</code>时，响应报文如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SOAP-ENV:Envelope</span> <span class="attr">xmlns:SOAP-ENV</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SOAP-ENV:Body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">SOAP-ENV:Fault</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">faultcode</span>&gt;</span>SOAP-ENV:Server<span class="tag">&lt;/<span class="name">faultcode</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">faultstring</span>&gt;</span>Oops!<span class="tag">&lt;/<span class="name">faultstring</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">SOAP-ENV:Fault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SOAP-ENV:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SOAP-ENV:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="fu-wu-duan-ce-shi">服务端测试</span><a href="#fu-wu-duan-ce-shi" class="header-anchor">#</a></h2><p>服务端测试主要有两种方法</p>
<ul>
<li>单元测试，为测试endpoint提供模拟（EasyMock，JMock等）响应。这种方式的好处似乎测试简单，缺点是并没有真正的将XML消息发送到调用链上。</li>
<li>集成测试</li>
</ul>
<h3><span id="fu-wu-duan-ji-cheng-ce-shi">服务端集成测试</span><a href="#fu-wu-duan-ji-cheng-ce-shi" class="header-anchor">#</a></h3><p>从spring-ws2.0开始引入集成测试的概念。</p>
<p>集成测试的相关特性位于<code>org.springframework.ws.test.server</code>包中，具体类<code>MockWebServiceClient</code>。期基本思想是客户端创建请求，并发送到<code>MessageDispacherServlet</code>，<code>MessageDispatcherServlet</code>转发到对应的endpoint上，endpoint处理请求并创建响应，客户端接口响应，比验证是否与注册的期望响应一致。</p>
<p><code>MockWebServiceClient</code>的典型使用方式如下：</p>
<ul>
<li>通过<code>MockWebServiceClient.createClient(ApplicationContext)</code> 或者<code>MockWebServiceClient.createClient(WebServiceMessageReceiver, WebServiceMessageFactory)</code>创建<code>MockWebServiceClient</code>实例。</li>
<li>调用<code>sendRequest(RequestCreator)</code>发送请求消息，<code>RequestCreator</code>默认使用spring-ws提供实现<code>RequestCreators</code>。</li>
<li>调用<code>andExpect(ResponseMatcher)</code>设置期望响应，<code>ResponseMatcher</code> 默认使用spring-ws提供的实现<code>ResponseMatchers</code> ，复杂响应可以对<code>andExpect(ResponseMatcher)</code>方法进行链式调用。</li>
</ul>
<h3><span id="requestcreator-he-requestcreators"><code>RequestCreator</code>和<code>RequestCreators</code></span><a href="#requestcreator-he-requestcreators" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.ws.test.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.WebServiceMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.WebServiceMessageFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RequestCreator</span> </span>&#123;</span><br><span class="line">    <span class="function">WebServiceMessage <span class="title">createRequest</span><span class="params">(WebServiceMessageFactory var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MockWebServiceClient</code>在请求endpoint前需要创建请求消息，<code>RequestCreator</code>就是完成创建请求的策略。<code>RequestCreator</code>的默认实现是<code>RequestCreators</code>。可以自定义实现<code>RequestCreator</code>，通过message工厂来生成请求消息，但这并没有必要，因为<code>RequestCreators</code>提供了一个 <code>withPayload()</code>方法，该方法可以根据给定的payload来生成<code>RequestCreator</code>，因此通常只需要导入<code>RequestCreators</code>既可。</p>
<h3><span id="responsematcher-he-responsematchers"><code>ResponseMatcher</code>和<code>ResponseMatchers</code></span><a href="#responsematcher-he-responsematchers" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.ws.test.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.WebServiceMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResponseMatcher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">match</span><span class="params">(WebServiceMessage var1, WebServiceMessage var2)</span> <span class="keyword">throws</span> IOException, AssertionError</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当请求到达endpoint处理后，<code>MockWebServiceClient</code>会收到响应，并验证响应是否符合预期，验证过程通过<code>ResponseMatcher</code>来完成。可以自定义实现<code>ResponseMatcher</code>，响应与预期不一致时抛出<code>AssertionError</code> ，同样这并么有必要，因为<code>ResponseMatchers</code>已经提供了标准实现。</p>
<p><code>ResponseMatchers</code>已经提供的响应匹配如下：</p>
<table>
<thead>
<tr>
<th><code>ResponseMatchers</code> method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>payload()</code></td>
<td>Expects a given response payload.</td>
</tr>
<tr>
<td><code>validPayload()</code></td>
<td>Expects the response payload to validate against given XSD schema(s).</td>
</tr>
<tr>
<td><code>xpath()</code></td>
<td>Expects a given XPath expression to exist, not exist, or evaluate to a given value.</td>
</tr>
<tr>
<td><code>soapHeader()</code></td>
<td>Expects a given SOAP header to exist in the response message.</td>
</tr>
<tr>
<td><code>noFault()</code></td>
<td>Expects that the response message does not contain a SOAP Fault.</td>
</tr>
<tr>
<td><code>mustUnderstandFault()</code>, <code>clientOrSenderFault()</code>, <code>serverOrReceiverFault()</code>, and <code>versionMismatchFault()</code></td>
<td>Expects the response message to contain a specific SOAP Fault.</td>
</tr>
</tbody>
</table>
<p>复杂响应的<code>andExpect()</code>调用链示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockClient.sendRequest(...).</span><br><span class="line"> andExpect(payload(expectedResponsePayload)).</span><br><span class="line"> andExpect(validPayload(schemaResource));</span><br></pre></td></tr></table></figure>
<h1><span id="spring-ws-ke-hu-duan">spring-ws客户端</span><a href="#spring-ws-ke-hu-duan" class="header-anchor">#</a></h1><p>spring-ws提供了丰富的客户关API，并且很好的继承了marshallers和unmarshallers技术，使得我们的项目代码只需要操作Java对象即可。</p>
<p>spring-ws在<code>org.springframework.ws.client.core</code>包中，提供了客户端的核心API，包括简化webservice使用的模板类，类似于JDBC的<code>JdbcTemplate</code>。spring-ws客户端模板类的设计遵循了spring模板类一贯的设计原则：模板类提供辅助方法完成常见操作，同时提供部分复杂场景的使用，委托用户自定义回调的实现。spring-ws的模板类提供了丰富的方法用户发送和接收XML消息，以及Java对象和XML互相转换的编组技术完成复杂操作。</p>
<h2><span id="ke-hu-duan-api">客户端API</span><a href="#ke-hu-duan-api" class="header-anchor">#</a></h2><h3><span id="webservicetemplate"><code>WebServiceTemplate</code></span><a href="#webservicetemplate" class="header-anchor">#</a></h3><p><code>WebServiceTemplate</code>是spring-ws客户端的核心类，包含了发送<code>javax.xml.transform.Source</code>对象的的方法，接收<code>javax.xml.transform.Source</code>或者<code>javax.xml.transform.Result</code>对象的方法，以及Java对象与XML互相转换的编组技术。</p>
<h4><span id="uri">URI</span><a href="#uri" class="header-anchor">#</a></h4><p><code>WebServiceTemplate</code>类用URI作为消息的目的地址，可以通过<code>setDefaultUri(final String uri)</code>方法将URI设置在模板中，也可以在调用请求方法时显式指定，这个URI最终将存放在<code>WebServiceMessageSender</code>中。<code>WebServiceMessageSender</code>可以通过<code>WebServiceTemplate</code>类的<code>messageSender</code>或<code>messageSenders</code>属性设置一个或多个，它负责真正在传输层上发送XML消息。</p>
<p>模板中谁知URI方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultUri</span><span class="params">(<span class="keyword">final</span> String uri)</span> </span>&#123;</span><br><span class="line">		destinationProvider = <span class="keyword">new</span> DestinationProvider() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="function"><span class="keyword">public</span> URI <span class="title">getDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> URI.create(uri);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>请求时显式指定URI方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">sendAndReceive</span><span class="params">(String uriString,</span></span></span><br><span class="line"><span class="function"><span class="params">								 WebServiceMessageCallback requestCallback,</span></span></span><br><span class="line"><span class="function"><span class="params">								 WebServiceMessageExtractor&lt;T&gt; responseExtractor)</span> </span>&#123;</span><br><span class="line">		Assert.notNull(responseExtractor, <span class="string">"'responseExtractor' must not be null"</span>);</span><br><span class="line">		Assert.hasLength(uriString, <span class="string">"'uri' must not be empty"</span>);</span><br><span class="line">		TransportContext previousTransportContext = TransportContextHolder.getTransportContext();</span><br><span class="line">		WebServiceConnection connection = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			connection = createConnection(URI.create(uriString));</span><br><span class="line">			TransportContextHolder.setTransportContext(<span class="keyword">new</span> DefaultTransportContext(connection));</span><br><span class="line">			MessageContext messageContext = <span class="keyword">new</span> DefaultMessageContext(getMessageFactory());</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> doSendAndReceive(messageContext, connection, requestCallback, responseExtractor);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (TransportException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> WebServiceTransportException(<span class="string">"Could not use transport: "</span> + ex.getMessage(), ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> WebServiceIOException(<span class="string">"I/O error: "</span> + ex.getMessage(), ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			TransportUtils.closeConnection(connection);</span><br><span class="line">			TransportContextHolder.setTransportContext(previousTransportContext);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="transports">Transports</span><a href="#transports" class="header-anchor">#</a></h4><h5><span id="http-transports">HTTP Transports</span><a href="#http-transports" class="header-anchor">#</a></h5><p>spring-ws中通过HTTP发送消息的<code>WebServiceMessageSender</code>的实现有两个。</p>
<ul>
<li><p>默认实现<code>HttpUrlConnectionMessageSender</code>，使用Java自带的功能来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.ws.transport.http;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUrlConnectionMessageSender</span> <span class="keyword">extends</span> <span class="title">AbstractHttpWebServiceMessageSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> WebServiceConnection <span class="title">createConnection</span><span class="params">(URI uri)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		URL url = uri.toURL();</span><br><span class="line">		URLConnection connection = url.openConnection();</span><br><span class="line">		<span class="keyword">if</span> (!(connection <span class="keyword">instanceof</span> HttpURLConnection)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> HttpTransportException(<span class="string">"URI ["</span> + uri + <span class="string">"] is not an HTTP URL"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			HttpURLConnection httpURLConnection = (HttpURLConnection) connection;</span><br><span class="line">			prepareConnection(httpURLConnection);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> HttpUrlConnection(httpURLConnection);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareConnection</span><span class="params">(HttpURLConnection connection)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		connection.setRequestMethod(HttpTransportConstants.METHOD_POST);</span><br><span class="line">		connection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">		connection.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">		connection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">		<span class="keyword">if</span> (isAcceptGzipEncoding()) &#123;</span><br><span class="line">			connection.setRequestProperty(HttpTransportConstants.HEADER_ACCEPT_ENCODING,</span><br><span class="line">					HttpTransportConstants.CONTENT_ENCODING_GZIP);</span><br><span class="line">		&#125;</span><br><span class="line">		connection.setConnectTimeout(Math.toIntExact(<span class="keyword">this</span>.connectionTimeout.toMillis()));</span><br><span class="line">		connection.setReadTimeout(Math.toIntExact(<span class="keyword">this</span>.readTimeout.toMillis()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>HttpComponentsMessageSender</code>，通过<a href="https://hc.apache.org/httpcomponents-client-ga" target="_blank" rel="noopener">Apache HttpComponents HttpClient</a>实现，当需要使用到诸如认证、HTTP连接池之类的高级特性时使用此类。</p>
</li>
</ul>
<p>HTTP transport默认配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.saaj.SaajSoapMessageFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"webServiceTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.client.core.WebServiceTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"messageFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultUri"</span> <span class="attr">value</span>=<span class="string">"http://example.com/WebService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Apache HttpClient使用HTTP认证配置的配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"webServiceTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.client.core.WebServiceTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"messageFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageSender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.transport.http.HttpComponentsMessageSender"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentials"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.http.auth.UsernamePasswordCredentials"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"john:secret"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultUri"</span> <span class="attr">value</span>=<span class="string">"http://example.com/WebService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5><span id="jms-transport">JMS Transport</span><a href="#jms-transport" class="header-anchor">#</a></h5><p>JMS-Java Message Service即Java消息服务。</p>
<p>spring-ws通过<code>JmsMessageSender</code>发送JMS消息，<code>JmsMessageSender</code>通过spring框架将<code>WebServiceMessage</code>转换为JMS<code>Message</code>，通过<code>Queue</code>或<code>Topic</code>发送消息。</p>
<p>使用<code>JmsMessageSender</code>时，需要将<code>defaultUri</code>或者uri属性设置为JMS URI，以<code>jms:</code>为前缀的目标地址。JMS URI例子：<code>jms:SomeQueue</code>, <code>jms:SomeTopic?priority=3&amp;deliveryMode=NON_PERSISTENT</code>, <code>jms:RequestQueue?replyToName=ResponseName</code>. </p>
<p>默认情况下，<code>JmsMessageSender</code>发送的JMS消息是<code>ByteMessage</code>二进制消息，可以通过JMS URI中的<code>messageType</code>属性指定发送<code>TextMessage</code>文本消息，比如：<code>jms:Queue?messageType=TEXT_MESSAGE</code>。推荐使用<code>ByteMessage</code>二进制消息，因为<code>TextMessage</code>文本消息不能发附件且编码格式不可靠。</p>
<p>JMS transport ActiveMQ配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.saaj.SaajSoapMessageFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"vm://localhost?broker.persistent=false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"webServiceTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.client.core.WebServiceTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"messageFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageSender"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.transport.jms.JmsMessageSender"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultUri"</span> <span class="attr">value</span>=<span class="string">"jms:RequestQueue?deliveryMode=NON_PERSISTENT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5><span id="email-transport">Email Transport</span><a href="#email-transport" class="header-anchor">#</a></h5><p>spring-ws支持基于SMTP协议发送，基于POP3或者IMAP协议收取邮件的email transport，客户端的主要功能包含在<code>MailMessageSender</code>类中。<code>MailMessageSender</code>负责从<code>WebServiceMessage</code>请求中创建mail message，通过SMTP协议发送，接收来自POP3或者IMAP服务器的响应。</p>
<p>使用<code>MailMessageSender</code>时，需要将<code>defaultUri</code>或者URI属性设置为<code>mailto</code>格式的URI，比如：<code>mailto:john@example.com</code>, <code>mailto:server@localhost?subject=SOAP%20Test</code>。确保消息发送器配置了正确的<code>transportUir</code>来指明请求发送到哪台服务器（一般是SMTP服务器），以及配置正确的<code>storeUri</code>来指明响应的服务器（一般是POP3或者IMAP服务器）。</p>
<p>email transport的配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.saaj.SaajSoapMessageFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"webServiceTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.client.core.WebServiceTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"messageFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageSender"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.transport.mail.MailMessageSender"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"from"</span> <span class="attr">value</span>=<span class="string">"Spring-WS SOAP Client &amp;lt;client@example.com&amp;gt;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transportUri"</span> <span class="attr">value</span>=<span class="string">"smtp://client:s04p@smtp.example.com"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"storeUri"</span> <span class="attr">value</span>=<span class="string">"imap://client:s04p@imap.example.com/INBOX"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultUri"</span> <span class="attr">value</span>=<span class="string">"mailto:server@example.com?subject=SOAP%20Test"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5><span id="xmpp-transport">XMPP Transport</span><a href="#xmpp-transport" class="header-anchor">#</a></h5><p>spring-ws从2.0开始引入了XMPP（Jabber） transport，通过XMPP协议发送消息。客户端的重要功能包含在<code>XmppMessageSender</code>类中。<code>XmppMessageSender</code>负责从<code>WebServiceMessage</code>请求中创建XMPP message，通过XMPP协议发送请求，并监听响应。</p>
<p>使用<code>XmppMessageSender</code>时需要将<code>defaultUri</code>或者URI属性设置为<code>xmpp</code>格式的URI，比如：<code>xmpp:johndoe@jabber.org</code>。<code>XmppMessageSend</code>需要<code>XMPPConnection</code>来完成运行，<code>XMPPConnection</code>可以通过<code>org.springframework.ws.transport.xmpp.support.XmppConnectionFactoryBean</code>完成创建。</p>
<p>xmpp transport配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.saaj.SaajSoapMessageFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connection"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.transport.xmpp.support.XmppConnectionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"jabber.org"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"webServiceTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.client.core.WebServiceTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"messageFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageSender"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.transport.xmpp.XmppMessageSender"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection"</span> <span class="attr">ref</span>=<span class="string">"connection"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultUri"</span> <span class="attr">value</span>=<span class="string">"xmpp:user@jabber.org"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="webservicemessage-de-fa-song-jie-shou">WebServiceMessage的发送接收</span><a href="#webservicemessage-de-fa-song-jie-shou" class="header-anchor">#</a></h4><p><code>WebServiceMessage</code> 包含了丰富的方法用户发送和接收消息。有些方法请求和返回都是<code>Source</code>，有些方法返回是<code>Result</code>，有些方法提供了Java对象和XML互相转换的编组计划。</p>
<p>使用编组技术时需要设置<code>WebServiceMessage</code>的 <code>marshaller</code>/<code>unmarshaller</code> 属性。</p>
<h4><span id="webservicemessagecallback"><code>WebServiceMessageCallback</code></span><a href="#webservicemessagecallback" class="header-anchor">#</a></h4><p><code>WebServiceMessageCallback</code>接口允许在消息创建完成发送之前操作它，比如设置SOAP消息头。</p>
<p><code>WebServiceMessageCallback</code>定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.ws.client.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.WebServiceMessage;<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebServiceMessageCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doWithMessage</span><span class="params">(WebServiceMessage message)</span> <span class="keyword">throws</span> IOException, TransformerException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">marshalWithSoapActionHeader</span><span class="params">(MyObject o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    webServiceTemplate.marshalSendAndReceive(o, <span class="keyword">new</span> WebServiceMessageCallback() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWithMessage</span><span class="params">(WebServiceMessage message)</span> </span>&#123;</span><br><span class="line">            ((SoapMessage)message).setSoapAction(<span class="string">"http://tempuri.org/Action"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>也可以使用<code>WebServiceMessageCallback</code>的实现<code>org.springframework.ws.soap.client.coreSoapActionCallback</code>设置SOAP Action Header</em></p>
<h5><span id="ws-addressing">WS-Addressing</span><a href="#ws-addressing" class="header-anchor">#</a></h5><p>spring-ws不仅服务端支持WS-Addressing，客户端同样支持。</p>
<p>客户端可以使用<code>org.springframework.ws.soap.addressing.client.ActionCallback</code>设置WS-Addressing，这个类中持有消息头中Action，To，WS-Addressing version等属性，<code>To</code> 如果不设置，默认为当前的URL。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionCallback</span> <span class="keyword">implements</span> <span class="title">WebServiceMessageCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> AddressingVersion version;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> URI action;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> URI to;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> MessageIdStrategy messageIdStrategy;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> EndpointReference from;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> EndpointReference replyTo;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> EndpointReference faultTo;</span><br><span class="line">....</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> URI <span class="title">getTo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (to == <span class="keyword">null</span>) &#123;</span><br><span class="line">			TransportContext transportContext = TransportContextHolder.getTransportContext();</span><br><span class="line">			<span class="keyword">if</span> (transportContext != <span class="keyword">null</span> &amp;&amp; transportContext.getConnection() != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> transportContext.getConnection().getUri();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">catch</span> (URISyntaxException ex) &#123;</span><br><span class="line">					<span class="comment">// ignore</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not obtain connection URI from Transport Context"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> to;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置消息头中Action示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">webServiceTemplate.marshalSendAndReceive(o, <span class="keyword">new</span> ActionCallback(<span class="string">"http://samples/RequestOrder"</span>));</span><br></pre></td></tr></table></figure>
<h4><span id="webservicemessageextractor"><code>WebServiceMessageExtractor</code></span><a href="#webservicemessageextractor" class="header-anchor">#</a></h4><p><code>WebServiceMessageExtractor</code>是一个可以从收到的<code>WebServiceMessage</code>中读取出Object的低级别回调接口，在底层连接打开的情况下，<code>WebServiceTemplate</code>会执行在方法上注册的<code>WebServiceMessageExtractor</code>的<code>extractData(WebServiceMessage message)</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.ws.client.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.WebServiceMessage;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebServiceMessageExtractor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function">T <span class="title">extractData</span><span class="params">(WebServiceMessage message)</span> <span class="keyword">throws</span> IOException, TransformerException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">marshalWithSoapActionHeader</span><span class="params">(<span class="keyword">final</span> Source s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Transformer transformer = transformerFactory.newTransformer();</span><br><span class="line">    webServiceTemplate.sendAndReceive(<span class="keyword">new</span> WebServiceMessageCallback() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWithMessage</span><span class="params">(WebServiceMessage message)</span> </span>&#123;</span><br><span class="line">            transformer.transform(s, message.getPayloadResult());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">new</span> WebServiceMessageExtractor() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">extractData</span><span class="params">(WebServiceMessage message)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">                <span class="comment">// do your own transforms with message.getPayloadResult()</span></span></span><br><span class="line"><span class="function">                <span class="comment">//     or message.getPayloadSource()</span></span></span><br><span class="line"><span class="function">            &#125;</span></span><br><span class="line"><span class="function">        &#125;)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="ke-hu-duan-ce-shi">客户端测试</span><a href="#ke-hu-duan-ce-shi" class="header-anchor">#</a></h2><p>客户端测试与服务端测试类似是如下两种方式</p>
<ul>
<li>编写单元测试，简单模（EsayMock，JMock）拟<code>WebServiceTemplate</code> 类， <code>WebServiceOperations</code> 接口，或者完成客户端类。好处是简单方便，缺点是只是模拟，并非真实发送请求。</li>
<li>集成测试，spring-ws2.0开始引入。</li>
</ul>
<h3><span id="ke-hu-duan-ji-cheng-ce-shi">客户端集成测试</span><a href="#ke-hu-duan-ji-cheng-ce-shi" class="header-anchor">#</a></h3><p>客户端集成测试特性在<code>org.springframework.ws.test.client</code>包中，核心类是<code>MockWebServer</code>。基本思想是webservice模板类连接到模拟服务器，发送请求，模拟服务器校验请求是否与注册的预期请求匹配，匹配则返回正确的响应消息。</p>
<p><code>MockWebServiceServer</code>的典型用法：</p>
<ul>
<li>通过API创建<code>MockWebServiceServer</code>。<ul>
<li><code>MockWebServiceServer.createServer(WebServiceTemplate)</code></li>
<li><code>MockWebServiceServer.createServer(WebServiceGatewaySupport)</code></li>
<li><code>MockWebServiceServer.createServer(WebServiceGatewaySupport)</code></li>
</ul>
</li>
<li>通过<code>expect(RequestMatcher)</code>注册预期请求，<code>RequestMatcher</code>一般直接用已经提供的默认实现 <code>RequestMatchers</code>。如果是复杂预期可以通过链式调用<code>andExpect(RequestMatcher)</code>。</li>
<li>通过<code>andRespond(ResponseCreator)</code>创建合适的响应，<code>ResponseCreator</code>一般直接用已经提供的默认实现 <code>ResponseCreators</code>。</li>
<li>正常通过<code>WebServiceTemplate</code> 来调用，或者直接使用客户端代码调用。</li>
<li>调用<code>MockWebServiceServer.verify()</code>确保所有预期匹配。</li>
</ul>
<p>webservice客户端示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.ws.client.core.support.WebServiceGatewaySupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerClient</span> <span class="keyword">extends</span> <span class="title">WebServiceGatewaySupport</span> </span>&#123;                          </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCustomerCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CustomerCountRequest request = <span class="keyword">new</span> CustomerCountRequest();                          </span><br><span class="line">    request.setCustomerName(<span class="string">"John Doe"</span>);</span><br><span class="line"></span><br><span class="line">    CustomerCountResponse response =</span><br><span class="line">      (CustomerCountResponse) getWebServiceTemplate().marshalSendAndReceive(request);   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response.getCustomerCount();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.xml.transform.Source;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.xml.transform.StringSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.test.client.MockWebServiceServer;                         </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.ws.test.client.RequestMatchers.*;                     </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.ws.test.client.ResponseCreators.*;                    </span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)                                                 </span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"integration-test.xml"</span>)                                           </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerClientIntegrationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> CustomerClient client;                                                        </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> MockWebServiceServer mockServer;                                              </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createServer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    mockServer = MockWebServiceServer.createServer(client);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customerClient</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Source requestPayload = <span class="keyword">new</span> StringSource(</span><br><span class="line">      <span class="string">"&lt;customerCountRequest xmlns='http://springframework.org/spring-ws'&gt;"</span> +</span><br><span class="line">        <span class="string">"&lt;customerName&gt;John Doe&lt;/customerName&gt;"</span> +</span><br><span class="line">      <span class="string">"&lt;/customerCountRequest&gt;"</span>);</span><br><span class="line">    Source responsePayload = <span class="keyword">new</span> StringSource(</span><br><span class="line">      <span class="string">"&lt;customerCountResponse xmlns='http://springframework.org/spring-ws'&gt;"</span> +</span><br><span class="line">        <span class="string">"&lt;customerCount&gt;10&lt;/customerCount&gt;"</span> +</span><br><span class="line">      <span class="string">"&lt;/customerCountResponse&gt;"</span>);</span><br><span class="line"></span><br><span class="line">    mockServer.expect(payload(requestPayload)).andRespond(withPayload(responsePayload));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = client.getCustomerCount();                                             </span><br><span class="line">    assertEquals(<span class="number">10</span>, result);                                                           </span><br><span class="line"></span><br><span class="line">    mockServer.verify();                                                                </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="requestmatcher-he-requestmatchers"><code>RequestMatcher</code> 和 <code>RequestMatchers</code></span><a href="#requestmatcher-he-requestmatchers" class="header-anchor">#</a></h3><p><code>MockWebServiceServer</code>通过<code>RequestMatcher</code>验证请求是否符合预期。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.ws.test.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ws.WebServiceMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RequestMatcher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">match</span><span class="params">(URI var1, WebServiceMessage var2)</span> <span class="keyword">throws</span> IOException, AssertionError</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以自实现<code>RequestMatcher</code>接口，当不匹配预期时通过 <code>AssertionError</code>断言失败，但并没有必要，因为spring-ws提供了默认实现<code></code>RequestMatchers` 。</p>
<p> <code>RequestMatchers</code>提供的请求匹配</p>
<table>
<thead>
<tr>
<th><code>RequestMatchers</code> method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>anything()</code></td>
<td>Expects any sort of request.</td>
</tr>
<tr>
<td><code>payload()</code></td>
<td>Expects a given request payload.</td>
</tr>
<tr>
<td><code>validPayload()</code></td>
<td>Expects the request payload to validate against given XSD schema(s).</td>
</tr>
<tr>
<td><code>xpath()</code></td>
<td>Expects a given XPath expression to exist, not exist, or evaluate to a given value.</td>
</tr>
<tr>
<td><code>soapHeader()</code></td>
<td>Expects a given SOAP header to exist in the request message.</td>
</tr>
<tr>
<td><code>connectionTo()</code></td>
<td>Expects a connection to the given URL.</td>
</tr>
</tbody>
</table>
<p>如果是复杂的请求预期可以链式调用<code>andExpect()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockServer.expect(connectionTo(<span class="string">"http://example.com"</span>)).</span><br><span class="line"> andExpect(payload(expectedRequestPayload)).</span><br><span class="line"> andExpect(validPayload(schemaResource)).</span><br><span class="line"> andRespond(...);</span><br></pre></td></tr></table></figure>
<h3><span id="responsecreator-he-responsecreators"><code>ResponseCreator</code> 和<code>ResponseCreators</code></span><a href="#responsecreator-he-responsecreators" class="header-anchor">#</a></h3><p>如果请求消息与预期匹配， <code>MockWebServiceServer</code>需要给<code>WebServiceTemplate</code>创建响应消息，通过<code>ResponseCreator</code> 来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResponseCreator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">WebServiceMessage <span class="title">createResponse</span><span class="params">(URI uri,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   WebServiceMessage request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   WebServiceMessageFactory messageFactory)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ResponseCreator</code>同样可以自己实现，但是也没有必要，因为spring-ws也提供了默认实现 <code>ResponseCreators</code>。</p>
<p><code>ResponseCreators</code>提供的响应</p>
<table>
<thead>
<tr>
<th><code>ResponseCreators</code> method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>withPayload()</code></td>
<td>Creates a response message with a given payload.</td>
</tr>
<tr>
<td><code>withError()</code></td>
<td>Creates an error in the response connection. This method gives you the opportunity to test your error handling.</td>
</tr>
<tr>
<td><code>withException()</code></td>
<td>Throws  an exception when reading from the response connection. This method  gives you the opportunity to test your exception handling.</td>
</tr>
<tr>
<td><code>withMustUnderstandFault()</code>, <code>withClientOrSenderFault()</code>, <code>withServerOrReceiverFault()</code>, and <code>withVersionMismatchFault()</code></td>
<td>Creates a response message with a given SOAP fault. This method gives you the opportunity to test your Fault handling</td>
</tr>
</tbody>
</table>
<h1><span id="spring-ws-de-an-quan-te-xing">spring-ws的安全特性</span><a href="#spring-ws-de-an-quan-te-xing" class="header-anchor">#</a></h1><p>spring-ws安全主要有三种方式</p>
<ul>
<li>认证授权，通过认证授权方式确认客户端的真实性。</li>
<li>数字签名，通过用哈希和私钥对报文生成签名来保证安全。</li>
<li>加解密，通过请求方加密，服务方解密的方式来保证安全。</li>
</ul>
<p>以上三种方式通过<code>XwsSecurityInterceptor</code> 或者<code>Wss4jSecurityInterceptor</code>来实现。</p>
<h2><span id="xwssecurityinterceptor"><code>XwsSecurityInterceptor</code></span><a href="#xwssecurityinterceptor" class="header-anchor">#</a></h2><p><code>XwsSecurityInterceptor</code> 是一个enpoint拦截器，基于SUN的XML和Web Service Security package（XWSS），是Java Web Services Developer Pack (<a href="http://java.sun.com/webservices/" target="_blank" rel="noopener"><em>Java WSDP</em></a>)的一部分。<em>XWSS需要引用SUN 1.5 JDK 和 the SUN SAAJ ， 而<code>Wss4jSecurityInterceptor</code>不需要。</em></p>
<p><code>XwsSecurityInterceptor</code>需要配置安全策略XML文件，拦截器通过这个文件知道对SOAP请求和响应的拦截切面，拦截策略可以通过spring source对 <code>policyConfiguration</code> 属性的设置来完成，策略文件可以包含多个元素，根元素是<code>SecurityConfiguration</code>。</p>
<p>另外，<code>XwsSecurityInterceptor</code>需要一个或多个回调处理<code>CallbackHandler</code>，这些处理器用来获取证书和私钥，并验证用户凭证等操作。spring-ws提供常见的安全问题的处理器，比如通过Spring Security认证管理器进行认证，对相应消息进行基于X509证书的签名。通过 <code>callbackHandler</code> 或 <code>callbackHandlers</code>属性对拦截器设置一个或多个回调处理器。</p>
<p>简单的配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"wsSecurityInterceptor"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.XwsSecurityInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"policyConfiguration"</span> <span class="attr">value</span>=<span class="string">"classpath:securityPolicy.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"callbackHandlers"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"certificateHandler"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"authenticationHandler"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>表示拦截器使用类路径中<code>securityPolicy.xml</code>文件作为策略配置文件，并有两个回调处理器。</p>
<h4><span id="keystores">KeyStores</span><a href="#keystores" class="header-anchor">#</a></h4><p>大多是的加密操作，都会用到一个标准的<code>java.security.KeyStore</code>对象，这些操作包括证书验证、消息签名、签名验证、加密，但是不包括对用户名和时间戳的验证。</p>
<p><code>java.security.KeyStore</code>对象是对秘钥和证书的存储，包含三种不同类型的元素：</p>
<ul>
<li>私钥，给自己使用的秘钥，和公钥在一条认证链上。在WS-Security中，涉及到对消息的签名和解密。</li>
<li>对称秘钥，发送和接收双方使用相同的秘钥对消息进行加解密操作。</li>
<li>受信证书，X509被称为受信证书是因为密钥库所有者相信证书中的公钥确实属于证书的所有者。在WS-Security中，这些证书用于证书验证，签名验证和加密操作。</li>
</ul>
<h5><span id="keytool">KeyTool</span><a href="#keytool" class="header-anchor">#</a></h5><p>Java虚拟机中包含了秘钥和证书的管理程序（<a href="https://docs.oracle.com/javase/1.5.0/docs/tooldocs/windows/keytool.html" target="_blank" rel="noopener">keytool</a>），可以通过该程序生成新的keysstore。</p>
<h5><span id="keystorefactorybean">KeyStoreFactoryBean</span><a href="#keystorefactorybean" class="header-anchor">#</a></h5><p><code>KeyStoreFactoryBean</code>可以使spring配置加载keystore更简单，可以通过<code>locaiton</code>属性设置keystore的路径（<em>如果不配置keystore路径，会生成一个空的keystore，无法匹配需求</em>）。<code>password</code>属性配置验证keystore数据的完整性（<em>不配置密码，则不进行完整性验证</em>）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keyStore"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.support.KeyStoreFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:org/springframework/ws/soap/security/xwss/test-keystore.jks"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5><span id="keystorecallbackhandler">KeyStoreCallbackHandler</span><a href="#keystorecallbackhandler" class="header-anchor">#</a></h5><p>在<code>XwsSecurityInterceptor</code>中使用keystores时，需要定义回调处理器（<code>KeyStoreCallbackHandler</code>）。这个回调处理器包含三个属性<code>keyStore</code>，<code>trustStore</code>，<code>symmetricStore</code>，分别处理不同的加密方式，如下表所示：</p>
<table>
<thead>
<tr>
<th>Cryptographic operation</th>
<th>Keystore used</th>
</tr>
</thead>
<tbody>
<tr>
<td>Certificate validation</td>
<td>first the <code>keyStore</code>, then the <code>trustStore</code></td>
</tr>
<tr>
<td>Decryption based on private key</td>
<td><code>keyStore</code></td>
</tr>
<tr>
<td>Decryption based on symmetric key</td>
<td><code>symmetricStore</code></td>
</tr>
<tr>
<td>Encryption based on public key certificate</td>
<td><code>trustStore</code></td>
</tr>
<tr>
<td>Encryption based on symmetric key</td>
<td><code>symmetricStore</code></td>
</tr>
<tr>
<td>Signing</td>
<td><code>keyStore</code></td>
</tr>
<tr>
<td>Signature verification</td>
<td><code>trustStore</code></td>
</tr>
</tbody>
</table>
<p><code>KeyStoreCallbackHandler</code>中的<code>privateKeyPassword</code>用来解锁keystore中的秘钥。</p>
<p>如果<code>symmetricStore</code>没有配置,会寻找默认的 <code>keyStore</code>，如果key或者truststore没有设置，会使用Java标准的机制去加载或者创建。</p>
<p> <code>KeyStoreCallbackHandler</code>验证请求的证书或者签名使用配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keyStoreHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.KeyStoreCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trustStore"</span> <span class="attr">ref</span>=<span class="string">"trustStore"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trustStore"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.support.KeyStoreFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:truststore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"changeit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> <code>KeyStoreCallbackHandler</code>解密请求的证书或加密响应消息使用配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keyStoreHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.KeyStoreCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStore"</span> <span class="attr">ref</span>=<span class="string">"keyStore"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"privateKeyPassword"</span> <span class="attr">value</span>=<span class="string">"changeit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keyStore"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.support.KeyStoreFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:keystore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"changeit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="authentication">Authentication</span><a href="#authentication" class="header-anchor">#</a></h4><p>认证的目的是确认请求方的身份。WS-Security中认证有两种方式</p>
<ul>
<li>用户密码（纯文本密码、摘要密码）</li>
<li>X509证书</li>
</ul>
<h5><span id="chun-wen-ben-yong-hu-ming-ren-zheng">纯文本用户名认证</span><a href="#chun-wen-ben-yong-hu-ming-ren-zheng" class="header-anchor">#</a></h5><p>这种方式比较简单，在SOAP请求消息中包含<code>UsernameToken</code> 元素，<code>UsernameToken</code> 下面包含<code>Username</code>和<code>Password</code>（纯文本密码）元素。安全策略文件中需要包含<code>RequireUsernameToken</code>元素，并且将<code>passwordDigestRequired</code>属性设置为false。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xwss:SecurityConfiguration</span> <span class="attr">xmlns:xwss</span>=<span class="string">"http://java.sun.com/xml/ns/xwss/config"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">xwss:RequireUsernameToken</span> <span class="attr">passwordDigestRequired</span>=<span class="string">"false"</span> <span class="attr">nonceRequired</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">xwss:SecurityConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果用户名密码不匹配， <code>XwsSecurityInterceptor</code>返回SOAP错误。如果匹配，则会在注册的处理器中调用持有<code>PlainTextPasswordRequest</code> 参数的<code>PasswordValidationCallback</code>。在spring-ws中有三个处理这种回调的类。</p>
<h6><span id="simplepasswordvalidationcallbackhandler">SimplePasswordValidationCallbackHandler</span><a href="#simplepasswordvalidationcallbackhandler" class="header-anchor">#</a></h6><p>这个处理是用加载到内存中的<code>Properties</code>对象来验证密码的。配置只允许用户为“Bert”，密码为“Ernie”访问，则可以如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"passwordValidationHandler"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.SimplePasswordValidationCallbackHandler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"Bert"</span>&gt;</span>Ernie<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6><span id="springplaintextpasswordvalidationcallbackhandler">SpringPlainTextPasswordValidationCallbackHandler</span><a href="#springplaintextpasswordvalidationcallbackhandler" class="header-anchor">#</a></h6><p>使用<a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener"><em>Spring Security</em></a>认证，具体参考 <a href="https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/" target="_blank" rel="noopener"><em>Spring Security reference documentation</em></a>。</p>
<p>The <code>SpringPlainTextPasswordValidationCallbackHandler</code> uses <a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener"><em>Spring Security</em></a>  to authenticate users. It is beyond the scope of this document to  describe Spring Security, but suffice it to say that it is a  full-fledged security framework. You can read more about it in the <a href="https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/" target="_blank" rel="noopener"><em>Spring Security reference documentation</em></a>.</p>
<p>在<code>SpringPlainTextPasswordValidationCallbackHandler</code>中，需要使用<code>AuthenticationManager</code>对创建的 <code>UsernamePasswordAuthenticationToken</code> 进行认证处理，认证成功，token会保存在<code>SecurityContextHolder</code>中。认证管理器可以在 <code>authenticationManager</code>属性中设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"springSecurityHandler"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.SpringPlainTextPasswordValidationCallbackHandler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationManager"</span> <span class="attr">ref</span>=<span class="string">"authenticationManager"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticationManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.providers.ProviderManager"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"providers"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.providers.dao.DaoAuthenticationProvider"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDetailsService"</span> <span class="attr">ref</span>=<span class="string">"userDetailsService"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDetailsService"</span> <span class="attr">class</span>=<span class="string">"com.mycompany.app.dao.UserDetailService"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6><span id="jaasplaintextpasswordvalidationcallbackhandler">JaasPlainTextPasswordValidationCallbackHandler</span><a href="#jaasplaintextpasswordvalidationcallbackhandler" class="header-anchor">#</a></h6><p>基于<a href="http://java.sun.com/products/jaas/" target="_blank" rel="noopener"><em>Java Authentication and Authorization Service</em></a>的实现，参见 <a href="http://www.javaworld.com/javaworld/jw-09-2002/jw-0913-jaas.html" target="_blank" rel="noopener"><em>good tutorial</em></a> 。</p>
<p><code>JaasPlainTextPasswordValidationCallbackHandler只需要</code> <code>loginContextName</code> ，使用这个名称创建一个新的 JAAS <code>LoginContext</code>，使用标准的JAAS <code>NameCallback</code> 和<code>PasswordCallback</code> 处理SOAP消息中的username和password，在JAAS <code>LoginModule</code>集成的所有回调处理都会在<code>Login()</code>触发。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jaasValidationHandler"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.jaas.JaasPlainTextPasswordValidationCallbackHandler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginContextName"</span> <span class="attr">value</span>=<span class="string">"MyLoginModule"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5><span id="zhai-yao-yong-hu-ming-ren-zheng">摘要用户名认证</span><a href="#zhai-yao-yong-hu-ming-ren-zheng" class="header-anchor">#</a></h5><p>使用摘要密码，同样需要在SOAP消息中包含 <code>UsernameToken</code>元素， <code>UsernameToken</code>包含<code>Username</code> 和 <code>Password</code>元素，不通之处在于密码不是纯文本，而是摘要。</p>
<p>与纯文本方式比，配置方式也不一样</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xwss:SecurityConfiguration</span> <span class="attr">xmlns:xwss</span>=<span class="string">"http://java.sun.com/xml/ns/xwss/config"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">xwss:RequireUsernameToken</span> <span class="attr">passwordDigestRequired</span>=<span class="string">"true"</span> <span class="attr">nonceRequired</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">xwss:SecurityConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果用户名密码不匹配， <code>XwsSecurityInterceptor</code>返回SOAP错误。如果匹配，则会在注册的处理器中调用持有<code></code>DigestPasswordRequest<code>参数的</code>PasswordValidationCallback`。在spring-ws中有三个处理这种回调的类。</p>
<h6><span id="simplepasswordvalidationcallbackhandler">SimplePasswordValidationCallbackHandler</span><a href="#simplepasswordvalidationcallbackhandler" class="header-anchor">#</a></h6><p>可同时处理文本密码与摘要密码，<a href>参考前面的说明</a>。</p>
<h6><span id="springdigestpasswordvalidationcallbackhandler">SpringDigestPasswordValidationCallbackHandler</span><a href="#springdigestpasswordvalidationcallbackhandler" class="header-anchor">#</a></h6><p> <code>SpringDigestPasswordValidationCallbackHandler通过Srping Servurity的</code>UserDetailService<code>服务获取token中用户摘要密码，与请求消息中的摘要密码进行对比。如果一致，则认证成功，</code>UsernamePasswordAuthenticationToken<code>会保存在</code>SecurityContextHolder<code>中。通过</code>userDetailsService<code>.属性设置服务，</code>userCache` 属性设置缓存。</p>
<p>配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.SpringDigestPasswordValidationCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDetailsService"</span> <span class="attr">ref</span>=<span class="string">"userDetailsService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDetailsService"</span> <span class="attr">class</span>=<span class="string">"com.mycompany.app.dao.UserDetailService"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5><span id="zheng-shu-ren-zheng">证书认证</span><a href="#zheng-shu-ren-zheng" class="header-anchor">#</a></h5><p>X509证书是一种更安全的认证方式。这种认证方式下，SOAP消息中会携带一个<code>BinarySecurityToken</code>，里面包含了一个 Base 64-encoded版本的X509的证书，服务端用这个证书来完成认证，消息中保存的证书同时用来对消息进行签名。    </p>
<p>为了确保所有的SOAP消息携带有<code>BinarySecurityToken</code>，需要在安全策略配置文件增加<code>RequireSignature</code>元素，RequireSignature`可以包含其他元素来<a href>验证签名</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xwss:SecurityConfiguration</span> <span class="attr">xmlns:xwss</span>=<span class="string">"http://java.sun.com/xml/ns/xwss/config"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">xwss:RequireSignature</span> <span class="attr">requireTimestamp</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">xwss:SecurityConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果消息中没有携带证书， <code>XwsSecurityInterceptor</code>返回SOAP错误。如果有，则调起回调处理器<code>CertificateValidationCallback</code>。在spring-ws中有三个处理这种回调的类。</p>
<blockquote>
<p>大多数情况下，证书的验证（validation）操作应当在证书认证（authentication）之前执行，因为只需要对邮箱的证书认证。五小证书如时间过期或者没存储在可信任证书库中的证书都应当直接忽略。</p>
<p>在spring-ws中，意味着 <code>SpringCertificateValidationCallbackHandler</code> 或者<code>JaasCertificateValidationCallbackHandler</code>类型的处理器应当在 <code>KeyStoreCallbackHandler</code>之后执行，在<code>XwsSecurityInterceptor</code>中可以通过设置<code>callbackHandlers</code>的顺序实现这种场景：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"wsSecurityInterceptor"</span></span></span><br><span class="line"><span class="tag">&gt;</span>     class="org.springframework.ws.soap.security.xwss.XwsSecurityInterceptor"&gt;</span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"policyConfiguration"</span> <span class="attr">value</span>=<span class="string">"classpath:securityPolicy.xml"</span>/&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"callbackHandlers"</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"keyStoreHandler"</span>/&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"springSecurityHandler"</span>/&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h6><span id="keystorecallbackhandler">KeyStoreCallbackHandler</span><a href="#keystorecallbackhandler" class="header-anchor">#</a></h6><p><code>KeyStoreCallbackHandler</code> 通过一个标准的Java keystore验证证书，验证步骤如下：</p>
<ul>
<li>检查在私有的<code>keyStore</code>是否存在证书，存在则通过，否则不通过；</li>
<li>检查当前时间和日期是否在证书的有效期内，在有效期则通过，否则不通过；</li>
<li>根据证书的路径检查’keyStore’中是否有结构发布过该证书，如果证书路径构建成果则通过，否则不通过。</li>
</ul>
<p>用<code>KeyStoreCallbackHandler</code>验证证书的配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keyStoreHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.KeyStoreCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trustStore"</span> <span class="attr">ref</span>=<span class="string">"trustStore"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trustStore"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.support.KeyStoreFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:truststore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"changeit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6><span id="springcertificatevalidationcallbackhandler">SpringCertificateValidationCallbackHandler</span><a href="#springcertificatevalidationcallbackhandler" class="header-anchor">#</a></h6><p> <code>SpringCertificateValidationCallbackHandler</code> 通过使用Spring Security中的 <code>AuthenticationManager</code>对它创建的 <code>X509AuthenticationToken进行认证，经过配置的</code>AuthenticationManager<code>会期望一个提供者（一般是</code>X509AuthenticationProvider<code>）来处理token，如果认证成功，token会保存在</code>SecurityContextHolder`中。</p>
<p>可以通过<code>authenticationManager</code>属性来设置认证管理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"springSecurityCertificateHandler"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.SpringCertificateValidationCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationManager"</span> <span class="attr">ref</span>=<span class="string">"authenticationManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticationManager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.security.providers.ProviderManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"providers"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.x509.X509AuthenticationProvider"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"x509AuthoritiesPopulator"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.x509.populator.DaoX509AuthoritiesPopulator"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDetailsService"</span> <span class="attr">ref</span>=<span class="string">"userDetailsService"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDetailsService"</span> <span class="attr">class</span>=<span class="string">"com.mycompany.app.dao.UserDetailService"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>X509证书的更多信息，请查阅 <a href="http://www.springframework.org/security" target="_blank" rel="noopener">Spring Security reference documentation</a></em></p>
<h6><span id="jaascertificatevalidationcallbackhandler">JaasCertificateValidationCallbackHandler</span><a href="#jaascertificatevalidationcallbackhandler" class="header-anchor">#</a></h6><p> <code>JaasCertificateValidationCallbackHandler</code>使用属性 <code>loginContextName</code>和 <code>X500Principal证书创建JAAS</code>LoginContext<code>,意味着这个处理器集成了可以处理 X500的JAAS</code>LoginModule` 。</p>
<p>配置示例： 名称为”MyLoginModule”的<code>LoginContext</code>应当在<code>jaas.config</code>配置文件中定义好。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jaasValidationHandler"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.jaas.JaasCertificateValidationCallbackHandler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginContextName"</span>&gt;</span>MyLoginModule<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="shu-zi-qian-ming">数字签名</span><a href="#shu-zi-qian-ming" class="header-anchor">#</a></h3><p>数字签名是一条基于全部报文和签名者私钥的信息，ws-secutiry中的签名有两项任务：验证签名和签名消息。</p>
<h4><span id="yan-zheng-qian-ming">验证签名</span><a href="#yan-zheng-qian-ming" class="header-anchor">#</a></h4><p>签过名的消息中包含一个拥有用于签名消息的证书的 <code>BinarySecurityToken</code>，另外还会包含<code>SignedInfo</code> 块，标明消息签名用到了哪些节点。</p>
<p>为了确保所有的请求消息中都包含<code>BinarySecurityToken</code>，在安全策略配置文件中需要有<code>RequireSignature</code>元素，<code>RequireSignature</code>里面可以包含<code>SignatureTarget</code>元素，指明需要参与签名的元素极其子元素。也可以自定义私钥别名，是否用对称秘钥替换私钥等其他属性，<a href="https://docs.oracle.com/cd/E17802_01/webservices/webservices/docs/1.6/tutorial/doc/XWS-SecurityIntro4.html#wp565769" target="_blank" rel="noopener"><code>RequireSignature</code>子元素参见地址</a>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xwss:SecurityConfiguration</span> <span class="attr">xmlns:xwss</span>=<span class="string">"http://java.sun.com/xml/ns/xwss/config"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xwss:RequireSignature</span> <span class="attr">requireTimestamp</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xwss:SecurityConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果签名匹配，<code>XwsSecurityInterceptor</code> 发挥SOAP错误。如果匹配，会调起已注册的 <code>SignatureVerificationKeyCallback</code> ，在spring-ws中提供了<code>KeyStoreCallbackHandler</code>回调处理器。</p>
<h5><span id="keystorecallbackhandler">KeyStoreCallbackHandler</span><a href="#keystorecallbackhandler" class="header-anchor">#</a></h5><p>如同前面介绍， <code>KeyStoreCallbackHandler</code>，用 <code>java.security.KeyStore</code>处理各种加密回调，其中包括签名验证。验证签名中，处理器使用了<code>trustStore</code>属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keyStoreHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.KeyStoreCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trustStore"</span> <span class="attr">ref</span>=<span class="string">"trustStore"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trustStore"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.support.KeyStoreFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:org/springframework/ws/soap/security/xwss/test-truststore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"changeit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="qian-ming-xiao-xi">签名消息</span><a href="#qian-ming-xiao-xi" class="header-anchor">#</a></h4><p>签名消息的时候，<code>XwsSecurityInterceptor</code>会在消息中增加一个<code>BinarySecurityToken</code>和一个包含参与签名元素的<code>SignedInfo</code>块。</p>
<p>为了对所有发出的SOAP消息签名，安全策略配置文件中需要包含<code>Sign</code>元素，<code>Sign</code>里面可以包含<code>SignatureTarget</code> 元素来定义哪些元素及其子元素参与签名，也可以自定义私钥别名，是否用对称秘钥替换私钥等其他属性，<a href="https://docs.oracle.com/cd/E17802_01/webservices/webservices/docs/1.6/tutorial/doc/XWS-SecurityIntro4.html#wp565497" target="_blank" rel="noopener"><code>Sign</code>子元素参见地址</a>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xwss:SecurityConfiguration</span> <span class="attr">xmlns:xwss</span>=<span class="string">"http://java.sun.com/xml/ns/xwss/config"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">xwss:Sign</span> <span class="attr">includeTimestamp</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xwss:SecurityConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>XwsSecurityInterceptor</code> 会调起已注册的<code>SignatureKeyCallback</code>处理器，spring-ws中提供了<code>KeyStoreCallbackHandler</code>处理器。</p>
<h5><span id="keystorecallbackhandler">KeyStoreCallbackHandler</span><a href="#keystorecallbackhandler" class="header-anchor">#</a></h5><p>如同前面介绍， <code>KeyStoreCallbackHandler</code>，用 <code>java.security.KeyStore</code>处理各种加密回调，其中包括签名消息，为了增加签名，处理器使用了<code>keyStore</code>属性。另外必须设置<code>privateKeyPassword</code>属性解锁签名中用到的私钥。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keyStoreHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.KeyStoreCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStore"</span> <span class="attr">ref</span>=<span class="string">"keyStore"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"privateKeyPassword"</span> <span class="attr">value</span>=<span class="string">"changeit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keyStore"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.support.KeyStoreFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:keystore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"changeit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="jia-jie-mi">加解密</span><a href="#jia-jie-mi" class="header-anchor">#</a></h3><h4><span id="jie-mi">解密</span><a href="#jie-mi" class="header-anchor">#</a></h4><p>为了解密SOAP消息，安全策略配置文件需要包含<code>RequireEncryption</code>元素，<code>RequireEncryption</code>中可以包含<code>EncryptionTarget</code>元素来指明哪些元素被加密，一个对称秘钥来解密消息，<a href="http://java.sun.com/webservices/docs/1.6/tutorial/doc/XWS-SecurityIntro4.html#wp565951" target="_blank" rel="noopener"><code>RequireEncrypton</code>子元素参见地址</a>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xwss:SecurityConfiguration</span> <span class="attr">xmlns:xwss</span>=<span class="string">"http://java.sun.com/xml/ns/xwss/config"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xwss:RequireEncryption</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xwss:SecurityConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果请求消息是未加密的，<code>XwsSecurityInterceptor</code> 返回SOAP错误。如果加密，会调起以注册的<code>DecryptionKeyCallback</code> 处理器。spring-ws中提供了一个这样的处理器：<code>KeyStoreCallbackHandler</code>。</p>
<h5><span id="keystorecallbackhandler">KeyStoreCallbackHandler</span><a href="#keystorecallbackhandler" class="header-anchor">#</a></h5><p>如同前面介绍， <code>KeyStoreCallbackHandler</code>，用 <code>java.security.KeyStore</code>处理各种加密回调，其中包括解密，为了解密，处理器使用了<code>keyStore</code>属性。另外必须设置<code>privateKeyPassword</code>属性解锁签名中用到的私钥。如果解密基于对称秘钥的加密方式，应当使用<code>symmetricStore</code>属性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keyStoreHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.KeyStoreCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStore"</span> <span class="attr">ref</span>=<span class="string">"keyStore"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"privateKeyPassword"</span> <span class="attr">value</span>=<span class="string">"changeit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keyStore"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.support.KeyStoreFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:keystore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"changeit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="jia-mi">加密</span><a href="#jia-mi" class="header-anchor">#</a></h4><p>为了加密发出的SOAP消息，安全策略配置文件中需要包含<code>Encrypt</code> 元素，<code>Encrypt</code>元素中可以包含<code>EncryptionTarget</code> 元素指明哪些元素被加密，一个对称秘钥来加密消息，<a href="https://docs.oracle.com/cd/E17802_01/webservices/webservices/docs/1.6/tutorial/doc/XWS-SecurityIntro4.html#wp565951" target="_blank" rel="noopener"><code>Encrypt</code>子元素参见地址</a>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xwss:SecurityConfiguration</span> <span class="attr">xmlns:xwss</span>=<span class="string">"http://java.sun.com/xml/ns/xwss/config"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xwss:Encrypt</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xwss:SecurityConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>XwsSecurityInterceptor</code> 会调起已注册的<code>EncryptionKeyCallback</code> 回调，spring-ws中提供了一个这样的回调处理器：<code>KeyStoreCallbackHandler</code></p>
<h5><span id="keystorecallbackhandler">KeyStoreCallbackHandler</span><a href="#keystorecallbackhandler" class="header-anchor">#</a></h5><p>如同前面介绍， <code>KeyStoreCallbackHandler</code>，用 <code>java.security.KeyStore</code>处理各种加密回调，其中包括加密，基于public key的加密处理器使用了<code>trustSotre</code>属性。基于对称秘钥的加密方式，应当使用<code>symmetricStore</code>属性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keyStoreHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.xwss.callback.KeyStoreCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trustStore"</span> <span class="attr">ref</span>=<span class="string">"trustStore"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trustStore"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.support.KeyStoreFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:truststore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"changeit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="an-quan-zhong-de-yi-chang-chu-li">安全中的异常处理</span><a href="#an-quan-zhong-de-yi-chang-chu-li" class="header-anchor">#</a></h3><p>当保护或验证动作失败后，<code>XwsSecurityInterceptor</code> 会抛出<code>WsSecuritySecurementException</code> 或者<code>WsSecurityValidationException</code> 异常，这些异常由拦截器自己处理，并没按<a href="https://docs.spring.io/spring-ws/docs/3.0.7.RELEASE/reference/#server-endpoint-exception-resolver" target="_blank" rel="noopener">标准的异常处理机制</a>处理。</p>
<ul>
<li><code>WsSecuritySecurementException</code>， 由<code>handleSecurementException</code>方法处理，默认情况下该方法记录错误日志，并中段后续流程。</li>
<li><code>WsSecurityValidationException</code>，由<code>handleValidationException</code> 方法处理，会创建一个SOAP1.1 Client或者SOAP1.2 Sender类型错误，直接返回响应。</li>
</ul>
<blockquote>
<p><code>handleSecurementException</code>和<code>handleValidationException</code>两个方法都是protected的方法，可以重写方法实现。</p>
</blockquote>
<h2><span id="wss4jsecurityinterceptor"><code>Wss4jSecurityInterceptor</code></span><a href="#wss4jsecurityinterceptor" class="header-anchor">#</a></h2><p><code>Wss4jSecurityInterceptor</code> 是一个endpoint拦截器，基于<a href="https://ws.apache.org/wss4j/" target="_blank" rel="noopener">Apache’s WSS4J</a>，支持<code>AxiomSoapMessageFactory</code> 或者<code>SaajSoapMessageFactory</code>创建的消息。</p>
<p>WSS4J实现了如下标准：</p>
<ul>
<li>OASIS Web Serives Security: SOAP Message Security 1.0 Standard 200401, March 2004</li>
<li>Username Token profile V1.0</li>
<li>X.509 Token Profile V1.0</li>
</ul>
<h3><span id="wss4jsecurityinterceptor-pei-zhi"><code>Wss4jSecurityInterceptor</code>配置</span><a href="#wss4jsecurityinterceptor-pei-zhi" class="header-anchor">#</a></h3><p>WSS4J没有使用任何的外部配置文件，完全通过属性配置来完成，验证和保密是通过拦截器的<code>validationActions</code> 和 <code>securementActions</code> 属性中配置的具体动作来完成的，多个动作用空格间隔。</p>
<p>action配置顺序很重要，拦截器会强制按照配置顺序来执行。配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">bean class="org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationActions"</span> <span class="attr">value</span>=<span class="string">"UsernameToken Encrypt"</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementActions"</span> <span class="attr">value</span>=<span class="string">"Encrypt"</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>验证action列表：</p>
<table>
<thead>
<tr>
<th>Validation action</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>UsernameToken</code></td>
<td>Validates username token</td>
</tr>
<tr>
<td><code>Timestamp</code></td>
<td>Validates the timestamp</td>
</tr>
<tr>
<td><code>Encrypt</code></td>
<td>Decrypts the message</td>
</tr>
<tr>
<td><code>Signature</code></td>
<td>Validates the signature</td>
</tr>
<tr>
<td><code>NoSecurity</code></td>
<td>No action performed</td>
</tr>
</tbody>
</table>
<p>保密action列表:</p>
<table>
<thead>
<tr>
<th>Securement action</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>UsernameToken</code></td>
<td>Adds a username token</td>
</tr>
<tr>
<td><code>UsernameTokenSignature</code></td>
<td>Adds a username token and a signature username token secret key</td>
</tr>
<tr>
<td><code>Timestamp</code></td>
<td>Adds a timestamp</td>
</tr>
<tr>
<td><code>Encrypt</code></td>
<td>Encrypts the response</td>
</tr>
<tr>
<td><code>Signature</code></td>
<td>Signs the response</td>
</tr>
<tr>
<td><code>NoSecurity</code></td>
<td>No action performed</td>
</tr>
</tbody>
</table>
<h3><span id="chu-li-shu-zi-zheng-shu">处理数字证书</span><a href="#chu-li-shu-zi-zheng-shu" class="header-anchor">#</a></h3><p>完成密码运算需要一个<code>org.apache.ws.security.components.crypto.Crypto</code>实例来完成keystore和certificate之间的互相操作，<code>Crypto</code> 实例可以通过WSS4J的 <code>CryptoFactory</code>或者spring-ws的<code>CryptoFactoryBean</code>获得。</p>
<h4><span id="cryptofactorybean">CryptoFactoryBean</span><a href="#cryptofactorybean" class="header-anchor">#</a></h4><p> <code>CryptoFactoryBean</code> 通过强类型属性或者<code>Properties</code> 对象类构建和配置 <code>Crypto</code>实例。默认情况下， <code>CryptoFactoryBean</code> 返回 <code>org.apache.ws.security.components.crypto.Merlin</code>实例，可以通过设置 <code>cryptoProvider</code> 属性修改返回。</p>
<p>配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStorePassword"</span> <span class="attr">value</span>=<span class="string">"mypassword"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStoreLocation"</span> <span class="attr">value</span>=<span class="string">"file:/path_to_keystore/keystore.jks"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="ren-zheng">认证</span><a href="#ren-zheng" class="header-anchor">#</a></h3><h4><span id="yan-zheng-yong-hu-ling-pai">验证用户令牌</span><a href="#yan-zheng-yong-hu-ling-pai" class="header-anchor">#</a></h4><p>sping-ws提供了一些回调处理器来集成Spring Security，另外spring-ws提供了一个通过<code>Properties</code>对象来配置用户和密码的回调处理器：<code>SimplePasswordValidationCallbackHandler</code>。回调处理器通过<code>Wss4jSecurityInterceptor</code>拦截器的<code>validationCallbackHandler</code> 属性来配置。</p>
<h5><span id="simplepasswordvalidationcallbackhandler">SimplePasswordValidationCallbackHandler</span><a href="#simplepasswordvalidationcallbackhandler" class="header-anchor">#</a></h5><p>这个处理是用加载到内存中的<code>Properties</code>对象来验证纯文本和摘要用户名令牌。配置只允许用户为“Bert”，密码为“Ernie”访问，则可以如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"callbackHandler"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.callback.SimplePasswordValidationCallbackHandler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"Bert"</span>&gt;</span>Ernie<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5><span id="springsecuritypasswordvalidationcallbackhandler">SpringSecurityPasswordValidationCallbackHandler</span><a href="#springsecuritypasswordvalidationcallbackhandler" class="header-anchor">#</a></h5><p><code>SpringSecurityPasswordValidationCallbackHandler</code> 通过Spring Security的<code>UserDetailService</code> 完成纯文本和摘要密码验证，<code>UserDetailService</code>可以从用户令牌中提取用户密码，然后对比摘要中密码是否与消息中摘要相同，如果相同，则认证成功，<code>UsernamePasswordAuthenticationToken</code>存储到<code>SecurityContextHolder</code>中。通过<code>userDetailsService</code>属性设置服务，通过<code>userCache</code>设置缓存信息。    </p>
<p>配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.callback.SpringDigestPasswordValidationCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDetailsService"</span> <span class="attr">ref</span>=<span class="string">"userDetailsService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDetailsService"</span> <span class="attr">class</span>=<span class="string">"com.mycompany.app.dao.UserDetailService"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="tian-jia-yong-hu-ming-ling-pai">添加用户名令牌</span><a href="#tian-jia-yong-hu-ming-ling-pai" class="header-anchor">#</a></h4><p>添加用户名令牌可以通过给 <code>Wss4jSecurityInterceptor</code>的<code>securementActions</code>属性设置<code>UsernameToken</code> ，并指定<code>securementUsername</code> 和<code>securementPassword</code>属性来完成。</p>
<p>通过<code>securementPasswordType</code> 属性可以设置密码类型</p>
<ul>
<li><code>PasswordText</code> 纯文本密码</li>
<li><code>PasswordDigest</code> 摘要密码（默认）</li>
</ul>
<p>摘要密码类型配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementActions"</span> <span class="attr">value</span>=<span class="string">"UsernameToken"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementUsername"</span> <span class="attr">value</span>=<span class="string">"Ernie"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementPassword"</span> <span class="attr">value</span>=<span class="string">"Bert"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>纯文本密码类型需要通过<code>securementUsernameTokenElements</code> 属性给拦截器增加<code>Nonce</code> 或者<code>Created</code> 元素</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementActions"</span> <span class="attr">value</span>=<span class="string">"UsernameToken"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementUsername"</span> <span class="attr">value</span>=<span class="string">"Ernie"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementPassword"</span> <span class="attr">value</span>=<span class="string">"Bert"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementPasswordType"</span> <span class="attr">value</span>=<span class="string">"PasswordText"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementUsernameTokenElements"</span> <span class="attr">value</span>=<span class="string">"Nonce Created"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="zheng-shu-ren-zheng">证书认证</span><a href="#zheng-shu-ren-zheng" class="header-anchor">#</a></h4><p>证书认证与数字签名时类似的，WSS4J 把数字证书当做签名验证和保密的一部分来处理。具体来说，<code>Wss4jSecurityInterceptor</code>的<code>securementSignatureKeyIdentifier</code> 属性必须设置为<code>DirectReference</code> ，使得拦截器WSS4J 可以在发出的消息中生成包含X509证书的<code>BinarySecurityToken</code> ，证书的名称和密码通过<code>securementUsername</code> 和<code>securementPassword</code> 属性设置。</p>
<p>配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementActions"</span> <span class="attr">value</span>=<span class="string">"Signature"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementSignatureKeyIdentifier"</span> <span class="attr">value</span>=<span class="string">"DirectReference"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementUsername"</span> <span class="attr">value</span>=<span class="string">"mycert"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementPassword"</span> <span class="attr">value</span>=<span class="string">"certpass"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementSignatureCrypto"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStorePassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStoreLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/keystore.jks"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>证书认证的普通用法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationActions"</span> <span class="attr">value</span>=<span class="string">"Signature"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationSignatureCrypto"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStorePassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStoreLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/keystore.jks"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>Wss4jSecurityInterceptor</code>通过WSS4J 的默认实现校验证书的有效性，可以通过<code>verifyCertificateTrust</code> 方法改变。</p>
<h3><span id="an-quan-shi-jian-chuo">安全时间戳</span><a href="#an-quan-shi-jian-chuo" class="header-anchor">#</a></h3><h4><span id="yan-zheng-shi-jian-chuo">验证时间戳</span><a href="#yan-zheng-shi-jian-chuo" class="header-anchor">#</a></h4><p>拦截器的<code>validationActions</code> 属性设置为<code>Timestamp</code> 来校验时间戳，将<code>timestampStrict</code> 属性设置为true可以覆盖SOAP消息发送者的时间戳语义，<code>timeToLive</code> （以秒为单位，默认300）指定服务端的验证时间。</p>
<p>如下配置表示：时间戳校验限制在10秒内，超过10秒直接拒绝</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationActions"</span> <span class="attr">value</span>=<span class="string">"Timestamp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timestampStrict"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeToLive"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5><span id="tian-jia-shi-jian-chuo">添加时间戳</span><a href="#tian-jia-shi-jian-chuo" class="header-anchor">#</a></h5><p>拦截器的<code>securementActions</code> 属性设置为<code>Timestamp</code> 为发出的消息生成时间戳，<code>timestampPrecisionInMilliseconds</code> 属性来确定是否精确到毫秒级，默认是true</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementActions"</span> <span class="attr">value</span>=<span class="string">"Timestamp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timestampPrecisionInMilliseconds"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="shu-zi-zheng-shu">数字证书</span><a href="#shu-zi-zheng-shu" class="header-anchor">#</a></h3><h4><span id="yan-zheng-qian-ming">验证签名</span><a href="#yan-zheng-qian-ming" class="header-anchor">#</a></h4><p>验证签名时，拦截器的<code>validationActions</code> 属性必须包含<code>Signature</code> 。另外<code>validationSignatureCrypto</code> 属性必须指明包含证书的keystore。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"wsSecurityInterceptor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationActions"</span> <span class="attr">value</span>=<span class="string">"Signature"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationSignatureCrypto"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStorePassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStoreLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/keystore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="qian-ming-xiao-xi">签名消息</span><a href="#qian-ming-xiao-xi" class="header-anchor">#</a></h4><p>拦截器的<code>securementActions</code>属性包含<code>Signature</code> 来对发出的消息进行签名，<code>securementUsername</code> 和<code>securementPassword</code> 属性设置用户名密码，<code>securementSignatureCrypto</code> 属性必须指向包含私钥的keystore。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementActions"</span> <span class="attr">value</span>=<span class="string">"Signature"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementUsername"</span> <span class="attr">value</span>=<span class="string">"mykey"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementPassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementSignatureCrypto"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStorePassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStoreLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/keystore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过<code>securementSignatureAlgorithm</code>定义签名算法</p>
<p><code>securementSignatureKeyIdentifier</code> 属性可以指定秘钥类型</p>
<ul>
<li><code>IssuerSerial</code> </li>
<li><code>DirectReference</code> </li>
</ul>
<p><code>securementSignatureParts</code> 属性控制哪些消息需要签名，配置内容是用分好分隔的元素，一般情况下结构是<code>{}{namespace}Element</code>，默认情况下签名SOAP消息体。</p>
<p>spring-ws签名<code>echoResponse</code> 配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementSignatureParts"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">"&#123;&#125;&#123;http://www.springframework.org/spring-ws/samples/echo&#125;echoResponse"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>命名空间为空的元素，可以用<code>Null</code>做命名空间。如果请求中<code>Body</code>没有其他元素，SOAP的命名空间可以使空的大括号（{}）</p>
<h4><span id="qian-ming-que-ren">签名确认</span><a href="#qian-ming-que-ren" class="header-anchor">#</a></h4><p><code>enableSignatureConfirmation</code> 属性设置为true可以是签名确认生效，签名确认是跨越请求与相应双方的，因此<code>secureResponse</code> 和<code>validateRequest</code> 必须设置为ture（默认既是true）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationActions"</span> <span class="attr">value</span>=<span class="string">"Signature"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSignatureConfirmation"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationSignatureCrypto"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStorePassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStoreLocation"</span> <span class="attr">value</span>=<span class="string">"file:/keystore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="jia-jie-mi">加解密</span><a href="#jia-jie-mi" class="header-anchor">#</a></h3><h4><span id="jie-mi">解密</span><a href="#jie-mi" class="header-anchor">#</a></h4><p>拦截器的<code>validationActions</code> 属性中增加<code>Encrypt</code> 解密进入的消息，其他配置信息取决于消息中的关键信息。</p>
<p>用内嵌的对称秘钥（ <code>xenc:EncryptedKey</code>元素）解密消息，<code>validationDecryptionCrypto</code> 属性需要指向包含私钥的keystore，另外<code>validationCallbackHandler</code> 属性需要注入<code>org.springframework.ws.soap.security.wss4j.callback.KeyStoreCallbackHandler</code>来制定秘钥的密码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationActions"</span> <span class="attr">value</span>=<span class="string">"Encrypt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationDecryptionCrypto"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStorePassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStoreLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/keystore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.callback.KeyStoreCallbackHandler"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"privateKeyPassword"</span> <span class="attr">value</span>=<span class="string">"mykeypass"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用<strong>key name</strong>（<code>ds:KeyName</code>元素）解密消息，需要配置<code>KeyStoreCallbackHandler</code> 指向有对称秘钥的keystore，<code>symmetricKeyPassword</code> 属性指明秘钥的密码，秘钥的名称是通过<code>ds:KeyName</code>元素指定的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationActions"</span> <span class="attr">value</span>=<span class="string">"Encrypt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.callback.KeyStoreCallbackHandler"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStore"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.support.KeyStoreFactoryBean"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:keystore.jks"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"JCEKS"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"symmetricKeyPassword"</span> <span class="attr">value</span>=<span class="string">"mykeypass"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="jia-mi">加密</span><a href="#jia-mi" class="header-anchor">#</a></h4><p>拦截器的<code>securementActions</code> 属性增加<code>Encrypt</code> 使得对发出的消息加密生效，<code>securementEncryptionUser</code> 属性用于设置用于加密的证书别名，<code>securementEncryptionCrypto</code> 属性指定证书所在的秘钥库。因为加密依赖于公开的证书，因此无需传递密码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementActions"</span> <span class="attr">value</span>=<span class="string">"Encrypt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementEncryptionUser"</span> <span class="attr">value</span>=<span class="string">"mycert"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementEncryptionCrypto"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStorePassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStoreLocation"</span> <span class="attr">value</span>=<span class="string">"file:/keystore.jks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>加密定制的通过<code>securementEncryptionKeyIdentifier</code>指定：</p>
<ul>
<li><p><code>IssuerSerial</code></p>
</li>
<li><p><code>X509KeyIdentifier</code></p>
</li>
<li><p><code>DirectReference</code></p>
</li>
<li><p><code>Thumbprint</code></p>
</li>
<li><p><code>SKIKeyIdentifier</code> </p>
</li>
<li><p><code>EmbeddedKeyName</code></p>
<p>选怎<code>EmbeddedKeyName</code> 类型时，需要在<code>securementEncryptionUser</code> 属性中指定<strong>secret key</strong>。WSS4J 需要回调处理器来获取秘钥，因此<code>securementCallbackHandler</code> 处理器必须通过<code>KeyStoreCallbackHandler</code> 指定keystore，默认情况下，WS-Security的结果消息头中的<code>ds:KeyName</code>元素会包含<code>securementEncryptionUser</code> 属性。<code>securementEncryptionEmbeddedKeyName</code> 属性可以设置不同的名称来满足需求。</p>
<p>如下配置表示发出的消息会被别名为<code>secretKey</code> 的秘钥加密，<code>myKey</code> 会出现在<code>ds:KeyName</code>元素中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementActions"</span> <span class="attr">value</span>=<span class="string">"Encrypt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementEncryptionKeyIdentifier"</span> <span class="attr">value</span>=<span class="string">"EmbeddedKeyName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementEncryptionUser"</span> <span class="attr">value</span>=<span class="string">"secretKey"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementEncryptionEmbeddedKeyName"</span> <span class="attr">value</span>=<span class="string">"myKey"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementCallbackHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.wss4j.callback.KeyStoreCallbackHandler"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"symmetricKeyPassword"</span> <span class="attr">value</span>=<span class="string">"keypass"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyStore"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.ws.soap.security.support.KeyStoreFactoryBean"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"file:/keystore.jks"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"jceks"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>securementEncryptionKeyTransportAlgorithm</code> 属性用于定义用哪一种算法加密生成的对称秘钥，支持两种方式</p>
<ul>
<li><code>https://www.w3.org/2001/04/xmlenc#rsa-1_5</code>（默认）</li>
<li><code>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</code></li>
</ul>
<p>对称加密算可以通过<code>securementEncryptionSymAlgorithm</code> 属性的设置来使用，支持四种方式</p>
<ul>
<li><code>http://www.w3.org/2001/04/xmlenc#aes128-cbc</code> (默认)</li>
<li><code>http://www.w3.org/2001/04/xmlenc#tripledes-cbc</code></li>
<li><code>http://www.w3.org/2001/04/xmlenc#aes256-cbc</code></li>
<li><code></code><a href="http://www.w3.org/2001/04/xmlenc#aes192-cbc`" target="_blank" rel="noopener">http://www.w3.org/2001/04/xmlenc#aes192-cbc`</a></li>
</ul>
<p><code>securementEncryptionParts</code> 属性指定哪些消息内容被加密，内容是通过分好间隔的元素。内容结构：加密模式和命名空间分别用大括号阔气放在元素名称之前，加密模式是<code>{Content}</code>或者<code>{Element}</code>。</p>
<p>配置示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securementEncryptionParts"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">"&#123;Content&#125;&#123;http://www.springframework.org/spring-ws/samples/echo&#125;echoResponse"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>加密模式、命名空间、元素名称都是敏感的，加密模式和命名空间可以省略，如上面的配置加密模式默认是<code>Content</code>，命名空间模式是SOAP的命名空间。</p>
<p>没有命名空间的元素，可以用<code>Null</code>作为命名空间，如果没有配置任何内容，处理器会默认用<code>Content</code>加密模式对SOAP的消息体（Body）加密。</p>
<h3><span id="an-quan-zhong-de-yi-chang-chu-li">安全中的异常处理</span><a href="#an-quan-zhong-de-yi-chang-chu-li" class="header-anchor">#</a></h3><p>参加<code>XwsSecurityInterceptor</code>中异常处理的描述。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JAVA</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>webservice</tag>
        <tag>spring-ws</tag>
      </tags>
  </entry>
  <entry>
    <title>jboss</title>
    <url>/2019/10/25/jboss/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11:53:30,703 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-4) WFLYSRV0003: Could not index class module-info.class at /C:/Users/elf/content/upchat-user.war/WEB-INF/lib/txw2-2.3.1.jar: java.lang.IllegalStateException: Unknown tag! pos=4 poolCount = 18</span><br><span class="line">        at org.jboss.jandex.Indexer.processConstantPool(Indexer.java:1416)</span><br><span class="line">        at org.jboss.jandex.Indexer.index(Indexer.java:1450)</span><br><span class="line">        at org.jboss.as.server.deployment.annotation.ResourceRootIndexer.indexResourceRoot(ResourceRootIndexer.java:99)</span><br><span class="line">        at org.jboss.as.server.deployment.annotation.AnnotationIndexProcessor.deploy(AnnotationIndexProcessor.java:51)</span><br><span class="line">        at org.jboss.as.server.deployment.DeploymentUnitPhaseService.start(DeploymentUnitPhaseService.java:147)</span><br><span class="line">        at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1948)</span><br><span class="line">        at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1881)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11:53:31,751 ERROR [org.jboss.as.controller.management-operation] (Controller Boot Thread) WFLYCTL0013: Operation (&quot;deploy&quot;) failed - address: ([(&quot;deployment&quot; =&gt; &quot;upchat-user.war&quot;)]) - failure description: &#123;</span><br><span class="line">    &quot;WFLYCTL0080: Failed services&quot; =&gt; &#123;&quot;jboss.deployment.unit.\&quot;upchat-user.war\&quot;.PARSE&quot; =&gt; &quot;org.jboss.msc.service.StartException in service jboss.deployment.unit.\&quot;upchat-user.war\&quot;.PARSE: WFLYSRV0153: Failed to process phase PARSE of deployment \&quot;upchat-user.war\&quot;</span><br><span class="line">    Caused by: org.jboss.as.server.deployment.DeploymentUnitProcessingException: WFLYWS0059: Apache CXF library (cxf-core-3.3.3.jar) detected in ws endpoint deployment; either provide a proper deployment replacing embedded libraries with container module dependencies or disable the webservices subsystem for the current deployment adding a proper jboss-deployment-structure.xml descriptor to it. The former approach is recommended, as the latter approach causes most of the webservices Java EE and any JBossWS specific functionality to be disabled.&quot;&#125;,</span><br><span class="line">    &quot;WFLYCTL0412: Required services that are not installed:&quot; =&gt; [&quot;jboss.deployment.unit.\&quot;upchat-user.war\&quot;.PARSE&quot;],</span><br><span class="line">    &quot;WFLYCTL0180: Services with missing/unavailable dependencies&quot; =&gt; undefined</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>Jboss</category>
      </categories>
      <tags>
        <tag>Jboss</tag>
      </tags>
  </entry>
  <entry>
    <title>jobss</title>
    <url>/2019/10/25/jobss/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>jvm调优</title>
    <url>/2019/10/24/jvm%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h2><span id="jvm-jian-kong-gong-ju-yu-shi-yong-fang-fa">JVM监控工具与使用方法</span><a href="#jvm-jian-kong-gong-ju-yu-shi-yong-fang-fa" class="header-anchor">#</a></h2><ul>
<li><p>快速查看gc 次数和用时</p>
<p>jstat -gcutil pid</p>
</li>
<li><p>快速定位内存溢出的类</p>
<p>jmap -histo pid</p>
</li>
<li><p>查看当前内存使用情况</p>
<p>jmap -heap pid</p>
</li>
<li><p>抓取查看线程情况</p>
<p>jstack pid</p>
</li>
</ul>
<h2><span id="jstat">jstat</span><a href="#jstat" class="header-anchor">#</a></h2><p>监控jvm(Hotspot)性能统计信息，<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html" target="_blank" rel="noopener">查看官方网站</a></p>
<h3><span id="yu-fa">语法</span><a href="#yu-fa" class="header-anchor">#</a></h3><p><strong>jstat</strong> [ <em>generalOption</em> | <em>outputOptions vmid</em> [ <em>interval</em>[s|ms] [ <em>count</em> ] ]</p>
<h3><span id="generaloption">generalOption</span><a href="#generaloption" class="header-anchor">#</a></h3><p>单个常规命令 </p>
<ul>
<li><p><code>-help</code></p>
<p>展示帮助信息</p>
</li>
<li><p><code>-options</code></p>
<p>展示所有的静态列表选项</p>
</li>
</ul>
<h3><span id="outputotions">outputOtions</span><a href="#outputotions" class="header-anchor">#</a></h3><p>输出选项决定了<code>jstat</code>命令输出的内容和格式，必须有一个<code>statOption</code>，后面可以任意追加<code>-h -t -j</code>参数。</p>
<p>输出内容以表格形式展现，第一行表示每列的意思.</p>
<ul>
<li><p><code>-h n</code></p>
<p>每多少行显示一次列表头，默认是0，表示只在第一行显示一次列表头</p>
<p><img src="/2019/10/24/jvm调优/jstat-01.png" alt></p>
<p><img src="/2019/10/24/jvm调优/jstat-02.png" alt></p>
</li>
<li><p><code>-t</code></p>
<p>在输出内容的第一列显示<code>timestamp</code>列，表示当前JVM启动的时间</p>
<p><img src="/2019/10/24/jvm调优/jstat-05.png" alt></p>
</li>
<li><p><code>-J</code><em>javaOptions</em></p>
<p>将<code>javaOptions</code>参数传递给Java应用。<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#CBBFHAJA" target="_blank" rel="noopener">查看完整Java参数</a></p>
</li>
</ul>
<h4><span id="statoption"><code>statOption</code></span><a href="#statoption" class="header-anchor">#</a></h4><h5><span id="class"><code>class</code></span><a href="#class" class="header-anchor">#</a></h5><p>显示有关类加载器的信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -class 8144</span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     Time</span><br><span class="line"> 80093 75156.4    20263 14311.9     373.09</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Loaded</code>：已加载的类个数</li>
<li><code>Bytes</code>：已加载的字节数（kb）</li>
<li><code>Unloaded</code>：未加载的类个数</li>
<li><code>Bytes</code>：未加载的字节数（kb）</li>
<li><p><code>Time</code>：Time spent performing class loading and unloading operations</p>
</li>
<li><p><code>compiler</code>Java HotSpot VM即时编译器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -compiler 8144 1s 20</span><br><span class="line">Compiled Failed Invalid   Time   FailedType FailedMethod</span><br><span class="line">  120670      6       0  2088.20          1 com/intellij/ide/ui/laf/darcula/ui/DarculaProgressBarUI paintIndeterminate</span><br><span class="line">  120670      6       0  2088.20          1 com/intellij/ide/ui/laf/darcula/ui/DarculaProgressBarUI paintIndeterminate</span><br><span class="line">  120670      6       0  2088.20          1 com/intellij/ide/ui/laf/darcula/ui/DarculaProgressBarUI paintIndeterminate</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Compiled</code>：已执行的编译数</li>
<li><code>Failed</code>：失败的编译数</li>
<li><code>Invalid</code>：无效的编译数</li>
<li><code>Time</code>：执行编译的总时间</li>
<li><code>FailedType</code>：最后一次失败编译的编译类型</li>
<li><code>FailedMethod</code>：最后一次编译失败的类名和方法</li>
</ul>
</li>
</ul>
<h5><span id="gc"><code>gc</code></span><a href="#gc" class="header-anchor">#</a></h5><p> 堆垃圾收集的统计信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gc 8144</span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">17472.0 17472.0  0.0    0.0   139776.0 136633.8  349568.0   209736.5  221952.0 213554.6  0.0    0.0     4038  100.549  290   258.786  359.335</span><br></pre></td></tr></table></figure>
<ul>
<li><code>S0C</code>：survivor 0区的容量（kb）</li>
<li><code>S1C</code>：survivor 1区的容量（kb）</li>
<li><code>S0U</code>：survivor 0区的使用量（kb）</li>
<li><code>S1U</code>：survivor 1区的使用量（kb）</li>
<li><code>EC</code>：伊甸园（eden ）区的容量（kb）</li>
<li><code>EU</code>：伊甸园（eden ）区的使用量（kb）</li>
<li><code>OC</code>：老年代的容量（kb）</li>
<li><code>OU</code>：老年代的使用量（kb）</li>
<li><code>MC</code>：Metaspace 的容量（kb）</li>
<li><code>MU</code>：Metaspace 的使用量（kb）</li>
<li><code>CCSC</code>：压缩类空间容量Compressed class space capacity（kb）</li>
<li><code>CCSU</code>：压缩类空间使用量Compressed class space used（kb）</li>
<li><code>YGC</code>：青年代垃圾收集执行次数</li>
<li><code>YGCT</code>：青年代垃圾收集的时间</li>
<li><code>FGC</code>：full gc的执行册书</li>
<li><code>FGCT</code>：full gc的执行时间</li>
<li><code>GCT</code>：gc执行总时间</li>
</ul>
<h5><span id="gccapacity"><code>gccapacity</code></span><a href="#gccapacity" class="header-anchor">#</a></h5><p>各年代内存池和空间容量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gccapacity 8144</span><br><span class="line"> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC</span><br><span class="line"> 43648.0 174720.0 174720.0 17472.0 17472.0 139776.0    87424.0   349568.0   349568.0   349568.0      0.0 222592.0 221952.0      0.0      0.0      0.0   4044   290</span><br></pre></td></tr></table></figure>
<ul>
<li><code>NGCMN</code>：最小青年代容量（kb）</li>
<li><code>NGCMX</code>：最大青年代容量（kb）</li>
<li><code>NGC</code>：当前青年代大小（kb）</li>
<li><code>S0C</code>：survivor 0空间容量（kb）</li>
<li><code>S1C</code>：survivor 1空间容量（kb）</li>
<li><code>EC</code>：eden空间容量（kb）</li>
<li><code>OGCMN</code>：最小老年代容量（kb）</li>
<li><code>OGCMX</code>：最大老年代容量（kb）</li>
<li><code>OGC</code>：当前老年代容量（kb）</li>
<li><code>OC</code>：old空间容量（kb）</li>
<li><code>MCMN</code>：最小metaspace 容量（kb）</li>
<li><code>MCMX</code>：最大metaspace 容量（kb）</li>
<li><code>MC</code>：metaspace 容量（kb）</li>
<li><code>CCSMN</code>：最小压缩类空间容量（kb）</li>
<li><code>CCSMX</code>：最大压缩类空间容量（kb）</li>
<li><code>CCSC</code>：压缩类空间容量（kb）</li>
<li><code>YGC</code>：年轻代GC次数</li>
<li><code>FGC</code>：full GC次数</li>
</ul>
<h5><span id="gccause"><code>gccause</code></span><a href="#gccause" class="header-anchor">#</a></h5><p>这个参数展示的垃圾收集信息与<code>-gcutil</code>基本一致，只是多了最后两列</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gccause 8144</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC</span><br><span class="line">  0.00   1.30  89.02  61.17  96.22      -   4063  101.119   291  261.206  362.325 Allocation Failure   No GC</span><br></pre></td></tr></table></figure>
<ul>
<li><code>LGCC</code>：上一次垃圾收集发生的原因</li>
<li><code>GCC</code>：本次垃圾收集发生的原因</li>
</ul>
<p>其他列查看<code>-gctuil</code></p>
<h5><span id="gcnew"><code>gcnew</code></span><a href="#gcnew" class="header-anchor">#</a></h5><p>青年代统计信息（New generation statistics）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcnew 8144</span><br><span class="line"> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT</span><br><span class="line">17472.0 17472.0  316.7    0.0  6   6 8736.0 139776.0  88239.2   4064  101.137</span><br></pre></td></tr></table></figure>
<p>其中 <code>S0C</code> <code>S1C</code> <code>S0U</code> <code>S1U</code> <code>YGC</code> <code>YGCT</code> 与前面所述一致</p>
<ul>
<li><code>TT</code>：晋升阈值（Tenuring threshold）</li>
<li><code>MTT</code>：最大晋升阈值（Tenuring threshold）</li>
<li><code>DSS</code>：期望servivor（幸存区）大小（kb）</li>
<li><code>EC</code>：eden空间容量（kb）</li>
<li><code>EU</code>：eden空间使用量（kb）</li>
</ul>
<h5><span id="gcnewcapacity"><code>gcnewcapacity</code></span><a href="#gcnewcapacity" class="header-anchor">#</a></h5><p>青年代空间大小统计信息（New generation space size statistics）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcnewcapacity 8144</span><br><span class="line">  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC</span><br><span class="line">   43648.0   174720.0   174720.0  17472.0  17472.0  17472.0  17472.0   139776.0   139776.0  4072   291</span><br></pre></td></tr></table></figure>
<p>其中 <code>NGCMN</code> <code>NGCMX</code> <code>NGC</code> <code>S0C</code> <code>S1C</code> <code>S0U</code> <code>S1U</code> <code>EC</code> <code>YGC</code> <code>YGCT</code> 与前面所述一致。</p>
<ul>
<li><code>S0CMX</code>：最大survivor 0 空间容量</li>
<li><code>S1CMX</code>：最大survivor 1 空间容量</li>
<li><code>ECMX</code>：最大eden空间容量</li>
</ul>
<h5><span id="gcold"><code>gcold</code></span><a href="#gcold" class="header-anchor">#</a></h5><p>老年代和metaspace behavior统计信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcold 8144</span><br><span class="line">   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT</span><br><span class="line">221952.0 213554.9      0.0      0.0    349568.0    213839.2   4073   291  261.206  362.499</span><br></pre></td></tr></table></figure>
<p>具体每列表示信息参考其他章节介绍</p>
<h5><span id="gcoldcapacity"><code>gcoldcapacity</code></span><a href="#gcoldcapacity" class="header-anchor">#</a></h5><p>老年代大小统计信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcoldcapacity 8144</span><br><span class="line">   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT</span><br><span class="line">    87424.0    349568.0    349568.0    349568.0  4073   292  264.125  365.418</span><br></pre></td></tr></table></figure>
<p>具体每列表示信息参考其他章节介绍</p>
<h5><span id="gcmetacapacity"><code>gcmetacapacity</code></span><a href="#gcmetacapacity" class="header-anchor">#</a></h5><p>metaspace大小统计信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcmetacapacity 8144</span><br><span class="line">   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT</span><br><span class="line">       0.0   222592.0   221952.0        0.0        0.0        0.0  4073   292  264.125  365.418</span><br></pre></td></tr></table></figure>
<h5><span id="gcutil"><code>gcutil</code></span><a href="#gcutil" class="header-anchor">#</a></h5><p>垃圾收集统计信息汇总。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -gcutil 8144</span><br><span class="line"> S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line"> 1.59   0.00  55.11  61.15  96.22      -   4074  101.313   292  264.125  365.437</span><br></pre></td></tr></table></figure>
<ul>
<li><code>S0</code>：survivor 0 空间使用百分比</li>
<li><code>S1</code>：survivor 1 空间使用百分比</li>
<li><code>E</code>： eden空间使用百分比</li>
<li><code>M</code>：metaspace空间使用百分比</li>
<li><code>CCS</code>：压缩类空间使用百分比</li>
<li><code>YGC</code>：青年代垃圾收集次数</li>
<li><code>YGCT</code>：青年代垃圾收集时间</li>
<li><code>FGC</code>：full GC次数</li>
<li><code>FGCT</code>：full GC时间</li>
<li><code>GCT</code>：垃圾收集总时间</li>
</ul>
<h5><span id="printcompilation"><code>printcompilation</code></span><a href="#printcompilation" class="header-anchor">#</a></h5><p>Java HotSpot 虚拟机编译方法统计信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jstat -printcompilation 8144</span><br><span class="line">Compiled  Size  Type Method</span><br><span class="line">  120686     17    1 com/intellij/psi/impl/source/PsiEnumConstantImpl$MyReference &lt;init&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Compiled</code>：最近的编译方法执行的编译数（Number of compilation tasks performed by the most recently compiled method）</li>
<li><code>Size</code>：最近编译的方法的字节码的字节数（ Number of bytes of byte code of the most recently compiled method）</li>
<li><code>Type</code>：最近编译方法的编译类型</li>
<li><code>Method</code>：最近编译方法的类名和方法。类路径中用<code>/</code>代替<code>.</code>，这个两个字段的格式与HotSpot的 <code>-XX:+PrintCompilation</code>参数一致。</li>
</ul>
<h2><span id="jps">jps</span><a href="#jps" class="header-anchor">#</a></h2><p>列出目标系统上的Java虚拟机，即Java进程。</p>
<h3><span id="yu-fa">语法</span><a href="#yu-fa" class="header-anchor">#</a></h3><p><strong>jps</strong> [ <em>options</em> ] [ <em>hostid</em> ]</p>
<h3><span id="jie-shi">解释</span><a href="#jie-shi" class="header-anchor">#</a></h3><ul>
<li>用于列出HotSpot虚拟机；</li>
<li>需要有访问权限才能显示在列表中；</li>
<li>如果没有指定<code>hostid</code>，列出本机的JVMs；</li>
<li>指定了<code>hostid</code>，则使用指定的协议和端口搜索目标主机上的JVMs；</li>
<li><code>jps</code>命令为搜索到的JVMs会列出本地的JVM标识或者<code>lvmid</code>；如果没有任何指定，则是<code>lmid</code>，加上应用或者jar文件名称的简写（省略包信息或者jar的路径）；</li>
<li><code>jps</code>通过Java启动器来查找main方法的类名和参数，如果JVM是自定义启动器，main方法的类或者jar文件的名称和参数不可用，输出 <code>Unknown</code>；</li>
<li><code>jps</code>列出JVMs受执行该命令的用户权限限制；</li>
</ul>
<h3><span id="options">Options</span><a href="#options" class="header-anchor">#</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps</span><br><span class="line">1040 Jps</span><br><span class="line">8144</span><br><span class="line">15176 JConsole</span><br><span class="line">16456 jar</span><br></pre></td></tr></table></figure>
<h4><span id="q"><code>q</code></span><a href="#q" class="header-anchor">#</a></h4><p>禁止输出main方法的类或者jar文件的名称和参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps -q</span><br><span class="line">8144</span><br><span class="line">13172</span><br><span class="line">15176</span><br><span class="line">16456</span><br></pre></td></tr></table></figure>
<h4><span id="m"><code>m</code></span><a href="#m" class="header-anchor">#</a></h4><p>输出main方法的参数，JVM自带参数不会输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps -m</span><br><span class="line">8144</span><br><span class="line">15176 JConsole</span><br><span class="line">16456 jar -Dabc.config.file=appCfg/abc-consumer.xml</span><br><span class="line">19240 Jps -m</span><br></pre></td></tr></table></figure>
<h4><span id="l"><code>l</code></span><a href="#l" class="header-anchor">#</a></h4><p>输出应用主类的完整包路径名称或者jar文件的全路径名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps -l</span><br><span class="line">8144</span><br><span class="line">11076 sun.tools.jps.Jps</span><br><span class="line">15176 sun.tools.jconsole.JConsole</span><br><span class="line">16456 ApacheJMeter.jar</span><br></pre></td></tr></table></figure>
<p><img src="/2019/10/24/jvm调优/jps-01.png" alt></p>
<h4><span id="v"><code>v</code></span><a href="#v" class="header-anchor">#</a></h4><p>输出JVM的参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps -v</span><br><span class="line">8144  -Xms128m -Xmx512m -XX:ReservedCodeCacheSize=240m -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -ea -Dsun.io.useCanonCaches=false -Djava.net.preferIPv4Stack=true -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow -Dfile.encoding=UTF-8 -Djb.vmOptionsFile=D:\path\IntelliJIDEA2016.2.4\bin\idea.exe.vmoptions -Xbootclasspath/a:D:\path\IntelliJIDEA2016.2.4\lib\boot.jar -Didea.paths.selector=IntelliJIdea2016.2 -Didea.jre.check=true -XX:ErrorFile=C:\Users\elf\java_error_in_idea_%p.log -XX:HeapDumpPath=C:\Users\user\java_error_in_idea.hprof</span><br><span class="line">13752 Jps -Dapplication.home=D:\path\Java\java1.8\64_jdk1.8.0_40 -Xms8m</span><br><span class="line">15176 JConsole -Dapplication.home=D:\path\Java\java1.8\64_jdk1.8.0_40 -Xms8m -Djconsole.showOutputViewer</span><br><span class="line">16456 jar -XX:+HeapDumpOnOutOfMemoryError -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:G1ReservePercent=20 -Djava.security.egd=file:/dev/urandom -Duser.language=en -Duser.region=EN</span><br></pre></td></tr></table></figure>
<h4><span id="v"><code>V</code></span><a href="#v" class="header-anchor">#</a></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> jps -V</span><br><span class="line">8144</span><br><span class="line">19332 Jps</span><br><span class="line">15176 JConsole</span><br><span class="line">16456 jar</span><br></pre></td></tr></table></figure>
<p><code>-J</code><em>option</em></p>
<p>将<code>options</code>参数传递给Java应用。<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#CBBFHAJA" target="_blank" rel="noopener">查看完整Java参数</a></p>
<h3><span id="host-identifier-hostid">Host Identifier（Hostid）</span><a href="#host-identifier-hostid" class="header-anchor">#</a></h3><p>语法：<code>[protocol:][[//]hostname][:port][/servername]</code></p>
<h4><span id="protocol">protocol</span><a href="#protocol" class="header-anchor">#</a></h4><p>通信协议，如果<code>protocol</code>和<code>hostname</code>都不指定，默认是特定平台的、优化的、本地协议；如果不指定<code>protocol</code>，指定<code>hostname</code>，默认协议是<code>rmi</code>；</p>
<h4><span id="hostname">hostname</span><a href="#hostname" class="header-anchor">#</a></h4><p>目标主机的主机名或者IP地址，不指定<code>hostname</code>，则默认是<code>localhost</code>；</p>
<h4><span id="port">port</span><a href="#port" class="header-anchor">#</a></h4><p>与远程服务通信的端口。如果不指定<code>hostname</code>或者<code>protocol</code>指定为本地协议，那么忽略<code>port</code>；否则端口依赖于实现方式，对于默认的<code>rmi</code>协议，<code>port</code>是远程主机上的rmiregistry端口号；如果不指定<code>port</code>，<code>rmi</code>协议的默认端口是<code>1099</code>；</p>
<h4><span id="servername">servername</span><a href="#servername" class="header-anchor">#</a></h4><p>依赖于实现方式。本地协议忽略<code>servername</code>；<code>rmi</code>协议，<code>servername</code>是一个字符串，代表远程主机上RMI对象的名称，更多信息请查看<code>jstatd</code>命令的<code>-n</code>说明。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JAVA</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>maven仓库</title>
    <url>/2019/10/21/maven%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1><span id="maven-jie-xi-xia-zai-yi-lai-de-gui-ze">maven解析下载依赖的规则</span><a href="#maven-jie-xi-xia-zai-yi-lai-de-gui-ze" class="header-anchor">#</a></h1><ul>
<li>如果依赖配置为system，则直接从本地路径解析，不会从远程库下载</li>
<li></li>
</ul>
<h1><span id="ji-yi-ci-jiang-maven-ben-di-cang-ku-kao-bei-dao-qi-ta-ji-qi-de-keng">记一次将maven本地仓库拷贝到其他机器的坑</span><a href="#ji-yi-ci-jiang-maven-ben-di-cang-ku-kao-bei-dao-qi-ta-ji-qi-de-keng" class="header-anchor">#</a></h1><p>因为公司对安全要求较高，因此对网络的控制非常严格，BUT项目是与其他公司联合开发的，有很多依赖要么是内网上版本太低，要么是直接没有，把所有依赖放到私服又找不到管理私服的大佬（没办法，老牌企业的通病吧，找人干活要钱都难~），于是想到把原开发机器上的本地maven仓库字节拷贝到内网环境，然鹅折磨人的事情开始了~</p>
<p>由于内网还是架设有私服库的，本人入司也没几天，直接拷贝别人的settings.xml就开始，然后本地仓库已存在的依赖，却没法直接使用，始终在提示依赖找不到，而私服库上有没有对应版本。</p>
<p>在maven官网上彻底的研究了一翻settings.xml，可以参见<a href="https://elfdemonster.github.io/2019/10/20/maven-settings-xml/" target="_blank" rel="noopener">另一篇文章</a>，对setting.xml进行了重新配置</p>
<ul>
<li><p>offline默认配置是false，改为true，表示在离线模式下运行，不去远程仓库下载</p>
</li>
<li><p>去除所有镜像配置</p>
</li>
<li><p>删除maven仓库中所有.lastUpdated、_maven.repositories、_remote.repositories文件。这样maven就不会在进行验证，可以直接从本地库解析依赖。（为什么？参考上文maven仓库更新分析）</p>
</li>
<li><p>windows删除脚本，设置maven仓库路径，并修改对应的文件名即可</p>
<p><em>（网上搜到的，也不知道原出处是哪里，也有其他系统的版本，反正不是我自己写的，感谢大佬~）</em></p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> REPOSITORY_PATH=maven_repository_path</span><br><span class="line"><span class="comment">rem 搜索中。。。。</span></span><br><span class="line"><span class="keyword">for</span> /f "delims=" <span class="variable">%%i</span> <span class="keyword">in</span> ('<span class="built_in">dir</span> /b /s "<span class="variable">%REPOSITORY_PATH%</span>\*lastUpdated*"') <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">del</span> /s /q <span class="variable">%%i</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">rem 搜索完毕</span></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>maven-settings.xml</title>
    <url>/2019/10/20/maven-settings-xml/</url>
    <content><![CDATA[<p>maven运行时的配置文件settings.xml</p>
<h2><span id="an-zhuang-wei-zhi">安装位置</span><a href="#an-zhuang-wei-zhi" class="header-anchor">#</a></h2><ol>
<li>全局配置：${maven_home}/config/settings.xml</li>
<li>用户配置：~/.m2/settings.xml</li>
</ol>
<p>如果全局配置与用户配置同时存在，会进行合并，相同配置则以用户配置优先。</p>
<h2><span id="pei-zhi-jie-dian">配置节点</span><a href="#pei-zhi-jie-dian" class="header-anchor">#</a></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                          https://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">localRepository</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">interactiveMode</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">offline</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pluginGroups</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servers</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrors</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">proxies</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">profiles</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeProfiles</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3><span id="localrepository">localRepository</span><a href="#localrepository" class="header-anchor">#</a></h3><p>本地仓库路径，不配置则默认为${user.home}/.m2/repository</p>
<h3><span id="interactivemode">interactiveMode</span><a href="#interactivemode" class="header-anchor">#</a></h3><p>交互模式，是否接受用户输入，默认为true</p>
<h3><span id="offline">offline</span><a href="#offline" class="header-anchor">#</a></h3><p>是否在离线模式下运行，默认是false</p>
<h3><span id="plugingroups">pluginGroups</span><a href="#plugingroups" class="header-anchor">#</a></h3><p>插件。通过在pluginGroup节点下配置id标识，在命令行中使用到的插件需要在这里配置。<strong>注：org.apache.maven.plugins 和 org.codehaus.mojo里面的差价自动包含不需要配置。</strong>如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      https://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如上配置可以在命令行执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn jetty:run</span><br></pre></td></tr></table></figure>
<h3><span id="servers">servers</span><a href="#servers" class="header-anchor">#</a></h3><p>在项目的POM中可以配置上传和下载( <a href="https://maven.apache.org/pom.html#Repositories" target="_blank" rel="noopener">repositories</a> and <a href="https://maven.apache.org/pom.html#Distribution_Management" target="_blank" rel="noopener">distributionManagement</a> )的仓库，但是仓库对应的用户名、密码、秘钥、权限等敏感信息应当在构建服务器上配置，即在本节点之下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      https://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>server001<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>my_login<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>my_password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">privateKey</span>&gt;</span>$&#123;user.home&#125;/.ssh/id_dsa<span class="tag">&lt;/<span class="name">privateKey</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">passphrase</span>&gt;</span>some_passphrase<span class="tag">&lt;/<span class="name">passphrase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filePermissions</span>&gt;</span>664<span class="tag">&lt;/<span class="name">filePermissions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directoryPermissions</span>&gt;</span>775<span class="tag">&lt;/<span class="name">directoryPermissions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>id：服务器的id，需要与仓库和镜像中对应（repository/mirror）</li>
</ul>
<h3><span id="mirrors">mirrors</span><a href="#mirrors" class="header-anchor">#</a></h3><p>镜像仓库地址配置，<a href="https://maven.apache.org/guides/mini/guide-mirror-settings.html" target="_blank" rel="noopener">参考地址</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      https://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>planetmirror.com<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>PlanetMirror Australia<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://downloads.planetmirror.com/pub/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>id：多个竟像时，id不能重复</li>
<li>mirrorOf：当前id对应的镜像，不能与id相同</li>
</ul>
<h3><span id="proxies">proxies</span><a href="#proxies" class="header-anchor">#</a></h3><p>代理信息的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      https://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>myproxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.somewhere.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>proxyuser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>somepassword<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nonProxyHosts</span>&gt;</span>*.google.com|ibiblio.org<span class="tag">&lt;/<span class="name">nonProxyHosts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>active：true表示当前代理有效，false表示当前代理无效</li>
<li>nonProxyHosts：不需要通过代理的主机</li>
</ul>
<h3><span id="profiles">profiles</span><a href="#profiles" class="header-anchor">#</a></h3><p>这里的profile是项目中pom.xml中profile节点的缩减版，是全局配置，并不针对于单独的项目。这里的profile只包含四个子节点，分别是：activation，repositories，properties，pluginRepositories</p>
<p>settings.xml中profile配置会覆盖项目中pom.xml或者 profiles.xml中配置</p>
<h4><span id="activation">activation</span><a href="#activation" class="header-anchor">#</a></h4><p>这里配置的是profile的关键信息，与pom中的profile类似，可以定义指定环境下参数使用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      https://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exists</span>&gt;</span>$&#123;basedir&#125;/file2.properties<span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">missing</span>&gt;</span>$&#123;basedir&#125;/file1.properties<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>jdk：jdk版本配置，只是jdk版本的前缀，会在环境中寻找符合前缀条件的jdk来使用，maven2.1开始支持区间配置。<a href="https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html" target="_blank" rel="noopener">参考</a></li>
<li>os：系统配置。<a href="https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html" target="_blank" rel="noopener">参考</a></li>
<li>porperty：当maven需要某些属性的时候，会从这里寻找name，value对。可以与pom中配置相同的name，对应不同的value</li>
<li>file：通过给定文件，在哪个文件存在，哪个文件不存在的情况profile生效</li>
</ul>
<p><strong>profile的生效与否不仅可以在这里配置，同时可以在命令行通过 -P profileid使其生效</strong></p>
<p>通过maven-help-plugin查看当前构建下有效的profile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn help:active-profiles</span><br></pre></td></tr></table></figure>
<h4><span id="properties">properties</span><a href="#properties" class="header-anchor">#</a></h4><p>maven的属性通过占位符 ${X}来配置，在settings.xml中有5中不同格式的配置。</p>
<ol>
<li>env.X: Prefixing a variable with “env.” will return the shell’s environment variable. For example, ${env.PATH} contains the $path environment variable (%PATH% in Windows).</li>
<li>project.x: A dot (.) notated path in the POM will contain the corresponding element’s value. For example: <project><version>1.0</version></project> is accessible via ${project.version}.</li>
<li>settings.x: A dot (.) notated path in the settings.xml will contain the corresponding element’s value. For example: <settings><offline>false</offline></settings> is accessible via ${settings.offline}.</li>
<li>Java System Properties: All properties accessible via java.lang.System.getProperties() are available as POM properties, such as ${java.home}.</li>
<li>x: Set within a <properties> element or an external files, the value may be used as ${someVar}.</properties></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      https://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user.install</span>&gt;</span>$&#123;user.home&#125;/our-project<span class="tag">&lt;/<span class="name">user.install</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="repository">repository</span><a href="#repository" class="header-anchor">#</a></h4><p>远程仓库的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      https://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>codehausSnapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Codehaus Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>fail<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://snapshots.maven.codehaus.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>enabled：true表示生效，false表示不生效</li>
<li>updatePolicy：更新策略。可选值：always， daily (默认)，interval:X (X整数，单位：分钟) ， never</li>
<li>checksumPolicy：部署到仓库策略。可选择：ignore，fail， warn on missing ， incorrect checksums</li>
<li>layout：maven2开始又默认配置</li>
</ul>
<h4><span id="pluginrepositories">pluginRepositories</span><a href="#pluginrepositories" class="header-anchor">#</a></h4><p>插件仓库配置，配置类似于repositories</p>
<h3><span id="activeprofiles">activeProfiles</span><a href="#activeprofiles" class="header-anchor">#</a></h3><p>配置哪些profile是生效的，指向是profile的id，如果配置的id不存在，不会有任何问题。配置在settings.xml、pom.xml、和profile.xml中的profile都可以在这里指定。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      https://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>env-test<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2019/10/18/git/</url>
    <content><![CDATA[<h1><span id="command">command</span><a href="#command" class="header-anchor">#</a></h1><h2><span id="she-zhi-quan-ju-yong-hu-xin-xi">设置全局用户信息</span><a href="#she-zhi-quan-ju-yong-hu-xin-xi" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global user.name "elfdemonster"</span><br><span class="line"><span class="meta">$</span> git config --global user.email "elfdemonster001@gmail.com"</span><br></pre></td></tr></table></figure>
<h2><span id="she-zhi-mu-lu-xia-de-yong-hu-xin-xi">设置目录下的用户信息</span><a href="#she-zhi-mu-lu-xia-de-yong-hu-xin-xi" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git config user.name "elfdemonster"</span><br><span class="line"><span class="meta">$</span> git config user.email "elfdemonster001@gmail.com"</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2><span id="cha-kan-quan-ju-yong-hu-xin-xi">查看全局用户信息</span><a href="#cha-kan-quan-ju-yong-hu-xin-xi" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name</span><br><span class="line">$ git config --global user.email</span><br></pre></td></tr></table></figure>
<h2><span id="cha-kan-dang-qian-mu-lu-yong-hu-xin-xi">查看当前目录用户信息</span><a href="#cha-kan-dang-qian-mu-lu-yong-hu-xin-xi" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure>
<h2><span id="cha-kan-yuan-cheng-lian-jie">查看远程连接</span><a href="#cha-kan-yuan-cheng-lian-jie" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote -v </span><br><span class="line">&gt; origin  git@github.com:USERNAME/REPOSITORY.git (fetch)</span><br><span class="line">&gt; origin  git@github.com:USERNAME/REPOSITORY.git (push)</span><br></pre></td></tr></table></figure>
<h2><span id="gai-bian-yuan-cheng-lian-jie-ru-cong-ssh-gai-cheng-https">改变远程连接，如从SSH改成HTTPS</span><a href="#gai-bian-yuan-cheng-lian-jie-ru-cong-ssh-gai-cheng-https" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote set-url origin https://github.com/USERNAME/REPOSITORY.git</span><br></pre></td></tr></table></figure>
<h2><span id="duo-ge-yong-hu-mi-yao-shi-chu-li-fang-shi">多个用户秘钥时处理方式</span><a href="#duo-ge-yong-hu-mi-yao-shi-chu-li-fang-shi" class="header-anchor">#</a></h2><ul>
<li><p>在~/.ssh目录下查看是否有config文件，没有则可以创建一个，并增加如下内容</p>
<blockquote>
<p>Host defaultgit</p>
<pre><code>HostName github.com
User elfdemonster
IdentityFile ~/.ssh/id4github
</code></pre><p>Host secondgit</p>
<pre><code>HostName 172.21.34.37
User 刘延森
IdentityFile ~/.ssh/id_rsa
</code></pre></blockquote>
</li>
<li><p>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/xxid</span><br><span class="line">Identity added: /c/Users/elf/.ssh/id4github (/c/Users/elf/.ssh/id4github)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查看添加的秘钥信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-add -l</span><br><span class="line">2048 SHA256:93OU/W/4NmDU0wckImk6p6Bm0WIikC3/fBNtZJYDjKU /c/Users/elf/.ssh/id4github (RSA)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi elfdemonster! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">Connection to github.com closed.</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看详情</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -vT git@github.com</span><br></pre></td></tr></table></figure>
<p><a href="https://help.github.com/en/articles/connecting-to-github-with-ssh" target="_blank" rel="noopener">github秘钥参考地址</a></p>
<h1><span id="keng">坑</span><a href="#keng" class="header-anchor">#</a></h1><h2><span id="could-not-open-a-connection-to-your-authentication-agent">Could not open a connection to your authentication agent.</span><a href="#could-not-open-a-connection-to-your-authentication-agent" class="header-anchor">#</a></h2><ul>
<li>出现场景</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-add ~/.</span><br><span class="line"><span class="meta">$</span> ssh-add -l</span><br></pre></td></tr></table></figure>
<ul>
<li>解决方式，执行如下命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> eval "$(ssh-agent -s)"</span><br></pre></td></tr></table></figure>
<h2><span id="permission-denied-publickey">Permission denied (publickey).</span><a href="#permission-denied-publickey" class="header-anchor">#</a></h2><ul>
<li><p>出现场景</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ssh git@github.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决方式</p>
<p>增加秘钥，参加上方增加秘钥步骤</p>
</li>
</ul>
<h2><span id="che-xiao-git-add-shi-shi-yong-git-reset-head-ming-ling">撤销git add时使用git reset HEAD命令</span><a href="#che-xiao-git-add-shi-shi-yong-git-reset-head-ming-ling" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git reset HEAD</span><br><span class="line">fatal: ambiguous argument 'HEAD': unkonwn revision or path not in the working tree.</span><br><span class="line">Use '--' to separate paths from revisions, like this:</span><br><span class="line">'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'</span><br></pre></td></tr></table></figure>
<ul>
<li>这个错误的一个情况是初始git仓库，没有<code>commit</code>过，此时直接删除掉文件即可</li>
<li>有过<code>commit</code>之后，再全部取消<code>git add</code>提交的文件，没有问题</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>GIT</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo</title>
    <url>/2019/10/17/hexo/</url>
    <content><![CDATA[<h1><span id="keng">坑</span><a href="#keng" class="header-anchor">#</a></h1><h2><span id="permission-denied-publickey">Permission denied (publickey).</span><a href="#permission-denied-publickey" class="header-anchor">#</a></h2><ul>
<li>可能是因为多个git用户以及秘钥对的原因，hexo目录下执行hexo d时，总是提示权限错误</li>
</ul>
<blockquote>
<p>On branch master<br>nothing to commit, working tree clean<br><a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>: Permission denied (publickey).<br>fatal: Could not read from remote repository.</p>
<p>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html</a><br>Error: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>: Permission denied (publickey).<br>fatal: Could not read from remote repository.</p>
<p>Please make sure you have the correct access rights<br>and the repository exists.</p>
<pre><code>at ChildProcess.&lt;anonymous&gt; (E:\blog\hexo\node_modules\hexo-util\lib\spawn.js:37:17)
at ChildProcess.emit (events.js:198:13)
at ChildProcess.cp.emit (E:\blog\hexo\node_modules\cross-spawn\lib\enoent.js:40:29)
at maybeClose (internal/child_process.js:982:16)
at Socket.stream.socket.on (internal/child_process.js:389:11)
at Socket.emit (events.js:198:13)
at Pipe._handle.close (net.js:606:12)
</code></pre></blockquote>
<ul>
<li><p>需要重新加载git秘钥，但是似乎每次关了终端都得重新执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">Agent pid 9516</span><br><span class="line"></span><br><span class="line">$ ssh-add -l</span><br><span class="line">The agent has no identities.</span><br><span class="line"></span><br><span class="line">$ ssh-add ~/.ssh/id4github</span><br><span class="line">Identity added: /c/Users/username/.ssh/id4github (/c/Users/elf/.ssh/id4github)</span><br><span class="line"></span><br><span class="line">$ ssh-add -l</span><br><span class="line">2048 SHA256:93OU/W/4NmDU0wckImk6p6Bm0WIikC3/fBNtZJYDjKU /c/Users/username/.ssh/id4github (RSA)</span><br><span class="line"></span><br><span class="line">$ ssh git@github.com</span><br><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi elfdemonster! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">Connection to github.com closed.</span><br></pre></td></tr></table></figure>
<ul>
<li>再次执行hexo d成功上传</li>
</ul>
</li>
</ul>
<a id="more"></a>]]></content>
      <categories>
        <category>技术</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>maven命令</title>
    <url>/2019/10/16/maven%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2><span id="ming-ling">命令</span><a href="#ming-ling" class="header-anchor">#</a></h2><ul>
<li>查看包依赖<br>mvn dependency:tree  -Dverbose</li>
<li>跳过测试<br>mvn clean install -Dmaven.test.skip</li>
<li>mvn compile –debug<br>mvn -Dfile.encoding=UTF-8 compile</li>
<li>mvn mybatis-generator:generate</li>
</ul>
<a id="more"></a>
<ul>
<li><p>手动安装jar包，<a href="https://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html" target="_blank" rel="noopener">参见</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=&lt;path-to-file&gt; -DgroupId=&lt;group-id&gt;  -DartifactId=&lt;artifact-id&gt; -Dversion=&lt;version&gt; -Dpackaging=&lt;packaging&gt;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com -DartifactId=appserv -Dversion=V0.0.1-SNAPSHOT -Dpackaging=jar -Dfile=D:/xxxx/appserv/target/appserv.jar</span><br></pre></td></tr></table></figure>
<p>如果有pom文件，则可以使用如下命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=&lt;path-to-file&gt; -DpomFile=&lt;path-to-pomfile&gt;</span><br></pre></td></tr></table></figure>
<p>maven2.5开始，如果安装maven构建的jar包，并在jar包中的 META-INF下存在pom.xml，则可以使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=&lt;path-to-file&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>手动发布Jar包，<a href="https://maven.apache.org/guides/mini/guide-3rd-party-jars-remote.html" target="_blank" rel="noopener">参见</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=&lt;group-id&gt; \</span><br><span class="line">  -DartifactId=&lt;artifact-id&gt; \</span><br><span class="line">  -Dversion=&lt;version&gt; \</span><br><span class="line">  -Dpackaging=&lt;type-of-packaging&gt; \</span><br><span class="line">  -Dfile=&lt;path-to-file&gt; \</span><br><span class="line">  -DrepositoryId=&lt;id-to-map-on-server-section-of-settings.xml&gt; \</span><br><span class="line">  -Durl=&lt;url-of-the-repository-to-deploy&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>  实例：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=org.apache.rocketmq -DartifactId=rocketmq-client -Dversion=4.1.0-incubating-SNAPSHOT -Dpackaging=jar -Dfile=E:\xxxx\org\apache\rocketmq\rocketmq-client\4.1.0-incubating-SNAPSHOT\rocketmq-client-4.1.0-incubating-SNAPSHOT.jar -Durl=http://ip:port/nexus/content/repositories/thirdparty/ -DrepositoryId=thirdparty</span><br></pre></td></tr></table></figure>
<h2><span id="scope">scope</span><a href="#scope" class="header-anchor">#</a></h2><ul>
<li><p>compile 默认的scope，表示  dependency 都可以在生命周期中使用。而且，这些</p>
</li>
<li><p>dependencies 会传递到依赖的项目中。适用于所有阶段，会随着项目一起发布  </p>
</li>
<li><p>provided 跟compile相似，但是表明了dependency 由JDK或者容器提供，例如Servlet  AP和一些Java EE APIs。这个scope 只能作用在编译和测试时，同时没有传递性。          </p>
</li>
<li><p>runtime 表示dependency不作用在编译时，但会作用在运行和测试时，如JDBC驱动，适用运行和测试阶段。  </p>
</li>
<li><p>test 表示dependency作用在测试时，不作用在运行时。  只在测试时使用，用于编译和运行测试代码。不会随项目发布。  </p>
</li>
<li><p>system 跟provided  相似，但是在系统中要以外部JAR包的形式提供，maven不会在repository查找它。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql命令</title>
    <url>/2019/10/16/Mysql%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1><span id="mysql">mysql</span><a href="#mysql" class="header-anchor">#</a></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &apos;%log_bin%&apos;;</span><br><span class="line"></span><br><span class="line">show variables like &apos;%binlog%&apos;;</span><br><span class="line"></span><br><span class="line">show binary logs;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>强制修改root密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ SET PASSWORD = PASSWORD(&apos;root&apos;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>表操作</p>
</li>
</ul>
<a id="more"></a>
<h2><span id="dba">DBA</span><a href="#dba" class="header-anchor">#</a></h2><ul>
<li><p>创建用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  create user &apos;imapp&apos;@&apos;%&apos; identified by &apos;imapp&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ show grants for imapp;</span><br><span class="line">$ show grants for &apos;imapp&apos;@&apos;172.17.138.%&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>授权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ grant all on imtest1.* to &apos;imapp&apos;@&apos;%&apos;;</span><br><span class="line">$ flush privileges;</span><br></pre></td></tr></table></figure>
</li>
<li><p>权限回收</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ revoke all on imtest1.* from imapp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编码格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ SHOW VARIABLES WHERE Variable_name LIKE &apos;character_set_%&apos; OR Variable_name LIKE &apos;collation%&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前连接数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ show full processlist;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看mysql状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ show status;</span><br><span class="line">$ show status like &apos;%变量名%&apos;;</span><br></pre></td></tr></table></figure>
<p>查用变量</p>
<p>Aborted_clients 由于客户没有正确关闭连接已经死掉，已经放弃的连接数量。</p>
<p>Aborted_connects 尝试已经失败的MySQL服务器的连接的次数。</p>
<p>Connections 试图连接MySQL服务器的次数。</p>
<p>Created_tmp_tables 当执行语句时，已经被创造了的隐含临时表的数量。</p>
<p>Delayed_insert_threads 正在使用的延迟插入处理器线程的数量。</p>
<p>Delayed_writes 用INSERT DELAYED写入的行数。</p>
<p>Delayed_errors 用INSERT DELAYED写入的发生某些错误(可能重复键值)的行数。</p>
<p>Flush_commands 执行FLUSH命令的次数。</p>
<p>Handler_delete 请求从一张表中删除行的次数。</p>
<p>Handler_read_first 请求读入表中第一行的次数。</p>
<p>Handler_read_key 请求数字基于键读行。</p>
<p>Handler_read_next 请求读入基于一个键的一行的次数。</p>
<p>Handler_read_rnd 请求读入基于一个固定位置的一行的次数。</p>
<p>Handler_update 请求更新表中一行的次数。</p>
<p>Handler_write 请求向表中插入一行的次数。</p>
<p>Key_blocks_used 用于关键字缓存的块的数量。</p>
<p>Key_read_requests 请求从缓存读入一个键值的次数。</p>
<p>Key_reads 从磁盘物理读入一个键值的次数。</p>
<p>Key_write_requests 请求将一个关键字块写入缓存次数。</p>
<p>Key_writes 将一个键值块物理写入磁盘的次数。</p>
<p>Max_used_connections 同时使用的连接的最大数目。</p>
<p>Not_flushed_key_blocks 在键缓存中已经改变但是还没被清空到磁盘上的键块。</p>
<p>Not_flushed_delayed_rows 在INSERT DELAY队列中等待写入的行的数量。</p>
<p>Open_tables 打开表的数量。</p>
<p>Open_files 打开文件的数量。</p>
<p>Open_streams 打开流的数量(主要用于日志记载）</p>
<p>Opened_tables 已经打开的表的数量。</p>
<p>Questions 发往服务器的查询的数量。</p>
<p>Slow_queries 要花超过long_query_time时间的查询数量。</p>
<p>Threads_connected 当前打开的连接的数量。</p>
<p>Threads_running 不在睡眠的线程数量。</p>
<p>Uptime 服务器工作了多少秒。</p>
</li>
<li><p>查看sql_mode</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ select @@sql_mode;</span><br></pre></td></tr></table></figure>
<p>在my.cnf中[mysqld]下设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sql_mode = &quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2019/10/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1><span id="linux">linux</span><a href="#linux" class="header-anchor">#</a></h1><ul>
<li><p>修改目录属主</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  把目录/home/test及其下的所有文件以及子目录的属主改为tester，属组改为test </span><br><span class="line">$ chown -R test:test /home/test</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#把文件 test.ko的所有者改为test</span><br><span class="line">$ chown test test.ko</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>chmod</p>
</li>
<li><p>修改文件句柄</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看信息</span><br><span class="line">$ ulimit -a</span><br></pre></td></tr></table></figure>
<p>open file=65535</p>
<p>stack=unlimited</p>
<p><code>vi /etc/security/limits.conf</code></p>
<p>增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">soft nofile 65535</span><br><span class="line">hard nofile 65535</span><br></pre></td></tr></table></figure>
</li>
<li><p>ctrl+r,输入命令起始，可以查找之前已经执行过的命令</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>根据进程号查找程序路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> pwdx pid</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> netstat -tunlp | grep prot</span><br></pre></td></tr></table></figure>
</li>
<li><p>统计SFTP连接数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> netstat -antlp|grep sftp</span><br><span class="line"><span class="meta">$</span> netstat -antlp|grep sftp|wc -l</span><br><span class="line"><span class="meta">$</span> netstat -naltp|grep "10.1.253.239:22"</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看服务器核数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cat /proc/cpuinfo |grep "processor"|wc -l</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看磁盘空间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> df -h</span><br></pre></td></tr></table></figure>
</li>
<li><p>统计文件中指定字符串出现的次数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> grep -o 'orderprice：200' nohup.log | wc -l</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2><span id="ls-amp-ll">ls&amp;ll</span><a href="#ls-amp-ll" class="header-anchor">#</a></h2><ul>
<li><p>带文件大小单位显示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ll -alh</span><br><span class="line"><span class="meta">$</span> ls -alh</span><br></pre></td></tr></table></figure>
</li>
<li><p>统计当前文件夹下文件的个数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ls -l |grep "^-"|wc -l</span><br></pre></td></tr></table></figure>
</li>
<li><p>统计当前文件夹下目录的个数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ls -l |grep "^d"|wc -l</span><br></pre></td></tr></table></figure>
</li>
<li><p>统计当前文件夹下文件的个数，包括子文件夹里的 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ls -lR|grep "^-"|wc -l</span><br></pre></td></tr></table></figure>
</li>
<li><p>统计文件夹下目录的个数，包括子文件夹里的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ls -lR|grep "^d"|wc -l</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> grep -rn "appCfg" ./</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2><span id="gourp-amp-user">gourp&amp;user</span><a href="#gourp-amp-user" class="header-anchor">#</a></h2><ul>
<li><p>groups  查看组内所有用户</p>
</li>
<li><p>groups gliethttp 查看gliethttp用户所在的组,以及组内成员</p>
</li>
<li><p>/etc/shadow和/etc/passwd系统存在的所有用户名</p>
</li>
<li><p>查看组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /etc/group | grep sql</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改用户密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ passwd username</span><br></pre></td></tr></table></figure>
</li>
<li><p>群组用户增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ groupadd -r groupname</span><br><span class="line">$ useradd -r -g groupname username</span><br></pre></td></tr></table></figure>
<p><em>新增的用户切换时如果只是进入bash操作行，则拷贝 .bash_profile .bashrc .bash_logout 到用户目录下 /home/username/</em></p>
</li>
</ul>
<h2><span id="ya-suo-jian-ya-suo">压缩建压缩</span><a href="#ya-suo-jian-ya-suo" class="header-anchor">#</a></h2><ul>
<li><p>查看压缩包中内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -tf xx</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxf ...</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2><span id="ruan-lian-jie">软连接</span><a href="#ruan-lian-jie" class="header-anchor">#</a></h2><ul>
<li><p>新建命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s $basedir $upbasedir/mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新软连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln –snf  $basedir $upbasedir/mysql</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2><span id="vi-amp-vim">vi&amp;vim</span><a href="#vi-amp-vim" class="header-anchor">#</a></h2><ul>
<li><p>在Vim中可以直接查看文件编码<br>:set fileencoding</p>
</li>
<li><p>查看其它编码格式的文件或者想解决用Vim查看文件乱码的问题，那么你可以在<br>~/.vimrc 文件中添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set encoding=utf-8 fileencodings=ucs-bom,utf-8,cp936</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2><span id="time-zone">Time Zone</span><a href="#time-zone" class="header-anchor">#</a></h2><ul>
<li><p>time zone存放路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ls -F /usr/share/zoneinfo/</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2><span id="curl">curl</span><a href="#curl" class="header-anchor">#</a></h2><h2><span id="vi-vim">vi/vim</span><a href="#vi-vim" class="header-anchor">#</a></h2><p>进入列编辑ctrl+v</p>
<p>方向键选择，shift+i进入编辑模式，输入内容</p>
<p>按esc退出</p>
<h2><span id="cha-kan-ban-ben">查看版本</span><a href="#cha-kan-ban-ben" class="header-anchor">#</a></h2><h3><span id="cha-kan-nei-he-ban-ben">查看内核版本</span><a href="#cha-kan-nei-he-ban-ben" class="header-anchor">#</a></h3><ul>
<li><code>cat /proc/version</code></li>
<li><code>uname -a</code></li>
</ul>
<h3><span id="cha-kan-xi-tong-ban-ben">查看系统版本</span><a href="#cha-kan-xi-tong-ban-ben" class="header-anchor">#</a></h3><ul>
<li>centos查看系统版本<code>cat /etc/redhat-release</code></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot</title>
    <url>/2019/10/15/springboot/</url>
    <content><![CDATA[<h1><span id="zhu-jie">注解</span><a href="#zhu-jie" class="header-anchor">#</a></h1><h2><span id="auto-config">Auto-config</span><a href="#auto-config" class="header-anchor">#</a></h2><ul>
<li><p><code>@SpringBootApplication</code></p>
<p>SpringBootAppication一个注解相当于以下三个注解</p>
<ul>
<li><code>@EnableAutoConfiguration</code>: enable <a href="https://docs.spring.io/spring-boot/docs/2.1.10.BUILD-SNAPSHOT/reference/html/using-boot-auto-configuration.html" target="_blank" rel="noopener">Spring Boot’s auto-configuration mechanism</a></li>
<li><code>@ComponentScan</code>: enable <code>@Component</code> scan on the package where the application is located (see <a href="https://docs.spring.io/spring-boot/docs/2.1.10.BUILD-SNAPSHOT/reference/html/using-boot-structuring-your-code.html" target="_blank" rel="noopener">the best practices</a>)</li>
<li><code>@Configuration</code>：allow to register extra beans in the context or import additional configuration classes</li>
</ul>
</li>
<li><p><code>@Configuration</code></p>
<ul>
<li><p>禁止指定配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.boot.autoconfigure.*;</span><br><span class="line">import org.springframework.boot.autoconfigure.jdbc.*;</span><br><span class="line">import org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="line">public class MyConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>导入外部xml，@ImportResource({“classpath:abc.xml”})</p>
</li>
<li><p><code>@Qualifier</code>限定描述符，用于细粒度选择候选者。使用场景Spring上下文中同一个接口有多个实现，即一个类型bean有多个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired   </span><br><span class="line">@Qualifier(&quot;userServiceImpl&quot;)   </span><br><span class="line">public IUserService userService;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1><span id="chu-shi-hua">初始化</span><a href="#chu-shi-hua" class="header-anchor">#</a></h1><p>spring boot支持多种初始化方式，可以使用properties文件、YAML文件、环境变量、命令行、外部配置等方式。</p>
<p>springboot不同的配置方式有不同的加载顺序，并且后加载的会覆盖前面加载的相同配置。</p>
<h2><span id="pei-zhi-jia-zai-shun-xu"></span><a href="#pei-zhi-jia-zai-shun-xu" class="header-anchor">#</a></h2><ol>
<li><a href="https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/using-boot-devtools.html#using-boot-devtools-globalsettings" target="_blank" rel="noopener">Devtools的全局设置</a>,保存在用户目录下：~/.spring-boot-devtools.properties。（在devtools生效的情况下起作用）</li>
<li>在测试中用<a href="https://docs.spring.io/spring/docs/5.1.10.RELEASE/javadoc-api/org/springframework/test/context/TestPropertySource.html" target="_blank" rel="noopener">@TestPropertySource</a>注解修饰</li>
<li><a href="https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/api/org/springframework/boot/test/context/SpringBootTest.html" target="_blank" rel="noopener">@SpringbootTest</a>和<a href="https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/boot-features-testing.html#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests" target="_blank" rel="noopener">指定测试注解的测试用例</a>中设置的属性</li>
<li>命令行声明</li>
<li><code>SPRING_APPLICATION_JSON</code>中的属性（环境变量或系统属性中的JSON）</li>
<li><code>ServletConfig</code>中初始化的参数</li>
<li><code>ServletContext</code>中初始化的参数</li>
<li>JNDI属性：<code>java:comp/env</code></li>
<li>Java的系统参数（<code>System.getProperites</code>）</li>
<li>操作系统环境变量</li>
<li><code>random.*</code>中的随机值属性（<code>RandomValuePropertySource</code>）</li>
<li>jar包外部根据指定环境的application配置文件，可以是<code>application-{profile}.properties</code>也可以是<code>application-{profile}.yml</code>。<a href="https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/boot-features-external-config.html#boot-features-external-config-profile-specific-properties" target="_blank" rel="noopener">指定不同环境下的配置文件参考</a></li>
<li>jar包内部根据指定环境的application配置文件，可以是<code>application-{profile}.properties</code>也可以是<code>application-{profile}.yml</code>。<a href="https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/boot-features-external-config.html#boot-features-external-config-profile-specific-properties" target="_blank" rel="noopener">指定不同环境下的配置文件参考</a></li>
<li>jar包外部的<code>application.properties</code>或者<code>application.yml</code></li>
<li>jar包内部的<code>application.properties</code>或者<code>application.yml</code></li>
<li><a href="https://docs.spring.io/spring/docs/5.1.10.RELEASE/javadoc-api/org/springframework/context/annotation/PropertySource.html" target="_blank" rel="noopener"><code>@PropertySource</code></a> 注解标注的<code>@Configuration</code>类.</li>
<li>默认属性。必须在<code>SpringApplication.setDefaultProperties</code>中设置</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>JAVA</category>
        <category>spring</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>webservice</title>
    <url>/2019/10/13/webservice/</url>
    <content><![CDATA[<h1><span id="gai-nian">概念</span><a href="#gai-nian" class="header-anchor">#</a></h1><p>Web service是一个低耦合的、自包含的、跨平台的、跨语言的web应用程序，可使用开放的XML标准来描述、发布、发现、协调和配置这些应用程序。Web Service为整个企业甚至多个组织之间的业务流程的集成提供了一个通用机制。（<em>参考百度百科</em>）</p>
<h2><span id="web-service-zhong-ji-ge-chong-yao-de-gai-nian">Web Service中几个重要的概念</span><a href="#web-service-zhong-ji-ge-chong-yao-de-gai-nian" class="header-anchor">#</a></h2><h4><span id="soap">SOAP</span><a href="#soap" class="header-anchor">#</a></h4><ul>
<li>简单对象访问协议</li>
<li>基于XML，通过HTTP交换信息</li>
<li>独立于平台，独立于语言</li>
<li>允许绕过防火墙</li>
</ul>
<h4><span id="wsdl">WSDL</span><a href="#wsdl" class="header-anchor">#</a></h4><ul>
<li>Web Service Description Language</li>
<li>基于XML，对WEB Service的描述文件</li>
</ul>
<h4><span id="uddi">UDDI</span><a href="#uddi" class="header-anchor">#</a></h4><ul>
<li>Universal Description, Discovery and Integration</li>
<li>一种目录服务，企业可以通过UUDI注册或发现Web Service服务</li>
<li>由WSDL描述的网络服务接口目录</li>
</ul>
<h4><span id="xml-xsd">XML/XSD</span><a href="#xml-xsd" class="header-anchor">#</a></h4><ul>
<li>XML 可扩展标记语言 Extensible Markup Language</li>
<li>XSD XML Schema Definition</li>
</ul>
<a id="more"></a>
<h1><span id="wsdl2java">wsdl2java</span><a href="#wsdl2java" class="header-anchor">#</a></h1><h2><span id="ming-ling-xing-sheng-cheng-java-dai-ma">命令行生成java代码</span><a href="#ming-ling-xing-sheng-cheng-java-dai-ma" class="header-anchor">#</a></h2><h3><span id="cfx">cfx</span><a href="#cfx" class="header-anchor">#</a></h3><p><a href="https://cxf.apache.org/docs/wsdl-to-java.html" target="_blank" rel="noopener">CXF官网地址-wsdl2java</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage : wsdl2java -fe|-frontend &lt;front-end-name&gt; -db|-databinding &lt;data-binding-name&gt; </span><br><span class="line">-wv &lt;wsdl-version&gt; -p &lt;[wsdl-namespace =]package-name&gt;* -sn &lt;service-name&gt; </span><br><span class="line">-b &lt;binding-file-name&gt;* -reserveClass &lt;class-name&gt;* -catalog &lt;catalog-file-name&gt; </span><br><span class="line">-d &lt;output-directory&gt; -compile -classdir &lt;compile-classes-directory&gt; -impl -server</span><br><span class="line">-client -clientjar &lt;jar-file-name&gt; -all -autoNameResolution -allowElementReferences|-aer&lt;=true&gt; </span><br><span class="line">-defaultValues&lt;=class-name-for-DefaultValueProvider&gt; -ant </span><br><span class="line">-nexclude &lt;schema-namespace [= java-package-name]&gt;* -exsh &lt;(true, false)&gt; -noTypes</span><br><span class="line">-dns &lt;(true, false&gt; -dex &lt;(true, false)&gt; -validate -keep </span><br><span class="line">-wsdlLocation &lt;wsdlLocation&gt; -xjc&lt;xjc-arguments&gt;* -asyncMethods&lt;[=method1,method2,...]&gt;* </span><br><span class="line">-bareMethods&lt;[=method1,method2,...]&gt;* -mimeMethods&lt;[=method1,method2,...]&gt;* -noAddressBinding </span><br><span class="line">-faultSerialVersionUID &lt;fault-serialVersionUID&gt; -exceptionSuper &lt;exceptionSuper&gt; </span><br><span class="line">-mark-generated -suppress-generated-date -maxExtensionStackDepth &lt;maxExtensionStackDepth&gt;</span><br><span class="line">-h|-?|-help -version|-v -verbose|-V -quiet|-q|-Q </span><br><span class="line">-wsdlList &lt;wsdlurl&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; wsdl2java -client -p com.elf -d F:\xx -verbose F:\WeatherWebService.wsdl</span><br></pre></td></tr></table></figure>
<h3><span id="axis">axis</span><a href="#axis" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; wsdl2java -t -or -g -o D:\xxxx\axis2-1.7.9\bin\test -p com.elf -uri http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl -sp</span><br></pre></td></tr></table></figure>
<h3><span id="wsimport">wsimport</span><a href="#wsimport" class="header-anchor">#</a></h3><p>​      (maven插件执行的命令，直接在命令行需要修改)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wsimport -keep, -s, &apos;F:\xxxx\target\generated-sources\wsimport&apos;, -d, &apos;F:\xxxx\target\classes&apos;, -encoding, UTF-8, -Xnocompile, -b, http://www.w3.org/2001/XMLSchema.xsd, -verbose, -s, F:\xxxx/src/main/java, -p, com.esb.ws, &quot;file:/F:/xxxx/src/main/resources/WeatherWebService-old.wsdl&quot;</span><br></pre></td></tr></table></figure>
<h2><span id="maven-cha-jian-sheng-cheng-java-dai-ma">Maven插件生成Java代码</span><a href="#maven-cha-jian-sheng-cheng-java-dai-ma" class="header-anchor">#</a></h2><h3><span id="sheng-cheng-ming-ling">生成命令</span><a href="#sheng-cheng-ming-ling" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn -X generate-sources</span><br></pre></td></tr></table></figure>
<h3><span id="cxf">CXF</span><a href="#cxf" class="header-anchor">#</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-codegen-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt;--&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span>         </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span>         </span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>         </span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>           </span><br><span class="line">           <span class="tag">&lt;<span class="name">sourceRoot</span>&gt;</span>$&#123;basedir&#125;/src/main/java/<span class="tag">&lt;/<span class="name">sourceRoot</span>&gt;</span>            </span><br><span class="line">               <span class="tag">&lt;<span class="name">wsdlOptions</span>&gt;</span>               </span><br><span class="line">                   <span class="tag">&lt;<span class="name">wsdlOption</span>&gt;</span>                  </span><br><span class="line">                       <span class="tag">&lt;<span class="name">wsdl</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/WeatherWebService.wsdl<span class="tag">&lt;/<span class="name">wsdl</span>&gt;</span>                  </span><br><span class="line">                       <span class="tag">&lt;<span class="name">extraargs</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">extraarg</span>&gt;</span>-impl<span class="tag">&lt;/<span class="name">extraarg</span>&gt;</span>                            </span><br><span class="line">                           <span class="tag">&lt;<span class="name">extraarg</span>&gt;</span>-verbose<span class="tag">&lt;/<span class="name">extraarg</span>&gt;</span>                  </span><br><span class="line">                       <span class="tag">&lt;/<span class="name">extraargs</span>&gt;</span>               </span><br><span class="line">                  <span class="tag">&lt;/<span class="name">wsdlOption</span>&gt;</span>            </span><br><span class="line">              <span class="tag">&lt;/<span class="name">wsdlOptions</span>&gt;</span>         </span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>         </span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span>            </span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>wsdl2java<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>         </span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span>      </span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3><span id="wsimport">wsimport</span><a href="#wsimport" class="header-anchor">#</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxws-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>periodictableaccessws<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>wsimport<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">wsdlDirectory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/wsdl<span class="tag">&lt;/<span class="name">wsdlDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-b<span class="tag">&lt;/<span class="name">arg</span>&gt;</span><span class="tag">&lt;<span class="name">arg</span>&gt;</span>http://www.w3.org/2001/XMLSchema.xsd<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">wsdlFiles</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">wsdlFile</span>&gt;</span>doosdaas.wsdl<span class="tag">&lt;/<span class="name">wsdlFile</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">wsdlFiles</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">packageName</span>&gt;</span>com.dss.doosdaas<span class="tag">&lt;/<span class="name">packageName</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">vmArgs</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">vmArg</span>&gt;</span>-Djavax.xml.accessExternalDTD=all<span class="tag">&lt;/<span class="name">vmArg</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">vmArg</span>&gt;</span>-Djavax.xml.accessExternalSchema=all<span class="tag">&lt;/<span class="name">vmArg</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">vmArgs</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--   &lt;bindingDirectory&gt;$&#123;basedir&#125;/src/main/resources/jaxb&lt;/bindingDirectory&gt;</span></span><br><span class="line"><span class="comment">                        &lt;bindingFiles&gt;</span></span><br><span class="line"><span class="comment">                            &lt;bindingFile&gt;jaxb_binding.xjb&lt;/bindingFile&gt;</span></span><br><span class="line"><span class="comment">                        &lt;/bindingFiles&gt;--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2><span id="cxf">cxf</span><a href="#cxf" class="header-anchor">#</a></h2><h2><span id="axis">axis</span><a href="#axis" class="header-anchor">#</a></h2><h2><span id="xfire">xfire</span><a href="#xfire" class="header-anchor">#</a></h2><h1><span id="cai-keng">踩坑</span><a href="#cai-keng" class="header-anchor">#</a></h1><h2><span id="server">server</span><a href="#server" class="header-anchor">#</a></h2><ol>
<li><p>Cannot find any registered HttpDestinationFactory from the Bus.</p>
<p>通常可能是因为没有引用cxf-rt-transports-http-jetty，pom文件中引入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;cxf-rt-transports-http-jetty&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;3.3.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-transports-http-jetty" target="_blank" rel="noopener">maven respository</a></p>
</li>
</ol>
<h2><span id="client">client</span><a href="#client" class="header-anchor">#</a></h2><ol>
<li><p>使用cfx wsdl2java时报：undefined element declaration ‘s:schema’</p>
<p>s:schema 引用问题，网上资料提示需要将wsdl保存到本地，将其替换为&lt;s:any minOccurs=”2” maxOccurs=”2”/&gt;确实可行，但不知问题的本质</p>
</li>
</ol>
<h2><span id="idea-cha-jian-sheng-cheng-dai-ma">idea插件生成代码</span><a href="#idea-cha-jian-sheng-cheng-dai-ma" class="header-anchor">#</a></h2><ul>
<li><p>Caused by: java.lang.ClassNotFoundException: org.apache.commons.discovery.tools.DiscoverSingleton</p>
<p>缺少包，导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;commons-discovery&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;commons-discovery&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;0.5&lt;/version&gt;</span><br><span class="line">			&lt;scope&gt;&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2><span id="cxf-wsdl2java-sheng-cheng-de-dai-ma-ce-shi-shi-bai-wen-ti">CXF WSDL2JAVA生成的代码测试失败问题</span><a href="#cxf-wsdl2java-sheng-cheng-de-dai-ma-ce-shi-shi-bai-wen-ti" class="header-anchor">#</a></h2><p>CXF通过WSDL生成的Java代码，可以指定生成client和server的相关代码，运行client时，会报如下错误，也可能与服务端定义有关。</p>
<p>XXX has throw Exception,unwinding now</p>
<p>org.apache.cxf.interceptor.Fault: Unexcepted element {wsdl的namespace}Resp found</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>webservice</category>
      </categories>
      <tags>
        <tag>webservice</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap</title>
    <url>/2018/02/27/HashMap/</url>
    <content><![CDATA[<h2><span id="yin-yan">引言</span><a href="#yin-yan" class="header-anchor">#</a></h2><p><em>JDK1.8 HashMap学习</em><br>集合中List与Set都继承自Collection接口，而Map并没有继承Collenction接口，它是一种key-value映射形式的数据结构，不能有重复的key，并且一个key只能有一个value。</p>
<blockquote>
<p>An object that maps keys to values.  A map cannot contain duplicate keys;<br> each key can map to at most one value.</p>
</blockquote>
<p><strong>HashMap是Map中最常用的实现。</strong> </p>
<ol>
<li>它包含了map接口提供的所有操作，并且允许 NULL 作为key和value；</li>
<li>不是线程安全的，并且无序；</li>
<li>HashMap与HashTbale相似，区别仅在于HashMap非线程安全，且允许null；</li>
</ol>
<p>JDK1.8对哈希碰撞后的拉链算法进行了优化， 当拉链上entry数量太多（默认为超过8个）时，将链表重构为红黑树。当entry数量减少到一定数量（默认值为6）时，数据结构会重新变成链表。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* This map usually acts as a binned (bucketed) hash table, but</span><br><span class="line">* when bins get too large, they are transformed into bins of</span><br><span class="line">* TreeNodes, each structured similarly to those in</span><br><span class="line">* java.util.TreeMap. Most methods try to use normal bins, but</span><br><span class="line">* relay to TreeNode methods when applicable (simply by checking</span><br><span class="line">* instanceof a node).  Bins of TreeNodes may be traversed and</span><br><span class="line">* used like any others, but additionally support faster lookup</span><br><span class="line">* when overpopulated. However, since the vast majority of bins in</span><br><span class="line">* normal use are not overpopulated, checking for existence of</span><br><span class="line">* tree bins may be delayed in the course of table methods.</span><br><span class="line"></span><br><span class="line">* Because TreeNodes are about twice the size of regular nodes, we</span><br><span class="line">* use them only when bins contain enough nodes to warrant use</span><br><span class="line">* (see TREEIFY_THRESHOLD). And when they become too small (due to</span><br><span class="line">* removal or resizing) they are converted back to plain bins.  In</span><br><span class="line">* usages with well-distributed user hashCodes, tree bins are</span><br><span class="line">* rarely used.  Ideally, under random hashCodes, the frequency of</span><br><span class="line">* nodes in bins follows a Poisson distribution</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<hr>
<h2><span id="jing-tai-mo-ren-zhi">静态默认值</span><a href="#jing-tai-mo-ren-zhi" class="header-anchor">#</a></h2><h5><span id="mo-ren-chu-shi-hua-rong-liang-wei-16-bing-qie-rong-liang-zhi-neng-shi-2-de-bei-shu">默认初始化容量位16，并且容量只能是2的倍数</span><a href="#mo-ren-chu-shi-hua-rong-liang-wei-16-bing-qie-rong-liang-zhi-neng-shi-2-de-bei-shu" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * The default initial capacity - MUST be a power of two.</span><br><span class="line">     */</span><br><span class="line">    static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</span><br></pre></td></tr></table></figure>
<h5><span id="zui-da-yun-xu-rong-liang">最大允许容量</span><a href="#zui-da-yun-xu-rong-liang" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br></pre></td></tr></table></figure>
<h5><span id="mo-ren-zhuang-zai-yin-zi-0-75">默认装载因子0.75</span><a href="#mo-ren-zhuang-zai-yin-zi-0-75" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * The load factor used when none specified in constructor.</span><br><span class="line">     */</span><br><span class="line">    static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br></pre></td></tr></table></figure>
<p>即默认的HashMap实例在插入第13个数据时，会扩容为32。<br>类注释中明确说明了影响Map性能的两个元素,一个是过高的初始容量，一个是过低的装载因子。而0.75是时间和空间上的一个最佳实践。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* &lt;p&gt;This implementation provides constant-time performance for the basic</span><br><span class="line">* operations (&lt;tt&gt;get&lt;/tt&gt; and &lt;tt&gt;put&lt;/tt&gt;), assuming the hash function</span><br><span class="line">* disperses the elements properly among the buckets.  Iteration over</span><br><span class="line">* collection views requires time proportional to the &quot;capacity&quot; of the</span><br><span class="line">* &lt;tt&gt;HashMap&lt;/tt&gt; instance (the number of buckets) plus its size (the number</span><br><span class="line">* of key-value mappings).  Thus, it&apos;s very important not to set the initial</span><br><span class="line">* capacity too high (or the load factor too low) if iteration performance is</span><br><span class="line">* important.</span><br></pre></td></tr></table></figure></p>
<h5><span id="you-lian-biao-chong-gou-wei-hong-hei-shu-yu-zhi-mo-ren-wei-8">由链表重构为红黑树阈值，默认为8</span><a href="#you-lian-biao-chong-gou-wei-hong-hei-shu-yu-zhi-mo-ren-wei-8" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * The bin count threshold for using a tree rather than list for a</span><br><span class="line">    * bin.  Bins are converted to trees when adding an element to a</span><br><span class="line">    * bin with at least this many nodes. The value must be greater</span><br><span class="line">    * than 2 and should be at least 8 to mesh with assumptions in</span><br><span class="line">    * tree removal about conversion back to plain bins upon</span><br><span class="line">    * shrinkage.</span><br><span class="line">    */</span><br><span class="line">   static final int TREEIFY_THRESHOLD = 8;</span><br></pre></td></tr></table></figure>
<h5><span id="you-hong-hei-shu-bian-wei-lian-biao-yu-zhi-mo-ren-wei-6">由红黑树变为链表阈值，默认为6</span><a href="#you-hong-hei-shu-bian-wei-lian-biao-yu-zhi-mo-ren-wei-6" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * The bin count threshold for untreeifying a (split) bin during a</span><br><span class="line">     * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span><br><span class="line">     * most 6 to mesh with shrinkage detection under removal.</span><br><span class="line">     */</span><br><span class="line">    static final int UNTREEIFY_THRESHOLD = 6;</span><br></pre></td></tr></table></figure>
<h5><span id="shu-xing-jie-gou-de-zui-xiao-rong-liang-mo-ren-wei-64">树形结构的最小容量，默认为64</span><a href="#shu-xing-jie-gou-de-zui-xiao-rong-liang-mo-ren-wei-64" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * The smallest table capacity for which bins may be treeified.</span><br><span class="line">    * (Otherwise the table is resized if too many nodes in a bin.)</span><br><span class="line">    * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span><br><span class="line">    * between resizing and treeification thresholds.</span><br><span class="line">    */</span><br><span class="line">   static final int MIN_TREEIFY_CAPACITY = 64;</span><br></pre></td></tr></table></figure>
<hr>
<h2><span id="zhu-yao-shu-xing">主要属性</span><a href="#zhu-yao-shu-xing" class="header-anchor">#</a></h2><h5><span id="table-shu-ju-biao-zai-chu-ci-shi-yong-shi-chu-shi-hua-length-shi-2-de-bei-shu">table，数据表，在初次使用时初始化，length是2的倍数</span><a href="#table-shu-ju-biao-zai-chu-ci-shi-yong-shi-chu-shi-hua-length-shi-2-de-bei-shu" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * The table, initialized on first use, and resized as</span><br><span class="line">    * necessary. When allocated, length is always a power of two.</span><br><span class="line">    * (We also tolerate length zero in some operations to allow</span><br><span class="line">    * bootstrapping mechanics that are currently not needed.)</span><br><span class="line">    */</span><br><span class="line">   transient Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure>
<h5><span id="table-kai-shi-zhuang-zai-de-zhi">table开始装载的值</span><a href="#table-kai-shi-zhuang-zai-de-zhi" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * The next size value at which to resize (capacity * load factor).</span><br><span class="line">    *</span><br><span class="line">    * @serial</span><br><span class="line">    */</span><br><span class="line">   int threshold;</span><br></pre></td></tr></table></figure>
<h5><span id="qi-ta-shu-xing">其他属性</span><a href="#qi-ta-shu-xing" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line">transient int size;</span><br><span class="line">transient int modCount;</span><br><span class="line">final float loadFactor;</span><br></pre></td></tr></table></figure>
<hr>
<h2><span id="zhu-yao-fang-fa">主要方法</span><a href="#zhu-yao-fang-fa" class="header-anchor">#</a></h2><h5><span id="gou-zao-fang-fa">构造方法</span><a href="#gou-zao-fang-fa" class="header-anchor">#</a></h5><p>HashMap中有四类构造方法，分别是不传参，传递初始化容量，传递初始化容量和装载因子，传入map<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public HashMap() &#123;</span><br><span class="line">       this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">public HashMap(int initialCapacity) &#123;</span><br><span class="line">       this(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">   &#125;</span><br><span class="line">public HashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">       if (initialCapacity &lt; 0)</span><br><span class="line">           throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +</span><br><span class="line">                                              initialCapacity);</span><br><span class="line">       if (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">           initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">       if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class="line">           throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +</span><br><span class="line">                                              loadFactor);</span><br><span class="line">       this.loadFactor = loadFactor;</span><br><span class="line">       this.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">   &#125;</span><br><span class="line">public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;</span><br><span class="line">       this.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">       putMapEntries(m, false);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h5><span id="put">put</span><a href="#put" class="header-anchor">#</a></h5><p>通常我们使用put(key, value)方法来设置值，其实内部实现是putVal方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">        return putVal(hash(key), key, value, false, true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>putVal方法为final方法，有更多的参数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Implements Map.put and related methods</span><br><span class="line">     *</span><br><span class="line">     * @param hash hash for key</span><br><span class="line">     * @param key the key</span><br><span class="line">     * @param value the value to put</span><br><span class="line">     * @param onlyIfAbsent if true, don&apos;t change existing value</span><br><span class="line">     * @param evict if false, the table is in creation mode.</span><br><span class="line">     * @return previous value, or null if none</span><br><span class="line">     */</span><br><span class="line">    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">                   boolean evict) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br></pre></td></tr></table></figure></p>
<p>putVal第一个if即如果table为空，则通过resize方法初始化table<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">           n = (tab = resize()).length;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">     Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">       int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class="line">       int oldThr = threshold;</span><br><span class="line">       int newCap, newThr = 0;</span><br><span class="line">       </span><br><span class="line">       ....</span><br><span class="line">       else &#123;               // zero initial threshold signifies using defaults</span><br><span class="line">           newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">           newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">       &#125;</span><br><span class="line">       ....</span><br><span class="line">       </span><br><span class="line">       threshold = newThr;</span><br><span class="line">       @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">           Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">       table = newTab;</span><br><span class="line">       </span><br><span class="line">       ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>putVal第二个if则是通过key的hash值判断当前的hash所在数组位置是否有值，如果为null，则直接newNode<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="line">            tab[i] = newNode(hash, key, value, null);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>putVal接下来的else是该方法中的主要部分，else开始时，p为putVal方法开始根据key的hash值所得的数组位置的内容</p>
<ol>
<li>如果p的hash，key与参数列表中的相同，则直接将p赋值个e，条件判断结束；</li>
<li>1不成立，则判断p是否为树形结构，如果为树形结构，则走树形结果方法，条件判断结束；</li>
<li>如果1、2都成立，则循环所有列表数据。如果结束前，找到符合条件1的，则走1同样的流程，直至最后p.next为null，此时新建节点插入，并赋值给e，条件判断结束；</li>
<li>如果e不为null，并且onlyIfAbsent为false(即允许覆盖原值)，或者原值为null，则覆盖原来的value为新value，回原来的value值；afterNodeAccess该方法为LinkedHashMap的后续操作;<br><strong>注意：循环中binCount &gt;= TREEIFY_THRESHOLD - 1表示，当哈希表大小超过最小树限制时，将map转为树，进行树操作，这样当下次在put时，直接走上述第2条数操作</strong>  </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"> else &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            if (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            else if (p instanceof TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">            else &#123;</span><br><span class="line">                for (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">                    if ((e = p.next) == null) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, null);</span><br><span class="line">                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                        break;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (e != null) &#123; // existing mapping for key</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                return oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>方法最后，主要判断如果数组大小超过转载值，则扩充容量<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">        ++modCount;</span><br><span class="line">        if (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        return null;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<h5><span id="get">get</span><a href="#get" class="header-anchor">#</a></h5><p>通常我们使用的都是通过key来get value的方法，其实内部都是使用getNode方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public V get(Object key) &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        return (e = getNode(hash(key), key)) == null ? null : e.value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>getNode方法主要完成以下几步：</p>
<ol>
<li>根据key的has值得到map数组位置的node，如果node的key与传入的key相同，则返回node；</li>
<li>node.next为空，则返回null，否则如果树，则走树形方法，不是树，则开始循环查找；</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class="line">        if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">            (first = tab[(n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">            if (first.hash == hash &amp;&amp; // always check first node</span><br><span class="line">                ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                return first;</span><br><span class="line">            if ((e = first.next) != null) &#123;</span><br><span class="line">                if (first instanceof TreeNode)</span><br><span class="line">                    return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                do &#123;</span><br><span class="line">                    if (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                        return e;</span><br><span class="line">                &#125; while ((e = e.next) != null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>JAVA</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里巴巴Java开发手册学习</title>
    <url>/2018/02/08/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2><span id="yi-bian-cheng-gui-yue">一、编程规约</span><a href="#yi-bian-cheng-gui-yue" class="header-anchor">#</a></h2><h4><span id="yi-ming-ming-feng-ge">（一）命名风格</span><a href="#yi-ming-ming-feng-ge" class="header-anchor">#</a></h4><ol>
<li>下划线和美元符号不能作为起始也不能结束；</li>
<li>禁止拼音与英文混合，禁止直接使用中文；</li>
<li>类名必须驼峰，除DO/BO/DTO/VO/AO外；</li>
<li>方法名、参数名、成员变量、局部变量必须使用lowerCameCase;</li>
<li>常量全部大写，单词间用下划线，为了表达清楚，可以长一些；</li>
<li>抽象类名使用Abstract或Base开头；异常类名使用Exception结尾；测试类名以它要测试的类的名称开始，以Test结尾；</li>
<li>POJO类中布尔类型不加IS，可能引起部分框架序列化错误；</li>
<li>包名用小写，包名使用单数形式，但类名如果有负数含义，类型可以使用复数形式；</li>
<li>杜绝少用不规范缩写；命名时，使用完整单词；</li>
<li>命名时体现设计模式；</li>
<li>接口中方法和属性不加任何修饰符，加上Javadoc注释；接口中只定义与接口有关的变量；JDK8允许的default方法，是对所有实现类都有价值的默认实现；</li>
<li>枚举类名带上Enum后缀，成员名称全大写，单词间用下划线隔开；</li>
</ol>
<a id="more"></a>
<h4><span id="er-chang-liang-ding-yi">（二）常量定义</span><a href="#er-chang-liang-ding-yi" class="header-anchor">#</a></h4><ol>
<li>不允许任何魔法值出现；</li>
<li>如意混淆的字符少用，如long或者Long初始值时，使用L，不用l；</li>
<li>不使用大而全的常量类，按功能归类；</li>
<li>常量的复用层次 </li>
</ol>
<ul>
<li>跨应用共享常量：放置在二方库中，通常是client.jar中的constant目录下； </li>
<li>应用内共享常量：放置在一方库中，通常是modules中的constant目录下；</li>
<li>子工程内部共享常量：在当前子工程的constant目录下；</li>
<li>包内共享常量：在当前包下单独的constant目录下；</li>
<li>类内共享常量：直接在类内部private static final定义。<br>5.变量值若果在一个范围内变化，且带有名称外的延申属性，定义为枚举类。<h4><span id="san-dai-ma-ge-shi">（三）代码格式</span><a href="#san-dai-ma-ge-shi" class="header-anchor">#</a></h4></li>
</ul>
<ol>
<li>大括号。如果内为空，则可以直接写成{}</li>
</ol>
<ul>
<li>左大括号前不换行；</li>
<li>左大括号后换行；</li>
<li>又大括号前换行；</li>
<li>又大括号后还有else等代码则不换行；表示终止的又大括号必须换行。</li>
</ul>
<ol start="2">
<li>if/for/while/switch/do等保留字与括号之间必须加空格；</li>
<li>任何二目、三目运算符左右两边必须加一个空格；</li>
<li>缩进采用4个空格；</li>
<li>注释的双斜线与注释内容之间有且仅有一个空格；</li>
<li>单行字符不超过120，否则换行。</li>
<li>方法参数定义和传入时，多个参数逗号后边必须加空格；</li>
<li>IDE的text file encoding设置为UTF-8；IDE中文件的换行符使用Unixgeshi ;<h4><span id="4-oop-gui-yue">（4）OOP规约</span><a href="#4-oop-gui-yue" class="header-anchor">#</a></h4></li>
<li>避免通过一个类的对象引用访问此类的静态变量或静态方法，无畏增加编译器的解析成本，直接用类名访问；</li>
<li>所有复写方法，必须加@override注解；</li>
<li>相同参数类型，相同业务含义才可以使用Java的可变参数，放在参数列表最后，禁止使用Object，尽量不使用可变参数；</li>
<li>外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated注解，并清晰地说明采用的新接口或者新服务是什么；</li>
<li>不使用过时的类或方法；</li>
<li>Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象调用equals；</li>
<li>所有相同类型的包装类对象之间值比较，全部使用equals方法（<em>对于Integer var = ? 在-128值127范围内的赋值，Integer对象是在IntegerCache.cache产生，会复用已有对象，这个区间内的Integer值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用equals方法进行判断</em>）；</li>
<li>基本数据类型与包装数据类型使用标准</li>
</ol>
<ul>
<li>所有的POJO类属性必须使用包装数据类型；</li>
<li>RPC方法返回值和参数必须使用包装数据类型；</li>
<li>所有局部变量使用基本数据类型；</li>
</ul>
<ol start="9">
<li>定义DO/DTO/VO等POJO类时，不允许设置任何属性默认值；</li>
<li>序列化类新增属性时，请不要修改serialVersionUID字段，避免反序列化失败；如果完全不兼容升级，避免发序列化混乱，请修改serialVersionUID值；</li>
<li>构造方法禁止出现业务逻辑，如果有初始化逻辑，放在init方法中；</li>
<li>POJO必须有toString方法；<h4><span id="5-ji-he-chu-li">（5）集合处理</span><a href="#5-ji-he-chu-li" class="header-anchor">#</a></h4></li>
<li>关于hashCode和equals的处理，必须遵循：</li>
</ol>
<ul>
<li>只要重写equals，必须重写hashCode；</li>
<li>因为Set存储的是不重复的对象，依据hashCode和equals进行判断，所以Set存储的对象必须冲洗这两个方法；</li>
<li>如果自定义对象作为Map的key，则必须重写hashCode和equals方法；</li>
</ul>
<ol start="2">
<li>ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList;</li>
<li>在subList场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生ConcurrentModificationException异常；</li>
<li>使用集合转数组的方法，必须使用集合的toArray（T[] array），传入的是类型完全一样的数组，大小就是list.size()；</li>
<li>使用工具类Arrays.asList()把数组转成集合时，不能使用其修改集合相关的方法，它的add/remove/clear方法会抛出UnsupportedOperationException异常；</li>
<li>泛型通配符&lt;? extends T&gt;来接收返回的数据，次写法的集合不能使用add方法，而&lt;? super T&gt;不能使用get方法，作为接口调用赋值时容易出错；</li>
<li>不允许在foreach循环里进行元素的remove/add操作。remove元素请使用Iterator方式，如果兵法操作，需要对Iterator对象加锁。<h4><span id="6-bing-fa-chu-li">（6）并发处理</span><a href="#6-bing-fa-chu-li" class="header-anchor">#</a></h4></li>
<li>获取单例对象需要保证线程安全，其中的方法也要保证线程安全；</li>
<li>创建线程或线程池时，指定有意义的线程名称，方便出错时回溯；</li>
<li>线程资源必须通过线程池提供，不允许在应用中自行显式创建线程；</li>
<li>线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险；（说明：Executors返回的线程池对象的弊端：1 FixedThreadPool和SingleThreadPool 允许的请求队列长度为Integer.MAX_VALUE,可能会堆积大量请求，导致OOM；2 CachedThreadPool和ScheduledThreadPool 允许的创建线程数量为Integer.MAX_VALUE,可能会创建大量的线程，导致OOM）</li>
<li>SimpleDateFormat是线程不安全的，一般不要定义为static变量，如果定义为static，必须加锁，或者使用DateUtils工具类；<blockquote>
<p>注意线程安全使用DateUtils。亦推荐如下方式<br>private static final ThreadLocal<dateformat> df = new ThreadLocal<dateformat>() {<br>@Override<br>protected DateFormat initialValue() {<br>return new SimpleDateFormat(“yyyy-MM-dd”);<br>}<br>};<br>JDK8的应用，可以使用Instant代替Date，LocalDateTime代替Calendar，DateTimeFormatter代替Simpledateformatter,官方给出的解释：simplebeautiful strong immutable thread-sage；</dateformat></dateformat></p>
</blockquote>
</li>
<li>高并发时，同步调用应该考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁；避免在锁代码块中调用RPC方法；</li>
<li>对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁；</li>
<li>并发修改统一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用version作为更新依据；</li>
<li>多线程并行处理定时任务时，Time运行多个TimeTask时，只要其中之一没有捕获抛出的异常，其他任务便会自动终止运行，使用ScheduleExecutorService则没有这个问题；<h4><span id="7">（7）</span><a href="#7" class="header-anchor">#</a></h4></li>
<li>Math.random()这个方法返回的是dubble类型，注意取值的范围0&lt;= x &lt;=1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不允许将X放大10的若干倍数然后取整，直接使用Random对象的nextInt或者nextLong方法；</li>
<li>获取当前毫秒数System.currentTimeMillis();而不是new Date().getTime();</li>
</ol>
<hr>
<h2><span id="er-yi-chang-ri-zhi">二、异常日志</span><a href="#er-yi-chang-ri-zhi" class="header-anchor">#</a></h2><h4><span id="1-yi-chang-chu-li">（1）异常处理</span><a href="#1-yi-chang-chu-li" class="header-anchor">#</a></h4><ol>
<li>Java类库中定义的一类RuntimeException可以通过预先检查进行规避，而不应该通过catch来处理；</li>
<li>不允许用异常做流程控制，条件控制，因为异常的处理效率比条件分支低；</li>
<li>不允许对打断代码进行try-catch，只对非稳定代码进行异常处理；</li>
<li>不允许在finally块中使用return，finally块中的return返回后方法结束执行，不会再执行try块中的return语句；</li>
</ol>
<hr>
<h2><span id="san-mysql-shu-ju-ku">三、MySQL数据库</span><a href="#san-mysql-shu-ju-ku" class="header-anchor">#</a></h2><h4><span id="1-jian-biao-gui-yue">（1）建表规约</span><a href="#1-jian-biao-gui-yue" class="header-anchor">#</a></h4><ol>
<li>表达是与否概念的字段，必须使用is_xxx的方式命名，数据类型是unsigned tinyint（1表示是，0表示否）；</li>
<li>表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑；</li>
<li>不允许表名使用复数名词；</li>
<li>禁用保留字；</li>
<li>主键索引名为pk_字段名；唯一索引名为uk_字段名；普通索引名则为inx_字段名；</li>
<li>小数类型为decimal，禁止使用float和duoble；</li>
<li>如果存储的字符串长度几乎相等，使用char定长字符串类型；</li>
<li>varchar是可变字符串，不预先分配存储空间，长度不要超过5000，如果存储长度大于此值，定义字段类型为text，独立出来一张表，用主键来对应，避免影响其他字段索引效率；<h4><span id="2-suo-yin-gui-yue">（2）索引规约</span><a href="#2-suo-yin-gui-yue" class="header-anchor">#</a></h4></li>
<li>业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引；</li>
<li>超过三个表禁止join，需要join的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引；</li>
<li>在varchar字段上建立所以时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可；</li>
<li>页面所有禁止左模糊或者全模糊，如果需要请走搜索引擎来解决；</li>
<li>如果有order by的场景，请注意利用索引的有序性。order by最后的字段是组合索引的一部分，并且放在组合顺序的最后，避免出现file_sort的情况，影响查询性能；<h4><span id="3-sql-yu-ju">（3）SQL语句</span><a href="#3-sql-yu-ju" class="header-anchor">#</a></h4></li>
<li>不要使用count(列名)或count(常量)来代替count(*)，count(*)是SQL92定义的标准统计行数的语法，跟数据库无关，跟null和非null无关；</li>
<li>count(distinct col)计算改列除null之外的不重复行数，注意**count(distinct col1, col2)若果其中一列全为null，那么即使另一列有不同值，也返回0；</li>
<li>当某列的值全是null时，count(col)的返回结果为0，但sum(col)的返回结果为null，因此sum()需注意NPE问题；</li>
<li>使用ISNULL()来判断是否为NULL值。NULL与任何值比较结果都为NULL；</li>
<li>代码中写分页查询逻辑时，若count不为0应直接返回，避免执行后面的分页语句；<h4><span id="4-orm-ying-she">（4）ORM映射</span><a href="#4-orm-ying-she" class="header-anchor">#</a></h4></li>
<li>在表查询中，一律禁止使用*作为查询字段列表，需要哪些字段必须明确写明；</li>
<li>POJO类的布尔属性不能加is，而数据库字段必须加is_，要求在resultMap中进行字段和属性之间的映射；</li>
<li>不要使用resultClass当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义，反过来，每一个表也必然有一个与之对应；</li>
<li>sql.xml配置参数使用：#{}， #param#，不要使用${}，此种方法容易出现sql注入；</li>
<li>iBatis自带的queryForList(String statementName,int start,int size)不推荐使用；</li>
<li>不允许直接拿HashMap与Hashtable作为查询结果集的输出；</li>
<li>更新数据库记录时，必须同时更新记录对应的gmt_modified字段值为当前时间；</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>JAVA</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK与JRE的区别</title>
    <url>/2018/02/07/JDK%E4%B8%8EJRE%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3><span id="jdk">JDK</span><a href="#jdk" class="header-anchor">#</a></h3><p>Java Development Kit，是Java开发工具包，它提供了Java的开发环境(提供了编译器javac等工具，用于将java文件编译为class文件)和运行环境(提 供了JVM和Runtime辅助包，用于解析class文件使其得到运行)。如果你下载并安装了JDK，那么你不仅可以开发Java程序，也同时拥有了运 行Java程序的平台。JDK是整个Java的核心，<strong>包括了Java运行环境(JRE)</strong>，一堆Java工具tools.jar和Java标准类库 (rt.jar)。</p>
<h3><span id="jre">JRE</span><a href="#jre" class="header-anchor">#</a></h3><p>Java Runtime Enviroment，是Java的运行环境。面向Java程序的使用者，而不是开发者。如果你仅下载并安装了JRE，那么你的系统只能运行Java程序。JRE是运行Java程序所必须环境的集合，包含JVM标准实现及 Java核心类库。它包括Java虚拟机、Java平台核心类和支持文件。它不包含开发工具(编译器、调试器等)。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JAVA</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>断舍离读后感</title>
    <url>/2018/01/10/%E6%96%AD%E8%88%8D%E7%A6%BB%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<p><em>断舍离创始人山下英子，作者山下英子。</em></p>
<h5><span id="1-duan-she-chi-de-gai-nian">1、断舍离的概念</span><a href="#1-duan-she-chi-de-gai-nian" class="header-anchor">#</a></h5><ol>
<li>断=断绝想要进入自己家的不需要的东西；</li>
<li>舍=舍弃家里到处泛滥的破烂儿；</li>
<li>离=脱离对物品的执念，处于游刃有余的自在空间。<br><strong>通过对物质的断舍离，最终能够达到精神、心灵的断舍离，是自己的生活更简单，更轻松。</strong>  </li>
</ol>
<a id="more"></a>
<hr>
<h5><span id="2-ren-zhi">2、认知</span><a href="#2-ren-zhi" class="header-anchor">#</a></h5><p>粗略的读了一遍，中间也因为各种事打断，断断续续，总共大概在20天内看完，可能有些东西自己已经不太能记得，印象比较深的就是主对象的以及时间轴的转变。  </p>
<hr>
<p>我们习惯的思维在整理物品，或者看到物品，通常是以物品为主语：XXX还有用，XXX以后还有用，XXX可能在XXX时间要用到，而从来没有以自己或者使用物品的人为主语，比如我要用XXX，我现在就可以用到XXX，而对于以前的物品，无论是别人送的，还是自己买到的，如果只是让它躺在某一些角落里发霉，那不如让它去到它可以发挥作用的地方。 </p>
<hr>
<p>时间轴是同理的，我们总是在准备着，在留恋着，对于一些物品，总是会以一种在某某时刻我要用到的心里留着它，或者曾经我使用过是如何如何的好，以后还可以使用，然而，我们却将这些物品堆积埋没在深入，基本上再也不会动。我们应当以当下为时间轴，思维上应该是认为我要在现在用到这物品，我用XXX可以如何如何，这样挑选留下的才是我们真正需要的东西。</p>
<hr>
<h5><span id="3-zong-jie">3、总结</span><a href="#3-zong-jie" class="header-anchor">#</a></h5><p>虽然《断舍离》是以物品入手，引导我们如何断舍离，实际最终还是深化到精神、心灵，从本质上改变我们的思维，生活。<br>自我感觉仍然是一个“度”的问题，所有的事情只要能够把握何时“度”，达到平衡的状态，最终都会让我们有一个没好的结局。<br>读一遍，感觉有一些认识，应该再读至少两遍，应该会有不一样的思考。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>读后感</tag>
        <tag>断舍离</tag>
      </tags>
  </entry>
  <entry>
    <title>Java位运算符学习</title>
    <url>/2017/12/27/Java%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2><span id="java-zhong-de-wei-yun-suan-fu-you-ru-xia-ji-lei">Java中的位运算符有如下几类</span><a href="#java-zhong-de-wei-yun-suan-fu-you-ru-xia-ji-lei" class="header-anchor">#</a></h2><ul>
<li>左移 &lt;&lt;</li>
<li>又移 &gt;&gt;</li>
<li>无符号右移 &gt;&gt;&gt;</li>
<li>位与 &amp;</li>
<li>位或 |</li>
<li>位非 ~</li>
<li>位异或 ^</li>
</ul>
<a id="more"></a>
<hr>
<h4><span id="zuo-yi-lt-lt">左移 &lt;&lt;</span><a href="#zuo-yi-lt-lt" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(Integer.toBinaryString(10));</span><br><span class="line">		System.out.println(10 &lt;&lt; 2);</span><br><span class="line">		System.out.println(Integer.toBinaryString(10 &lt;&lt; 2));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><strong>在java中对一个数字左移n位，其实就是给该数字乘以2的n次方，比如10&lt;&lt;2，就是给10乘以2的平方，得到40。</strong><br>那么二进制的方式是怎么实现的呢？上述代码输出结果如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1010</span><br><span class="line">40</span><br><span class="line">101000</span><br><span class="line">//补全 int 32位十进制，如下</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 1010</span><br><span class="line">40</span><br><span class="line">0000 0000 0000 0000 0000 0000 0010 1000</span><br></pre></td></tr></table></figure></p>
<h6><span id="ke-yi-kan-chu-shi-jiang-1010-zuo-yi-liang-wei-di-wei-bu-ling-suo-de">可以看出是将1010左移两位，低位补零所得。</span><a href="#ke-yi-kan-chu-shi-jiang-1010-zuo-yi-liang-wei-di-wei-bu-ling-suo-de" class="header-anchor">#</a></h6><p><strong>因为Java中，int数字有符号，并且有长度限制，所能表示的范围为-2^31 ~ 2^31 -1（-2147483648~2147483647），因此如果左移所得结果超过2^37 - 1，将会变成负数；负数左移超过 -2^37 之后将会变成0，-2^37无论左移多少（除过32以及32的倍数位）位，结果始终为0。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(Integer.toBinaryString(2147483647));</span><br><span class="line">		System.out.println(2147483647 &lt;&lt; 1);</span><br><span class="line">		System.out.println(Integer.toBinaryString(2147483647 &lt;&lt; 1));</span><br><span class="line">		System.out.println(&quot;-------------------------------------&quot;);</span><br><span class="line">		System.out.println(Integer.toBinaryString(-2147483648));</span><br><span class="line">		System.out.println(-2147483648 &lt;&lt; 1);</span><br><span class="line">		System.out.println(-2147483648 &lt;&lt; 100);</span><br><span class="line">		System.out.println(Integer.toBinaryString(-2147483648 &lt;&lt; 100));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1111111111111111111111111111111</span><br><span class="line">-2</span><br><span class="line">11111111111111111111111111111110</span><br><span class="line">-------------------------------------</span><br><span class="line">10000000000000000000000000000000</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<p><strong>注意1左移31位所得既是int所能表示的做小整数，但是1左移32位不会得到0，而是1，不同于直接将-2147483648左移1位</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(1 &lt;&lt; 31);</span><br><span class="line">		System.out.println(Integer.toBinaryString(1 &lt;&lt; 31));</span><br><span class="line">		System.out.println(-2147483648 &lt;&lt; 1);</span><br><span class="line">		System.out.println(1 &lt;&lt; 32);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-2147483648</span><br><span class="line">10000000000000000000000000000000</span><br><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>任一数字左移32（或者32倍数）位将得到其本身</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(1 &lt;&lt; 32);</span><br><span class="line">		System.out.println(2147483647 &lt;&lt; 32);</span><br><span class="line">		System.out.println(-1 &lt;&lt; 32);</span><br><span class="line">		System.out.println(-2147483648 &lt;&lt; 64);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2147483647</span><br><span class="line">-1</span><br><span class="line">-2147483648</span><br></pre></td></tr></table></figure>
<hr>
<h4><span id="you-yi-gt-gt">右移 &gt;&gt;</span><a href="#you-yi-gt-gt" class="header-anchor">#</a></h4><p><strong>在java中对一个数字右移n位，其实就是给该数字除以2的n次方，向下取整。正整数右移取到0之后，右移任何（除了32以及32的倍数）位，都是0；负整数右移得到-1之后，右移任何（除了32以及32的倍数）位，都是-1。</strong><br><strong>任一数字右移32（或者32的倍数）位将得到其本身</strong><br>比如10&gt;&gt;2，就是10除以2的平方，取整得到2，-10&gt;&gt;2，就是-10除以2的平方向下取整，得到-3。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;1 &gt;&gt; 1 : &quot; + (1 &gt;&gt; 1));</span><br><span class="line">		System.out.println(&quot;1 &gt;&gt; 20 : &quot; + (1 &gt;&gt; 20));</span><br><span class="line">		System.out.println(&quot;1 &gt;&gt; 32 : &quot; + (1 &gt;&gt; 32));</span><br><span class="line">		System.out.println(&quot;10 &gt;&gt; 2 : &quot; + (10 &gt;&gt; 2));</span><br><span class="line">		System.out.println(&quot;10 &gt;&gt; 4 : &quot; + (10 &gt;&gt; 4));</span><br><span class="line">		System.out.println(&quot;10 &gt;&gt; 30 : &quot; + (10 &gt;&gt; 30));</span><br><span class="line">		System.out.println(&quot;10 &gt;&gt; 64 : &quot; + (10 &gt;&gt; 64));</span><br><span class="line">		System.out.println(&quot;---------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;-1 &gt;&gt; 2 : &quot; + (-1 &gt;&gt; 2));</span><br><span class="line">		System.out.println(&quot;-1 &gt;&gt; 20 : &quot; + (-1 &gt;&gt; 20));</span><br><span class="line">		System.out.println(&quot;-1 &gt;&gt; 32 : &quot; + (-1 &gt;&gt; 32));</span><br><span class="line">		System.out.println(&quot;-10 &gt;&gt; 2 : &quot; + (-10 &gt;&gt; 2));</span><br><span class="line">		System.out.println(&quot;-10 &gt;&gt; 3 : &quot; + (-10 &gt;&gt; 3));</span><br><span class="line">		System.out.println(&quot;-10 &gt;&gt; 4 : &quot; + (-10 &gt;&gt; 4));</span><br><span class="line">		System.out.println(&quot;-10 &gt;&gt; 30 : &quot; + (-10 &gt;&gt; 30));</span><br><span class="line">		System.out.println(&quot;-10 &gt;&gt; 96 : &quot; + (-10 &gt;&gt; 96));</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &gt;&gt; 1 : 0</span><br><span class="line">1 &gt;&gt; 20 : 0</span><br><span class="line">1 &gt;&gt; 32 : 1</span><br><span class="line">10 &gt;&gt; 2 : 2</span><br><span class="line">10 &gt;&gt; 4 : 0</span><br><span class="line">10 &gt;&gt; 30 : 0</span><br><span class="line">10 &gt;&gt; 64 : 10</span><br><span class="line">---------------------------------------</span><br><span class="line">-1 &gt;&gt; 2 : -1</span><br><span class="line">-1 &gt;&gt; 20 : -1</span><br><span class="line">-1 &gt;&gt; 32 : -1</span><br><span class="line">-10 &gt;&gt; 2 : -3</span><br><span class="line">-10 &gt;&gt; 3 : -2</span><br><span class="line">-10 &gt;&gt; 4 : -1</span><br><span class="line">-10 &gt;&gt; 30 : -1</span><br><span class="line">-10 &gt;&gt; 96 : -10</span><br></pre></td></tr></table></figure>
<hr>
<h4><span id="wu-fu-hao-you-yi-gt-gt-gt">无符号右移 &gt;&gt;&gt;</span><a href="#wu-fu-hao-you-yi-gt-gt-gt" class="header-anchor">#</a></h4><p>通常所说的右移即有符号右移，对于正整数来说，有符号右移与无符号右移是一样的，对于负整数来说，有符号右移高位补1，无符号右移高位补0。<br><strong>任一数字无符号右移32（或者32的倍数）位，得到其本身</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;10 :       &quot; + Integer.toBinaryString(10));</span><br><span class="line">		System.out.println(&quot;10 &gt;&gt; 1  : &quot; + Integer.toBinaryString(10 &gt;&gt; 1) + &quot; : &quot; + (10 &gt;&gt; 1));</span><br><span class="line">		System.out.println(&quot;10 &gt;&gt;&gt; 1 : &quot; + Integer.toBinaryString(10 &gt;&gt;&gt; 1) + &quot; : &quot; +  (10 &gt;&gt;&gt; 1) );	</span><br><span class="line">		System.out.println(&quot;10 &gt;&gt; 2 :  &quot; + Integer.toBinaryString(10 &gt;&gt; 2) + &quot; : &quot; +  (10 &gt;&gt; 2) );	</span><br><span class="line">		System.out.println(&quot;10 &gt;&gt;&gt; 2 : &quot; + Integer.toBinaryString(10 &gt;&gt;&gt; 2) + &quot; : &quot; +  (10 &gt;&gt;&gt; 2) );	</span><br><span class="line">		System.out.println(&quot;10 &gt;&gt;&gt; 32 : &quot; + Integer.toBinaryString(10 &gt;&gt;&gt; 32) + &quot; : &quot; +  (10 &gt;&gt;&gt; 32) );	</span><br><span class="line">		System.out.println(&quot;--------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;-10 :       &quot; + Integer.toBinaryString(-10));</span><br><span class="line">		System.out.println(&quot;-10 &gt;&gt; 1  : &quot; + Integer.toBinaryString(-10 &gt;&gt; 1) + &quot; : &quot; + (-10 &gt;&gt; 1));</span><br><span class="line">		System.out.println(&quot;-10 &gt;&gt;&gt; 1 : &quot; + Integer.toBinaryString(-10 &gt;&gt;&gt; 1) + &quot; : &quot; +  (-10 &gt;&gt;&gt; 1) );	</span><br><span class="line">		System.out.println(&quot;-10 &gt;&gt; 2 :  &quot; + Integer.toBinaryString(-10 &gt;&gt; 2) + &quot; : &quot; +  (-10 &gt;&gt; 2) );		</span><br><span class="line">		System.out.println(&quot;-10 &gt;&gt;&gt; 2 : &quot; + Integer.toBinaryString(-10 &gt;&gt;&gt; 2) + &quot; : &quot; +  (-10 &gt;&gt;&gt; 2) );		</span><br><span class="line">		System.out.println(&quot;-10 &gt;&gt;&gt; 32 :&quot; + Integer.toBinaryString(-10 &gt;&gt;&gt; 32) + &quot; : &quot; +  (-10 &gt;&gt;&gt; 32) );		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 :       1010</span><br><span class="line">10 &gt;&gt; 1  : 101 : 5</span><br><span class="line">10 &gt;&gt;&gt; 1 : 101 : 5</span><br><span class="line">10 &gt;&gt; 2 :  10 : 2</span><br><span class="line">10 &gt;&gt;&gt; 2 : 10 : 2</span><br><span class="line">10 &gt;&gt;&gt; 32 : 1010 : 10</span><br><span class="line">--------------------------------------------------</span><br><span class="line">-10 :       11111111111111111111111111110110</span><br><span class="line">-10 &gt;&gt; 1  : 11111111111111111111111111111011 : -5</span><br><span class="line">-10 &gt;&gt;&gt; 1 : 1111111111111111111111111111011 : 2147483643</span><br><span class="line">-10 &gt;&gt; 2 :  11111111111111111111111111111101 : -3</span><br><span class="line">-10 &gt;&gt;&gt; 2 : 111111111111111111111111111101 : 1073741821</span><br><span class="line">-10 &gt;&gt;&gt; 32 :11111111111111111111111111110110 : -10</span><br></pre></td></tr></table></figure>
<p>如上实验，-10&gt;&gt;1位，与-10&gt;&gt;&gt;1所得二进制码相差一位，其实是高位补0，补全32位如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-10 :       11111111111111111111111111110110</span><br><span class="line">-10 &gt;&gt; 1  : 11111111111111111111111111111011 : -5</span><br><span class="line">-10 &gt;&gt;&gt; 1 : 01111111111111111111111111111011 : 2147483643</span><br><span class="line">-10 &gt;&gt; 2 :  11111111111111111111111111111101 : -3</span><br><span class="line">-10 &gt;&gt;&gt; 2 : 00111111111111111111111111111101 : 1073741821</span><br><span class="line">-10 &gt;&gt;&gt; 32 :11111111111111111111111111110110 : -10</span><br></pre></td></tr></table></figure></p>
<hr>
<h5><span id="wei-yu-amp">位与 &amp;</span><a href="#wei-yu-amp" class="header-anchor">#</a></h5><p>位与，是将数字在二进制形式下，并且都补齐到32位，然后逐一对两个数的每一位进行比较，相同则得1，否则得0，最终得到的二进制为结果。</p>
<ol>
<li>所有数字与0位与运算都得到0；</li>
<li>所有数字与-1位与运算都得到数字本身；</li>
<li>所有正数与2^31-1位与运算都得到本身，与-2^31位与都得到0；</li>
<li>所有负数与2^31-1位与运算都得到2^31+负数，与-2^31位与都得到-2^31；</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;2147483647    :       &quot; + Integer.toBinaryString(2147483647));</span><br><span class="line">		System.out.println(&quot;-2147483648   :       &quot; + Integer.toBinaryString(-2147483648));</span><br><span class="line">		System.out.println(&quot;-1            :       &quot; + Integer.toBinaryString(-1));</span><br><span class="line">		System.out.println(&quot;0             :       &quot; + Integer.toBinaryString(0));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		</span><br><span class="line">		System.out.println(&quot;10   :       &quot; + Integer.toBinaryString(10));</span><br><span class="line">		System.out.println(&quot;1    :       &quot; + Integer.toBinaryString(1));</span><br><span class="line">		System.out.println(&quot;10&amp;1 :       &quot; + Integer.toBinaryString(10&amp;1) + &quot;|&quot; + (10&amp;1));</span><br><span class="line">		System.out.println(&quot;10&amp;-8:       &quot; + Integer.toBinaryString(10&amp;-8) + &quot;|&quot; + (10&amp;-8));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;-10   :       &quot; + Integer.toBinaryString(-10));</span><br><span class="line">		System.out.println(&quot;-2    :       &quot; + Integer.toBinaryString(-2));</span><br><span class="line">		System.out.println(&quot;1     :       &quot; + Integer.toBinaryString(1));</span><br><span class="line">		System.out.println(&quot;-10&amp;-2:       &quot; + Integer.toBinaryString(-10&amp;-2) + &quot;|&quot; + (-10&amp;-2));</span><br><span class="line">		System.out.println(&quot;-10&amp;1 :       &quot; + Integer.toBinaryString(-10&amp;1) + &quot;|&quot; + (-10&amp;1));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;10&amp;-1:       &quot; + Integer.toBinaryString(10&amp;-1) + &quot;|&quot; + (10&amp;-1));</span><br><span class="line">		System.out.println(&quot;100&amp;-1:       &quot; + Integer.toBinaryString(100&amp;-1) + &quot;|&quot; + (100&amp;-1));</span><br><span class="line">		System.out.println(&quot;2147483647&amp;-1:       &quot; + Integer.toBinaryString(2147483647&amp;-1) + &quot;|&quot; + (2147483647&amp;-1));</span><br><span class="line">		System.out.println(&quot;-2147483648&amp;-1:       &quot; + Integer.toBinaryString(-2147483648&amp;-1) + &quot;|&quot; + (-2147483648&amp;-1));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;10&amp;0:       &quot; + Integer.toBinaryString(10&amp;0) + &quot;|&quot; + (10&amp;0));</span><br><span class="line">		System.out.println(&quot;-10&amp;0:       &quot; + Integer.toBinaryString(-10&amp;0) + &quot;|&quot; + (-10&amp;0));</span><br><span class="line">		System.out.println(&quot;2147483647&amp;0:       &quot; + Integer.toBinaryString(2147483647&amp;0) + &quot;|&quot; + (2147483647&amp;0));</span><br><span class="line">		System.out.println(&quot;-2147483648&amp;0:       &quot; + Integer.toBinaryString(-2147483648&amp;0) + &quot;|&quot; + (-2147483648&amp;0));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;2147483647&amp;-2147483648:       &quot; + Integer.toBinaryString(2147483647&amp;-2147483648) + &quot;|&quot; + (2147483647&amp;-2147483648));</span><br><span class="line">		System.out.println(&quot;-10&amp;2147483647 :       &quot; + Integer.toBinaryString(-10&amp;2147483647) + &quot;|&quot; + (-10&amp;2147483647));</span><br><span class="line">		System.out.println(&quot;-123&amp;2147483647 :       &quot; + Integer.toBinaryString(-123&amp;2147483647) + &quot;|&quot; + (-123&amp;2147483647));</span><br><span class="line">		System.out.println(&quot;10&amp;2147483647 :       &quot; + Integer.toBinaryString(10&amp;2147483647) + &quot;|&quot; + (10&amp;2147483647));</span><br><span class="line">		System.out.println(&quot;-10&amp;-2147483648 :       &quot; + Integer.toBinaryString(-10&amp;-2147483648) + &quot;|&quot; + (-10&amp;-2147483648));</span><br><span class="line">		System.out.println(&quot;-123&amp;-2147483648 :       &quot; + Integer.toBinaryString(-123&amp;-2147483648) + &quot;|&quot; + (-123&amp;-2147483648));</span><br><span class="line">		System.out.println(&quot;10&amp;-2147483648 :       &quot; + Integer.toBinaryString(10&amp;-2147483648) + &quot;|&quot; + (10&amp;-2147483648));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2147483647    :       1111111111111111111111111111111</span><br><span class="line">-2147483648   :       10000000000000000000000000000000</span><br><span class="line">-1            :       11111111111111111111111111111111</span><br><span class="line">0             :       0</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">10   :       1010</span><br><span class="line">1    :       1</span><br><span class="line">10&amp;1 :       0|0</span><br><span class="line">10&amp;-8:       1000|8</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">-10   :       11111111111111111111111111110110</span><br><span class="line">-2    :       11111111111111111111111111111110</span><br><span class="line">1     :       1</span><br><span class="line">-10&amp;-2:       11111111111111111111111111110110|-10</span><br><span class="line">-10&amp;1 :       0|0</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">10&amp;-1:       1010|10</span><br><span class="line">100&amp;-1:       1100100|100</span><br><span class="line">2147483647&amp;-1:       1111111111111111111111111111111|2147483647</span><br><span class="line">-2147483648&amp;-1:       10000000000000000000000000000000|-2147483648</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">10&amp;0:       0|0</span><br><span class="line">-10&amp;0:       0|0</span><br><span class="line">2147483647&amp;0:       0|0</span><br><span class="line">-2147483648&amp;0:       0|0</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">2147483647&amp;-2147483648:       0|0</span><br><span class="line">-10&amp;2147483647 :       1111111111111111111111111110110|2147483638</span><br><span class="line">-123&amp;2147483647 :       1111111111111111111111110000101|2147483525</span><br><span class="line">10&amp;2147483647 :       1010|10</span><br><span class="line">-10&amp;-2147483648 :       10000000000000000000000000000000|-2147483648</span><br><span class="line">-123&amp;-2147483648 :       10000000000000000000000000000000|-2147483648</span><br><span class="line">10&amp;-2147483648 :       0|0</span><br></pre></td></tr></table></figure>
<hr>
<h6><span id="wei-huo">位或 |</span><a href="#wei-huo" class="header-anchor">#</a></h6><p>位或，是将数字在二进制形式下，并且都补齐到32位，然后逐一对两个数的每一位进行比较，任一数字该位为1则得1，否则得0，最终得到的二进制为结果。<br><strong>注意以下结果与&amp;的不同</strong></p>
<ol>
<li>所有数字与0位或运算都得到数字本身；</li>
<li>所有数字与-1位或运算都得到-1；</li>
<li>所有正数与2^31-1位或运算都得到2^31-1，与-2^31位或都得到-2^31+数字；</li>
<li>所有负数与2^31-1位或运算都得到-1，与-2^31位或都得到数字本身；</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;2147483647    :       &quot; + Integer.toBinaryString(2147483647));</span><br><span class="line">		System.out.println(&quot;-2147483648   :       &quot; + Integer.toBinaryString(-2147483648));</span><br><span class="line">		System.out.println(&quot;-1            :       &quot; + Integer.toBinaryString(-1));</span><br><span class="line">		System.out.println(&quot;0             :       &quot; + Integer.toBinaryString(0));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		</span><br><span class="line">		System.out.println(&quot;10   :       &quot; + Integer.toBinaryString(10));</span><br><span class="line">		System.out.println(&quot;1    :       &quot; + Integer.toBinaryString(1));</span><br><span class="line">		System.out.println(&quot;10|1 :       &quot; + Integer.toBinaryString(10|1) + &quot;|&quot; + (10|1));</span><br><span class="line">		System.out.println(&quot;10|-8:       &quot; + Integer.toBinaryString(10|-8) + &quot;|&quot; + (10|-8));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;-10   :       &quot; + Integer.toBinaryString(-10));</span><br><span class="line">		System.out.println(&quot;-2    :       &quot; + Integer.toBinaryString(-2));</span><br><span class="line">		System.out.println(&quot;1     :       &quot; + Integer.toBinaryString(1));</span><br><span class="line">		System.out.println(&quot;-10|-2:       &quot; + Integer.toBinaryString(-10|-2) + &quot;|&quot; + (-10|-2));</span><br><span class="line">		System.out.println(&quot;-10|1 :       &quot; + Integer.toBinaryString(-10|1) + &quot;|&quot; + (-10|1));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;10|-1:       &quot; + Integer.toBinaryString(10|-1) + &quot;|&quot; + (10|-1));</span><br><span class="line">		System.out.println(&quot;100|-1:       &quot; + Integer.toBinaryString(100|-1) + &quot;|&quot; + (100|-1));</span><br><span class="line">		System.out.println(&quot;2147483647|-1:       &quot; + Integer.toBinaryString(2147483647|-1) + &quot;|&quot; + (2147483647|-1));</span><br><span class="line">		System.out.println(&quot;-2147483648|-1:       &quot; + Integer.toBinaryString(-2147483648|-1) + &quot;|&quot; + (-2147483648|-1));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;10|0:       &quot; + Integer.toBinaryString(10|0) + &quot;|&quot; + (10|0));</span><br><span class="line">		System.out.println(&quot;-10|0:       &quot; + Integer.toBinaryString(-10|0) + &quot;|&quot; + (-10|0));</span><br><span class="line">		System.out.println(&quot;2147483647|0:       &quot; + Integer.toBinaryString(2147483647|0) + &quot;|&quot; + (2147483647|0));</span><br><span class="line">		System.out.println(&quot;-2147483648|0:       &quot; + Integer.toBinaryString(-2147483648|0) + &quot;|&quot; + (-2147483648|0));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;2147483647|-2147483648:       &quot; + Integer.toBinaryString(2147483647|-2147483648) + &quot;|&quot; + (2147483647|-2147483648));</span><br><span class="line">		System.out.println(&quot;-10|2147483647 :       &quot; + Integer.toBinaryString(-10|2147483647) + &quot;|&quot; + (-10|2147483647));</span><br><span class="line">		System.out.println(&quot;-123|2147483647 :       &quot; + Integer.toBinaryString(-123|2147483647) + &quot;|&quot; + (-123|2147483647));</span><br><span class="line">		System.out.println(&quot;10|2147483647 :       &quot; + Integer.toBinaryString(10|2147483647) + &quot;|&quot; + (10|2147483647));</span><br><span class="line">		System.out.println(&quot;-10|-2147483648 :       &quot; + Integer.toBinaryString(-10|-2147483648) + &quot;|&quot; + (-10|-2147483648));</span><br><span class="line">		System.out.println(&quot;-123|-2147483648 :       &quot; + Integer.toBinaryString(-123|-2147483648) + &quot;|&quot; + (-123|-2147483648));</span><br><span class="line">		System.out.println(&quot;10|-2147483648 :       &quot; + Integer.toBinaryString(10|-2147483648) + &quot;|&quot; + (10|-2147483648));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2147483647    :       1111111111111111111111111111111</span><br><span class="line">-2147483648   :       10000000000000000000000000000000</span><br><span class="line">-1            :       11111111111111111111111111111111</span><br><span class="line">0             :       0</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">10   :       1010</span><br><span class="line">1    :       1</span><br><span class="line">10|1 :       1011|11</span><br><span class="line">10|-8:       11111111111111111111111111111010|-6</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">-10   :       11111111111111111111111111110110</span><br><span class="line">-2    :       11111111111111111111111111111110</span><br><span class="line">1     :       1</span><br><span class="line">-10|-2:       11111111111111111111111111111110|-2</span><br><span class="line">-10|1 :       11111111111111111111111111110111|-9</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">10|-1:       11111111111111111111111111111111|-1</span><br><span class="line">100|-1:       11111111111111111111111111111111|-1</span><br><span class="line">2147483647|-1:       11111111111111111111111111111111|-1</span><br><span class="line">-2147483648|-1:       11111111111111111111111111111111|-1</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">10|0:       1010|10</span><br><span class="line">-10|0:       11111111111111111111111111110110|-10</span><br><span class="line">2147483647|0:       1111111111111111111111111111111|2147483647</span><br><span class="line">-2147483648|0:       10000000000000000000000000000000|-2147483648</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">2147483647|-2147483648:       11111111111111111111111111111111|-1</span><br><span class="line">-10|2147483647 :       11111111111111111111111111111111|-1</span><br><span class="line">-123|2147483647 :       11111111111111111111111111111111|-1</span><br><span class="line">10|2147483647 :       1111111111111111111111111111111|2147483647</span><br><span class="line">-10|-2147483648 :       11111111111111111111111111110110|-10</span><br><span class="line">-123|-2147483648 :       11111111111111111111111110000101|-123</span><br><span class="line">10|-2147483648 :       10000000000000000000000000001010|-2147483638</span><br></pre></td></tr></table></figure>
<hr>
<h6><span id="wei-yi-huo">位异或 ^</span><a href="#wei-yi-huo" class="header-anchor">#</a></h6><p>位异或，是将数字在二进制形式下，并且都补齐到32位，然后逐一对两个数的每一位进行比较，两个数字该位有一个为1另一个为0则得1，否则得0，最终得到的二进制为结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;2147483647    :       &quot; + Integer.toBinaryString(2147483647));</span><br><span class="line">		System.out.println(&quot;-2147483648   :       &quot; + Integer.toBinaryString(-2147483648));</span><br><span class="line">		System.out.println(&quot;-1            :       &quot; + Integer.toBinaryString(-1));</span><br><span class="line">		System.out.println(&quot;0             :       &quot; + Integer.toBinaryString(0));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		</span><br><span class="line">		System.out.println(&quot;10   :       &quot; + Integer.toBinaryString(10));</span><br><span class="line">		System.out.println(&quot;1    :       &quot; + Integer.toBinaryString(1));</span><br><span class="line">		System.out.println(&quot;10^1 :       &quot; + Integer.toBinaryString(10^1) + &quot;|&quot; + (10^1));</span><br><span class="line">		System.out.println(&quot;10^-8:       &quot; + Integer.toBinaryString(10^-8) + &quot;|&quot; + (10^-8));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;-10   :       &quot; + Integer.toBinaryString(-10));</span><br><span class="line">		System.out.println(&quot;-2    :       &quot; + Integer.toBinaryString(-2));</span><br><span class="line">		System.out.println(&quot;1     :       &quot; + Integer.toBinaryString(1));</span><br><span class="line">		System.out.println(&quot;-10^-2:       &quot; + Integer.toBinaryString(-10^-2) + &quot;|&quot; + (-10^-2));</span><br><span class="line">		System.out.println(&quot;-10^1 :       &quot; + Integer.toBinaryString(-10^1) + &quot;|&quot; + (-10^1));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;10^-1:       &quot; + Integer.toBinaryString(10^-1) + &quot;|&quot; + (10^-1));</span><br><span class="line">		System.out.println(&quot;100^-1:       &quot; + Integer.toBinaryString(100^-1) + &quot;|&quot; + (100^-1));</span><br><span class="line">		System.out.println(&quot;2147483647^-1:       &quot; + Integer.toBinaryString(2147483647^-1) + &quot;|&quot; + (2147483647^-1));</span><br><span class="line">		System.out.println(&quot;-2147483648^-1:       &quot; + Integer.toBinaryString(-2147483648^-1) + &quot;|&quot; + (-2147483648^-1));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;10^0:       &quot; + Integer.toBinaryString(10^0) + &quot;|&quot; + (10^0));</span><br><span class="line">		System.out.println(&quot;-10^0:       &quot; + Integer.toBinaryString(-10^0) + &quot;|&quot; + (-10^0));</span><br><span class="line">		System.out.println(&quot;2147483647^0:       &quot; + Integer.toBinaryString(2147483647^0) + &quot;|&quot; + (2147483647^0));</span><br><span class="line">		System.out.println(&quot;-2147483648^0:       &quot; + Integer.toBinaryString(-2147483648^0) + &quot;|&quot; + (-2147483648^0));</span><br><span class="line">		System.out.println(&quot;---------------------------------------------------------&quot;);</span><br><span class="line">		System.out.println(&quot;2147483647^-2147483648:       &quot; + Integer.toBinaryString(2147483647^-2147483648) + &quot;|&quot; + (2147483647^-2147483648));</span><br><span class="line">		System.out.println(&quot;-10^2147483647 :       &quot; + Integer.toBinaryString(-10^2147483647) + &quot;|&quot; + (-10^2147483647));</span><br><span class="line">		System.out.println(&quot;-123^2147483647 :       &quot; + Integer.toBinaryString(-123^2147483647) + &quot;|&quot; + (-123^2147483647));</span><br><span class="line">		System.out.println(&quot;10^2147483647 :       &quot; + Integer.toBinaryString(10^2147483647) + &quot;|&quot; + (10^2147483647));</span><br><span class="line">		System.out.println(&quot;-10^-2147483648 :       &quot; + Integer.toBinaryString(-10^-2147483648) + &quot;|&quot; + (-10^-2147483648));</span><br><span class="line">		System.out.println(&quot;-123^-2147483648 :       &quot; + Integer.toBinaryString(-123^-2147483648) + &quot;|&quot; + (-123^-2147483648));</span><br><span class="line">		System.out.println(&quot;10^-2147483648 :       &quot; + Integer.toBinaryString(10^-2147483648) + &quot;|&quot; + (10^-2147483648));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2147483647    :       1111111111111111111111111111111</span><br><span class="line">-2147483648   :       10000000000000000000000000000000</span><br><span class="line">-1            :       11111111111111111111111111111111</span><br><span class="line">0             :       0</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">10   :       1010</span><br><span class="line">1    :       1</span><br><span class="line">10^1 :       1011|11</span><br><span class="line">10^-8:       11111111111111111111111111110010|-14</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">-10   :       11111111111111111111111111110110</span><br><span class="line">-2    :       11111111111111111111111111111110</span><br><span class="line">1     :       1</span><br><span class="line">-10^-2:       1000|8</span><br><span class="line">-10^1 :       11111111111111111111111111110111|-9</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">10^-1:       11111111111111111111111111110101|-11</span><br><span class="line">100^-1:       11111111111111111111111110011011|-101</span><br><span class="line">2147483647^-1:       10000000000000000000000000000000|-2147483648</span><br><span class="line">-2147483648^-1:       1111111111111111111111111111111|2147483647</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">10^0:       1010|10</span><br><span class="line">-10^0:       11111111111111111111111111110110|-10</span><br><span class="line">2147483647^0:       1111111111111111111111111111111|2147483647</span><br><span class="line">-2147483648^0:       10000000000000000000000000000000|-2147483648</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">2147483647^-2147483648:       11111111111111111111111111111111|-1</span><br><span class="line">-10^2147483647 :       10000000000000000000000000001001|-2147483639</span><br><span class="line">-123^2147483647 :       10000000000000000000000001111010|-2147483526</span><br><span class="line">10^2147483647 :       1111111111111111111111111110101|2147483637</span><br><span class="line">-10^-2147483648 :       1111111111111111111111111110110|2147483638</span><br><span class="line">-123^-2147483648 :       1111111111111111111111110000101|2147483525</span><br><span class="line">10^-2147483648 :       10000000000000000000000000001010|-2147483638</span><br></pre></td></tr></table></figure>
<hr>
<h6><span id="wei-fei">位非 ~</span><a href="#wei-fei" class="header-anchor">#</a></h6><p>位非是单目运算符，是将数字在二进制形式下，并且都补齐到32位，然后逐一对每一位进行运算，1则的0，0则得1，最终得到的二进制为结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;2147483647    :       &quot; + Integer.toBinaryString(2147483647));</span><br><span class="line">		System.out.println(&quot;~2147483647   :       &quot; + Integer.toBinaryString(~2147483647) + &quot;|&quot; + ~2147483647);</span><br><span class="line">		System.out.println(&quot;-2147483648   :       &quot; + Integer.toBinaryString(-2147483648));</span><br><span class="line">		System.out.println(&quot;~-2147483648  :       &quot; + Integer.toBinaryString(~-2147483648) + &quot;|&quot; + ~-2147483648);</span><br><span class="line">		System.out.println(&quot;-1            :       &quot; + Integer.toBinaryString(-1));</span><br><span class="line">		System.out.println(&quot;~-1           :       &quot; + Integer.toBinaryString(~-1) + &quot;|&quot; + ~-1);</span><br><span class="line">		System.out.println(&quot;0             :       &quot; + Integer.toBinaryString(0));</span><br><span class="line">		System.out.println(&quot;~0            :       &quot; + Integer.toBinaryString(~0) + &quot;|&quot; + ~0);</span><br><span class="line">		System.out.println(&quot;10            :       &quot; + Integer.toBinaryString(10));</span><br><span class="line">		System.out.println(&quot;~10           :       &quot; + Integer.toBinaryString(~10) + &quot;|&quot; + ~10);</span><br><span class="line">		System.out.println(&quot;-10           :       &quot; + Integer.toBinaryString(-10));</span><br><span class="line">		System.out.println(&quot;~-10          :       &quot; + Integer.toBinaryString(~-10) + &quot;|&quot; + ~-10);</span><br><span class="line">		System.out.println(&quot;-100          :       &quot; + Integer.toBinaryString(-100) );</span><br><span class="line">		System.out.println(&quot;~-100         :       &quot; + Integer.toBinaryString(~-100) + &quot;|&quot; + ~-100);</span><br><span class="line">		System.out.println(&quot;100           :       &quot; + Integer.toBinaryString(100) );</span><br><span class="line">		System.out.println(&quot;~100          :       &quot; + Integer.toBinaryString(~100) + &quot;|&quot; + ~100);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2147483647    :       1111111111111111111111111111111</span><br><span class="line">~2147483647   :       10000000000000000000000000000000|-2147483648</span><br><span class="line">-2147483648   :       10000000000000000000000000000000</span><br><span class="line">~-2147483648  :       1111111111111111111111111111111|2147483647</span><br><span class="line">-1            :       11111111111111111111111111111111</span><br><span class="line">~-1           :       0|0</span><br><span class="line">0             :       0</span><br><span class="line">~0            :       11111111111111111111111111111111|-1</span><br><span class="line">10            :       1010</span><br><span class="line">~10           :       11111111111111111111111111110101|-11</span><br><span class="line">-10           :       11111111111111111111111111110110</span><br><span class="line">~-10          :       1001|9</span><br><span class="line">-100          :       11111111111111111111111110011100</span><br><span class="line">~-100         :       1100011|99</span><br><span class="line">100           :       1100100</span><br><span class="line">~100          :       11111111111111111111111110011011|-101</span><br></pre></td></tr></table></figure>
<hr>
<h2><span id="zi-xue-shi-yan-ru-you-cuo-wu-huan-ying-pai-zhuan">自学试验，如有错误，欢迎拍砖。</span><a href="#zi-xue-shi-yan-ru-you-cuo-wu-huan-ying-pai-zhuan" class="header-anchor">#</a></h2>]]></content>
      <categories>
        <category>技术</category>
        <category>JAVA</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>位运算符</tag>
      </tags>
  </entry>
  <entry>
    <title>logic-1</title>
    <url>/2017/12/20/logic-1/</url>
    <content><![CDATA[<h2><span id="jie-ti-fang-fa">解题方法</span><a href="#jie-ti-fang-fa" class="header-anchor">#</a></h2><ul>
<li>A(前)=&gt;B(后) 前真后必真，后假前必假，前假后不定，后真前不定</li>
<li>矛盾关系 1-&gt;1’ 2-&gt;3’ 2’-&gt;3</li>
</ul>
<hr>
<ul>
<li>只要A，就B = 如果A，那么B = 如果A，则B  = A=&gt;B</li>
<li>只有A，才能B = B=&gt;A</li>
<li>除非A，否则B = 或者A，或者B = A+B</li>
<li>等价：A=&gt;B = Bbar=&gt;Abar = Abar+B</li>
<li>矛盾：A=&gt;B的矛盾 A·Bbar 即 A但（并且）Bbar</li>
<li>不可能 A·Bbar 就是A·Bbar的矛盾，即 不可能A·Bbar === A=&gt;B  <h6><span id="shuang-jian-tou-ke-yi-zi-you-ni-fou-bu-neng-zi-you-diao-xiang">双箭头可以自由逆否，不能自由调向</span><a href="#shuang-jian-tou-ke-yi-zi-you-ni-fou-bu-neng-zi-you-diao-xiang" class="header-anchor">#</a></h6></li>
<li>所有的A都是B = A必然是B === A=&gt;B</li>
<li>所有的A都不是B = A必然不是B === A=&gt;Bbar</li>
<li>有的A是B = A可能是B ===  A -&gt; B </li>
<li>有的A不是B = A可能不是B === A-&gt;Bbar<h6><span id="fan-bo-yi-ding-wei-jia-zhao-mao-dun-jian-tou-ji-bie-huan-zhi-xiang-bian-fou-ding">反驳/一定为假 找矛盾 箭头级别换，指向边否定</span><a href="#fan-bo-yi-ding-wei-jia-zhao-mao-dun-jian-tou-ji-bie-huan-zhi-xiang-bian-fou-ding" class="header-anchor">#</a></h6></li>
<li>E -&gt; A 的矛盾 E =&gt; Abar</li>
<li>A =&gt; Dbar 的矛盾 A -&gt; D <h6><span id="si-wei-lian-tiao-ru-guo-you-dan-jian-tou-zhi-neng-di-yi-ge-shi-dan-jian-tou">思维链条，如果有单箭头，只能第一个是单箭头</span><a href="#si-wei-lian-tiao-ru-guo-you-dan-jian-tou-zhi-neng-di-yi-ge-shi-dan-jian-tou" class="header-anchor">#</a></h6></li>
</ul>
<h6><span id="yi-zhi-ti-mu-quan-wei-zhen-qiu-you-na-xie-yong-hua-xian-fa-tiao-jian-jun-hua-wei-jia-fa-shi">已知题目全为真，求有哪些，用划线法，条件均化为加法式</span><a href="#yi-zhi-ti-mu-quan-wei-zhen-qiu-you-na-xie-yong-hua-xian-fa-tiao-jian-jun-hua-wei-jia-fa-shi" class="header-anchor">#</a></h6><a id="more"></a>
<hr>
<h2><span id="lun-zheng-luo-ji">论证逻辑</span><a href="#lun-zheng-luo-ji" class="header-anchor">#</a></h2><h6><span id="tong-ji-tui-li">统计推理</span><a href="#tong-ji-tui-li" class="header-anchor">#</a></h6><ul>
<li>含义：论据小范围，个体，局部；论点：大范围，整体，一般</li>
<li>命题点：代表性</li>
<li>加强/支持/假设：指出具有代表性</li>
<li>削弱/质疑/反驳：指出不具有代表性<h6><span id="lei-bi-tui-li">类比推理</span><a href="#lei-bi-tui-li" class="header-anchor">#</a></h6></li>
<li>含义：论据：A与B相似；A具有特征P；论点：B也具有特征P</li>
<li>命题：相似性</li>
<li>加强/支持/假设：指出具有相似性</li>
<li>削弱/质疑/反驳：指出没有相似性<h6><span id="yin-guo-tui-li">因果推理</span><a href="#yin-guo-tui-li" class="header-anchor">#</a></h6></li>
<li>含义：A导致B，（A是B的原因）</li>
<li>加强/支持/假设：实验组与对照组在其他方面基本相同</li>
<li>削弱/质疑/反驳：因果倒置/存在他因/有因无果，无果有因<h6><span id="cuo-shi-mu-biao-xing-tui-li">措施目标型推理</span><a href="#cuo-shi-mu-biao-xing-tui-li" class="header-anchor">#</a></h6></li>
<li>含义：为了达到某个目标，而采取某个措施/建议/方案</li>
<li>加强/支持：措施能够实现目标</li>
<li>假设：目前缺乏有效措施</li>
<li>削弱/质疑/反驳：1.措施达不到目标；2.措施达不到目标；3.措施有困难<h6><span id="jing-zheng-gong-cun-xing-tui-li">竞争共存性推理</span><a href="#jing-zheng-gong-cun-xing-tui-li" class="header-anchor">#</a></h6></li>
<li>含义：A与B在功能作用上相同，A要取代B</li>
<li>命题点：替代性与依赖性</li>
<li>加强/支持/假设：A能够替代B</li>
<li>削弱/质疑/反驳：A依赖于B</li>
</ul>
<hr>
<ul>
<li>比例题找比例</li>
<li>加强：在一个更大的范围内找一个更小的百分比</li>
<li>削弱：在一个更大的范围内找一个更大的百分比</li>
</ul>
<hr>
<h6><span id="dui-ou-ci">对偶词</span><a href="#dui-ou-ci" class="header-anchor">#</a></h6><ul>
<li>所有 — 有的</li>
<li>必然 — 可能</li>
<li>并且 — 可能</li>
<li>肯定 — 否定</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>math-1</title>
    <url>/2017/12/19/math-1/</url>
    <content><![CDATA[<h2><span id="jie-ti-fang-fa">解题方法</span><a href="#jie-ti-fang-fa" class="header-anchor">#</a></h2><ol>
<li>举例假设（有代表性，尽量全情况）</li>
<li>质数方程，设2</li>
<li>积固定，越极端和越大</li>
<li>裂项求和，取首尾</li>
<li>见比设K，分数比化整数（乘以分母的最小公倍数）</li>
<li>同构即等（分数要注意分母不等于0）</li>
<li>多比化连比</li>
<li>单独不充分，不能明确联合情况，则认为联合正确</li>
<li>y=|x-a| + |x-b|, y(min)=|a-b|</li>
<li>|xy| + ab = a|x| + b|y|,围成图形的面积s=4ab</li>
</ol>
<a id="more"></a>
<ol start="11">
<li>a|x| + b|y| = c ,菱形，s=2c*c/ab</li>
<li>条件充分性，举反例</li>
<li>x^3 + y^3 = (x+y)(x^2 - xy + y^2)</li>
<li>恒等式取特值</li>
<li>两个条件一个复杂，一个简单，从简单的入手，简单的可行则复杂的也可以</li>
<li>以下条件都推出：a = b = c</li>
</ol>
<ul>
<li>a^2 + b^2 + c^2 = ab + ac + bc</li>
<li>a,b,c等差且a^2,b^2,c^2等差</li>
<li>3x^2 + [2b - 4(a+c)]x + (4ac-b^2)=0,有两个相等的实根</li>
</ul>
<ol start="17">
<li>格点 方形：s = N + L/2 - 1 三角形： s = 2(N + L/2 - 1)</li>
<li>凸行弧 s = Apai - B, 凹型图 s = B - Apai</li>
<li>打包计数法：</li>
</ol>
<ul>
<li>4-3 36 </li>
<li>5-3 150 </li>
<li>5-4 240 </li>
<li>6-3 540 </li>
<li>6-4 1560 </li>
<li>6-5 1800</li>
</ul>
<ol start="20">
<li>环形染色： m色n区  (m-1)^n + (-1)^n*(m-1)</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>pie-chart</title>
    <url>/2017/12/15/pie-chart/</url>
    <content><![CDATA[<h6><span id="the-pie-chart-above-distinctly-crystalizes-the-diffrent-travel-modes-for-inhabitants-in-a-certain-city-in-the-light-of-the-typical-statistics-of-the-chart-one-may-find-that-driving-private-cars-ranks-the-first-among-all-the-five-categories-accounting-for-as-high-as-50-surprisingly-however-next-to-it-are-all-those-green-and-healthy-travel-behaviors-particularly-riding-bicycles-which-is-responsible-for-merely-1">The pie chart above distinctly crystalizes the diffrent travel modes for inhabitants in a certain city. In the light of the typical statistics of the chart, one may find that driving private cars ranks the first among all the five categories, accounting for as high as 50%. Surprisingly, however, next to it are all those green and healthy travel behaviors, particularly riding bicycles, which is responsible for merely 1%.</span><a href="#the-pie-chart-above-distinctly-crystalizes-the-diffrent-travel-modes-for-inhabitants-in-a-certain-city-in-the-light-of-the-typical-statistics-of-the-chart-one-may-find-that-driving-private-cars-ranks-the-first-among-all-the-five-categories-accounting-for-as-high-as-50-surprisingly-however-next-to-it-are-all-those-green-and-healthy-travel-behaviors-particularly-riding-bicycles-which-is-responsible-for-merely-1" class="header-anchor">#</a></h6><h6><span id="the-driving-influences-behind-the-picture-might-vary-from-case-to-case-yet-the-universal-ones-for-my-part-can-be-listed-as-follows-first-and-foremost-is-the-backward-public-transport-system-what-s-more-there-is-no-denying-that-the-scenario-at-the-moment-to-a-certain-degree-derives-from-the-public-s-poor-environment-consciousness-finally-it-cannot-be-overemphasized-that-the-convenience-flexibility-and-comfort-peculiar-to-private-cars-also-contributes-a-lot-to-the-present-condition">The driving influences behind the picture might vary from case to case. Yet the universal ones, for my part, can be listed as follows. First and foremost is the backward public transport system. What’s more, there is no denying that the scenario at the moment, to a certain degree, derives from the public’s poor environment consciousness. Finally, it cannot be overemphasized that the convenience, flexibility and comfort peculiar to private cars also contributes a lot to the present condition.</span><a href="#the-driving-influences-behind-the-picture-might-vary-from-case-to-case-yet-the-universal-ones-for-my-part-can-be-listed-as-follows-first-and-foremost-is-the-backward-public-transport-system-what-s-more-there-is-no-denying-that-the-scenario-at-the-moment-to-a-certain-degree-derives-from-the-public-s-poor-environment-consciousness-finally-it-cannot-be-overemphasized-that-the-convenience-flexibility-and-comfort-peculiar-to-private-cars-also-contributes-a-lot-to-the-present-condition" class="header-anchor">#</a></h6><h6><span id="given-the-arguments-so-far-drastic-measures-must-be-taken-as-soon-as-possible-to-reverse-or-at-least-alleviate-the-deterioration-and-i-firmly-believe-that-our-combined-efforts-well-surely-translate-into-a-brighter-futuer">Given the arguments so far, drastic measures must be taken as soon as possible to reverse or at least alleviate the deterioration. And I firmly believe that our combined efforts well surely translate into a brighter futuer.</span><a href="#given-the-arguments-so-far-drastic-measures-must-be-taken-as-soon-as-possible-to-reverse-or-at-least-alleviate-the-deterioration-and-i-firmly-believe-that-our-combined-efforts-well-surely-translate-into-a-brighter-futuer" class="header-anchor">#</a></h6>]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
        <tag>chart</tag>
      </tags>
  </entry>
  <entry>
    <title>tourism-industry</title>
    <url>/2017/12/15/tourism-industry/</url>
    <content><![CDATA[<h6><span id="the-table-above-distinctly-crystalizes-the-vast-changes-that-have-arisen-in-respect-of-tourism-industry-in-a-certain-city-in-the-light-of-the-typical-statistics-of-the-table-one-may-find-that-this-industry-has-been-on-a-constant-growth-all-these-years-in-2010-the-revenue-of-this-industry-for-example-was-at-the-bottom-merely-380-million-rmb-surprisingly-it-soared-to-1-5-billion-just-six-years-latter-in-the-meantime-however-tourists-complaints-have-witnessed-a-startling-increase-as-well-reaching-3-600-times-in-2016">The table above distinctly crystalizes the vast changes that have arisen in respect of tourism industry in a certain city. In the light of the typical statistics of the table, one may find that this industry has been on a constant growth all these years. In 2010, the revenue of this industry, for example, was at the bottom, merely 380 million RMB; surprisingly, it soared to 1.5 billion just six years latter. In the meantime, however, tourists complaints have witnessed a startling increase as well, reaching 3,600 times in 2016.</span><a href="#the-table-above-distinctly-crystalizes-the-vast-changes-that-have-arisen-in-respect-of-tourism-industry-in-a-certain-city-in-the-light-of-the-typical-statistics-of-the-table-one-may-find-that-this-industry-has-been-on-a-constant-growth-all-these-years-in-2010-the-revenue-of-this-industry-for-example-was-at-the-bottom-merely-380-million-rmb-surprisingly-it-soared-to-1-5-billion-just-six-years-latter-in-the-meantime-however-tourists-complaints-have-witnessed-a-startling-increase-as-well-reaching-3-600-times-in-2016" class="header-anchor">#</a></h6><h6><span id="the-driving-influences-behind-the-picture-might-vary-from-case-to-case-yet-the-universal-ones-for-my-part-it-can-be-listed-as-follows-first-and-foremost-is-most-scenic-spots-backward-facilities-and-service-system-what-s-more-there-is-no-denying-that-the-scenario-at-the-moment-to-a-certain-degree-derives-from-the-inadequacy-of-the-relevant-departments-regulation-and-supervision-finally-it-cannot-be-overemphasized-that-tourist-agencies-poor-service-also-contributes-a-lot-to-the-present-condition">The driving influences behind the picture might vary from case to case. Yet the universal ones, for my part, it can be listed as follows. First and foremost is most scenic spots’ backward facilities and service system. What’s more, there is no denying that the scenario at the moment, to a certain degree, derives from the inadequacy of the relevant departments’ regulation and supervision. Finally, it cannot be overemphasized that tourist agencies’ poor service also contributes a lot to the present condition.</span><a href="#the-driving-influences-behind-the-picture-might-vary-from-case-to-case-yet-the-universal-ones-for-my-part-it-can-be-listed-as-follows-first-and-foremost-is-most-scenic-spots-backward-facilities-and-service-system-what-s-more-there-is-no-denying-that-the-scenario-at-the-moment-to-a-certain-degree-derives-from-the-inadequacy-of-the-relevant-departments-regulation-and-supervision-finally-it-cannot-be-overemphasized-that-tourist-agencies-poor-service-also-contributes-a-lot-to-the-present-condition" class="header-anchor">#</a></h6><h6><span id="given-the-arguments-so-far-drastic-measures-must-be-taken-as-soon-as-possible-to-reverse-or-at-least-alleviate-the-deterioration-and-i-firmly-believe-that-our-conbined-efforts-well-surely-translate-into-a-brighter-future">Given the arguments so far, drastic measures must be taken as soon as possible to reverse or at least alleviate the deterioration. And I firmly believe that our conbined efforts well surely translate into a brighter future.</span><a href="#given-the-arguments-so-far-drastic-measures-must-be-taken-as-soon-as-possible-to-reverse-or-at-least-alleviate-the-deterioration-and-i-firmly-believe-that-our-conbined-efforts-well-surely-translate-into-a-brighter-future" class="header-anchor">#</a></h6>]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>travel-frequency</title>
    <url>/2017/12/15/travel-frequency/</url>
    <content><![CDATA[<h6><span id="the-line-chart-above-distinctly-crystalizes-the-vast-changes-that-have-arisen-in-repect-of-the-chinese-people-s-travel-frequency-in-the-light-of-typical-statistics-of-the-chart-one-may-find-that-the-average-number-of-leisure-trips-for-both-urban-and-rural-residents-has-been-on-a-constant-rise-all-these-years-in-2001-the-number-of-trips-for-city-dwellers-for-example-was-merely-1-8-times-surprisingly-however-it-soared-to-fourteen-years-later">The line chart above distinctly crystalizes the vast changes that have arisen in repect of the Chinese people’s travel frequency. In the light of typical statistics of the chart, one may find that the average number of leisure trips for both urban and rural residents has been on a constant rise all these years. In 2001, the number of trips for city dwellers, for example was merely 1.8 times; surprisingly, however, it soared to fourteen years later.</span><a href="#the-line-chart-above-distinctly-crystalizes-the-vast-changes-that-have-arisen-in-repect-of-the-chinese-people-s-travel-frequency-in-the-light-of-typical-statistics-of-the-chart-one-may-find-that-the-average-number-of-leisure-trips-for-both-urban-and-rural-residents-has-been-on-a-constant-rise-all-these-years-in-2001-the-number-of-trips-for-city-dwellers-for-example-was-merely-1-8-times-surprisingly-however-it-soared-to-fourteen-years-later" class="header-anchor">#</a></h6><h6><span id="the-driving-influences-behind-the-picture-might-vary-from-case-to-case-yet-the-universal-ones-for-my-part-can-be-listed-as-follows-first-and-foremost-is-the-considerable-improvement-of-the-chinese-quality-of-life-what-s-more-there-is-no-denying-that-derives-from-people-s-desire-to-relieve-stress-base-unpon-a-latest-survey-conducted-by-the-chinese-academy-of-social-sciences-around-86-of-respondents-claim-that-touring-have-evolved-into-an-indispensable-part-of-their-life-finally-it-cannot-be-overemphasized-that-the-substantial-enhancement-of-the-transport-infrastructure-also-contributes-a-lot-to-the-present-condition">The driving influences behind the picture might vary from case to case. Yet the universal ones, for my part, can be listed as follows. First and foremost is the considerable improvement of the Chinese quality of life. What’s more, there is no denying that derives from people’s desire to relieve stress. Base unpon a latest survey conducted by the Chinese Academy of Social Sciences, around 86% of respondents claim that touring  have evolved into an indispensable part of their life. Finally, it cannot be overemphasized that the substantial enhancement of the transport infrastructure also contributes a lot to the present condition.</span><a href="#the-driving-influences-behind-the-picture-might-vary-from-case-to-case-yet-the-universal-ones-for-my-part-can-be-listed-as-follows-first-and-foremost-is-the-considerable-improvement-of-the-chinese-quality-of-life-what-s-more-there-is-no-denying-that-derives-from-people-s-desire-to-relieve-stress-base-unpon-a-latest-survey-conducted-by-the-chinese-academy-of-social-sciences-around-86-of-respondents-claim-that-touring-have-evolved-into-an-indispensable-part-of-their-life-finally-it-cannot-be-overemphasized-that-the-substantial-enhancement-of-the-transport-infrastructure-also-contributes-a-lot-to-the-present-condition" class="header-anchor">#</a></h6><h6><span id="given-the-arguments-so-far-it-s-nothing-but-understandable-to-see-such-an-emerging-trend-in-the-current-ever-changing-hi-tech-era">Given the arguments so far, it’s nothing but understandable to see such an emerging trend in the current ever-changing hi-tech era.</span><a href="#given-the-arguments-so-far-it-s-nothing-but-understandable-to-see-such-an-emerging-trend-in-the-current-ever-changing-hi-tech-era" class="header-anchor">#</a></h6>]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>life-expectancy</title>
    <url>/2017/12/14/life-expectancy/</url>
    <content><![CDATA[<p>The table above distinctly crystalizes the vast changes that have arisen in respect of the average life expectancy in recent decades. In the light of the typical statistics of the table, one may find that the life expectancy in China has been on a constant rise all these years. In 1949, the expected life span was at the bottom, merely 35; surprisingly, however, it soared to 75 in 2015.</p>
<p>The driving influences behind the picture might vary form case to case. Yet the universal ones, for my part, can be listed as follows. First and foremost is the considerable improvement of the Chinese people’s quality of life. What’s more, there is no denying that the scenario at the moment, to a certain degree, derives from the enhancement of the public’s health consciousness. Based upon a latest survey conducted by the Chinese Academy of Social Sciences, around 86% of the respondents claim that regular physical exminations have be evolved into an indispensable part of their life. Finally, it cannot be overemphasized that the perfection of the health service system also contributes a lot to the present condition.</p>
<p>Given the arguments so far, it’s nothing but understandable to see such an emering trend in the current society of prosperity and effluence.</p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>bar-chart</title>
    <url>/2017/12/13/bar-chart/</url>
    <content><![CDATA[<h5><span id="the-bar-chart-above-distinctly-crystalizes-the-vast-changes-that-have-arisen-in-respect-of-the-transaction-size-of-online-shopping-of-china-in-the-light-of-the-typical-statistics-of-the-chart-one-may-find-that-the-volume-of-transaction-has-been-on-a-constant-rise-all-these-year-in-2011-the-trading-size-was-at-the-bottom-merely-860-billion-rmb-surprisingly-however-it-soared-to-3-800-billion-4-years-later">The bar chart above distinctly crystalizes the vast changes that have arisen in respect of the transaction size of online shopping of China. In the light of the typical statistics of the chart, one may find that the volume of transaction has been on a constant rise all these year. In 2011, the trading size was at the bottom, merely 860 billion RMB; surprisingly, however, it soared to 3,800 billion 4 years later.</span><a href="#the-bar-chart-above-distinctly-crystalizes-the-vast-changes-that-have-arisen-in-respect-of-the-transaction-size-of-online-shopping-of-china-in-the-light-of-the-typical-statistics-of-the-chart-one-may-find-that-the-volume-of-transaction-has-been-on-a-constant-rise-all-these-year-in-2011-the-trading-size-was-at-the-bottom-merely-860-billion-rmb-surprisingly-however-it-soared-to-3-800-billion-4-years-later" class="header-anchor">#</a></h5><h5><span id="the-driving-influences-behind-the-picture-might-vary-from-case-to-case-yet-the-universal-ones-for-my-part-can-be-listed-as-follows-first-and-foremost-is-the-rapid-popularization-of-the-internet-what-s-more-there-is-no-denying-that-the-senario-at-the-moment-to-a-certain-degree-derives-from-the-convenience-flexibility-and-comfort-peculiar-to-online-shopping-finally-it-cannnot-be-overemphasized-that-the-lower-prices-of-the-items-in-the-online-stores-also-contributes-a-lot-to-the-present-condition-base-upon-a-lasted-survey-conducted-by-the-chinese-academy-of-social-sciences-around-68-of-the-respondents-choose-to-surf-online-shops-for-the-favorable-price">The driving influences behind the picture might vary from case to case. Yet the universal ones, for my part, can be listed as follows. First and foremost is the rapid popularization of the Internet. What’s more, there is no denying that the senario at the moment, to a certain degree, derives from the convenience, flexibility and comfort peculiar to online shopping. Finally, it cannnot be overemphasized that the lower prices of the items in the online stores also contributes a lot to the present condition. Base upon a lasted survey conducted by the Chinese Academy of Social Sciences, around 68% of the respondents choose to surf online shops for the favorable price.</span><a href="#the-driving-influences-behind-the-picture-might-vary-from-case-to-case-yet-the-universal-ones-for-my-part-can-be-listed-as-follows-first-and-foremost-is-the-rapid-popularization-of-the-internet-what-s-more-there-is-no-denying-that-the-senario-at-the-moment-to-a-certain-degree-derives-from-the-convenience-flexibility-and-comfort-peculiar-to-online-shopping-finally-it-cannnot-be-overemphasized-that-the-lower-prices-of-the-items-in-the-online-stores-also-contributes-a-lot-to-the-present-condition-base-upon-a-lasted-survey-conducted-by-the-chinese-academy-of-social-sciences-around-68-of-the-respondents-choose-to-surf-online-shops-for-the-favorable-price" class="header-anchor">#</a></h5><h5><span id="given-the-arguments-so-far-it-s-nothing-but-understandable-to-see-such-an-emerging-trend-in-the-current-ever-changing-hi-tech-era">Given the arguments so far, it’s nothing but understandable to see such an emerging trend in the current ever-changing hi-tech era.</span><a href="#given-the-arguments-so-far-it-s-nothing-but-understandable-to-see-such-an-emerging-trend-in-the-current-ever-changing-hi-tech-era" class="header-anchor">#</a></h5><p><img src="/2017/12/13/bar-chart/bar-chart.png" alt="bar-chart"></p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>invite-email</title>
    <url>/2017/12/12/invite-email/</url>
    <content><![CDATA[<p>Dear Sir,<br>    As a number of the Students’ Union of the English Department, I am writing the email on its behalf to cordially invite you to deliver a speech for the upcoming symposium on college English study.<br>    The symposium is to be held in our university main hall on Jan 20th. It will begain at 9 a.m. and last roughly three hours. There will be six experts present, each to deliver a speech within 20 minutes on how to improve college students’ English skills. Following the presentation of the lectures will be a question-and-answer period for the audience.<br>    Thanks a lot for your due attention to the email. Looing forward to your reply at you earlist convenience.</p>
<pre><code>Yours sincerely,
        Li Ming
</code></pre><p><img src="/2017/12/12/invite-email/invite-email.jpg" alt="a email of invitation"></p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>recommend-email</title>
    <url>/2017/12/11/recommend-email/</url>
    <content><![CDATA[<p>Dear judy,<br>    Hope this email finds you and your family well. The letter I am writing is meant to recommend for your sightseeing in China a tourist resort, Beijing, the capital of six dynasties in history.<br>    This ancient city is well worth visiting for its following virtues. The reasons for the recommendation are as follows. The first point I’d like to highlight is that Beijing is the political, economic and cultural center of our nation, namely, the epitome of the contemporary China. In addition, it must be pointed out that the historic city enjoys a long and splendid civilization, which, I’m convinced, is quite to your taste. Last but not the least, the fact cannot be ignored that through travelling this famous city, you can learn more about China’s glorious past and latest development, thus enhancing your acquaintance of the mysterious land.<br>    Please never hesitate to contact me whenever you are in need of help. Wish you a pleasant stay in China.</p>
<pre><code>Yours sincerely,
       Li Ming
</code></pre><p><img src="/2017/12/11/recommend-email/recommend-email.png" alt="a email of tourist resort recommondation"></p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>application-email</title>
    <url>/2017/12/11/application-email/</url>
    <content><![CDATA[<p>Dear Sir or Madam,<br>    I am a student to-be graduate from Sichuan University of China, majoring in English literature. This email is meant to express my strongest wish to pursue my postgraduate education at you prestigious university.<br>    The reasons for my applications are as follows. At the top of the list, to study at an elite university like yours is a long established goal for me. In the second, your graduate courses, as far as I am concerned, are the best globally and therefore quite to my taste. Last but not the least, I have to admit that I am stuck by the thick academic atmosphere on you campus.<br>    Thanks a lot for your due attention to the letter. I am looking forward to you reply at you earlist convenience.</p>
<pre><code>Yours sincerely, 
      Li  Ming   
</code></pre><p><img src="/2017/12/11/application-email/application-email.jpg" alt="a email of abroad university application"></p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm参数总结</title>
    <url>/2017/12/07/jvm%E5%8F%82%E6%95%B0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<ul>
<li>jvm参数较多，不容易分清楚，稍作总结 *</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>JAVA</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>windows创建github_sshkey</title>
    <url>/2017/12/07/windows%E5%88%9B%E5%BB%BAgithub-sshkey/</url>
    <content><![CDATA[<ol>
<li>打开git_bash</li>
<li>ssh-keygen -t rsa -C “<a href="mailto:XXXX@gmail.com" target="_blank" rel="noopener">XXXX@gmail.com</a>“</li>
<li>eval  “ssh-agent -s”<blockquote>
<p>此时如果出现“Could not open a connection to your authentication agent.”，执行 ssh-agent bash，再次执行eval  “ssh-agent -s”</p>
</blockquote>
</li>
<li>ssh-add ~/.ssh/id_rsa<blockquote>
<p>出现<br>“Identityadded:/c/Users/xx/.ssh/id_rsa(/c/Users/xx/.ssh/id_rsa)”表示成功。</p>
</blockquote>
</li>
<li>vim ~/.ssh/id_rsa.pub<blockquote>
<p>拷贝内容到github,增加sshkey设置。</p>
</blockquote>
</li>
<li>ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><blockquote>
<p>出现以下内容表示成功</p>
<ul>
<li>Hi XXXX! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed.</li>
</ul>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>GIT</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>sshkey</tag>
      </tags>
  </entry>
</search>
